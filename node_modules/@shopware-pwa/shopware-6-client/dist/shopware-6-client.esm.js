// packages/shopware-6-client/src/apiService.ts
import axios2 from "axios";

// packages/shopware-6-client/src/interceptors/errorInterceptor.ts
var API_ERROR_CODES = [400, 401, 403, 404, 409, 410, 412, 424, 500];
var extractApiErrorStatusCode = (error) => {
  return error.response && error.response.status || guessTheStatusCodeFromTheMessage(error.message);
};
var guessTheStatusCodeFromTheMessage = (message) => {
  if (typeof message === "string" && message.startsWith("timeout of")) {
    return 408;
  }
  if (typeof message === "string" && message.startsWith("Network Error")) {
    return 0;
  }
  return 500;
};
var extractApiErrorMessage = (error) => {
  const statusCode = extractApiErrorStatusCode(error);
  if (statusCode !== 400) {
    const apiError = statusCode === 500 ? "Internal server error" : error.response.data?.errors?.[0].detail;
    return apiError;
  }
  return error.response.data?.errors;
};
var extractNotApiErrorMessage = (error) => error.message;
async function errorInterceptor(error) {
  const statusCode = extractApiErrorStatusCode(error);
  const clientApiError = {
    message: API_ERROR_CODES.includes(statusCode) ? extractApiErrorMessage(error) : extractNotApiErrorMessage(error),
    statusCode
  };
  return Promise.reject(clientApiError);
}

// packages/shopware-6-client/src/helpers/context.ts
function extractContextToken(response) {
  return response.data["sw-context-token"] || response.data["contextToken"] || response.headers["sw-context-token"];
}

// packages/shopware-6-client/src/interceptors/responseInterceptor.ts
function createResponseInterceptor(update2) {
  return function(response) {
    const contextToken = extractContextToken(response);
    contextToken && update2({ contextToken }, response.config);
    return response;
  };
}

// packages/commons/src/warning.ts
function warning({
  packageName,
  methodName,
  notes
}) {
  console.warn(`[WARNING][@shopware-pwa/${packageName}][${methodName}]: ${notes}`);
}

// compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var compatibility_default = {
  shopwareApiVersion,
  instances
};

// packages/commons/src/defaultConfig.ts
import merge from "lodash/merge";
import axios from "axios";
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/shopware-6-client/src/settings.ts
var defaultConfig = {
  endpoint: defaultPwaConfigFile.shopwareEndpoint,
  accessToken: defaultPwaConfigFile.shopwareAccessToken,
  contextToken: "",
  languageId: "",
  defaultPaginationLimit: 10,
  timeout: 1e4
};

// packages/shopware-6-client/src/helpers/queryParamsBuilder.ts
import queryString from "query-string";
var ARRAY_FORMAT = "separator";
var ARRAY_FORMAT_SEPARATOR = "|";
var SKIP_NULL = true;
var SORT = false;
var getQueryString = (params) => typeof params === "string" ? params : queryString.stringify(params, {
  arrayFormat: ARRAY_FORMAT,
  arrayFormatSeparator: ARRAY_FORMAT_SEPARATOR,
  skipNull: SKIP_NULL,
  sort: SORT
});

// packages/shopware-6-client/src/apiService.ts
function _createInstance(initialConfig = {}) {
  const callbackMethods = [];
  let clientConfig = {};
  const apiService = axios2.create();
  function reloadConfiguration() {
    apiService.defaults.baseURL = clientConfig.endpoint;
    if (clientConfig.timeout) {
      apiService.defaults.timeout = typeof clientConfig.timeout === "number" && clientConfig.timeout || typeof clientConfig.timeout === "string" && parseInt(clientConfig.timeout) || 0;
    }
    apiService.defaults.headers.common["sw-include-seo-urls"] = true;
    apiService.defaults.headers.common["sw-access-key"] = clientConfig.accessToken;
    apiService.defaults.paramsSerializer = getQueryString;
    if (clientConfig.contextToken) {
      apiService.defaults.headers.common["sw-context-token"] = clientConfig.contextToken;
    } else {
      delete apiService.defaults.headers.common["sw-context-token"];
    }
    if (clientConfig.languageId) {
      apiService.defaults.headers.common["sw-language-id"] = clientConfig.languageId;
    } else {
      delete apiService.defaults.headers.common["sw-language-id"];
    }
  }
  function onConfigChange2(fn) {
    callbackMethods.push(fn);
  }
  const setup2 = function(config2 = {}) {
    clientConfig = Object.assign(clientConfig, defaultConfig, config2);
    reloadConfiguration();
  };
  setup2(initialConfig);
  const update2 = function(config2, responseConfig) {
    clientConfig = Object.assign(clientConfig, config2);
    if (!callbackMethods.length && responseConfig) {
      console.warn(`[shopware-6-api] After calling API method ${responseConfig.url} there is no "onConfigChange" listener. See https://shopware-pwa-docs.vuestorefront.io/landing/fundamentals/security.html#context-awareness`);
    }
    callbackMethods.forEach((fn) => fn({ config: clientConfig }));
    reloadConfiguration();
  };
  const invoke = {
    post: apiService.post,
    put: apiService.put,
    get: apiService.get,
    patch: apiService.patch,
    delete: apiService.delete
  };
  apiService.interceptors.response.use(createResponseInterceptor(update2), errorInterceptor);
  return {
    onConfigChange: onConfigChange2,
    config: clientConfig,
    setup: setup2,
    update: update2,
    invoke,
    defaults: apiService.defaults
  };
}
function createInstance(initialConfig = {}) {
  const { onConfigChange: onConfigChange2, config: config2, setup: setup2, update: update2, invoke, defaults } = _createInstance(initialConfig);
  return {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: (config3 = {}) => {
      update2(config3);
    },
    invoke,
    defaults
  };
}
var defaultInstance = createInstance();

// packages/shopware-6-client/src/endpoints.ts
var getCategoryEndpoint = () => `/store-api/category`;
var getCategoryDetailsEndpoint = (categoryId) => `/store-api/category/${categoryId}`;
var getProductListingEndpoint = (categoryId) => `/store-api/product-listing/${categoryId}`;
var getProductEndpoint = () => `/store-api/product`;
var getProductDetailsEndpoint = (productId) => `/store-api/product/${productId}`;
var getSuggestSearchEndpoint = () => `/store-api/search-suggest`;
var getSearchEndpoint = () => `/store-api/search`;
var getCustomerAddAddressEndpoint = () => `/store-api/account/address`;
var getCustomerAddressEndpoint = (addressId) => addressId ? `/store-api/account/address/${addressId}` : "/store-api/account/list-address";
var getCustomerDefaultAddressEndpoint = (type, addressId) => `/store-api/account/address/default-${type}/${addressId}`;
var getCustomerDefaultBillingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("billing", addressId);
var getCustomerDefaultShippingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("shipping", addressId);
var getCustomerEndpoint = () => `/store-api/account/customer`;
var getCustomerRegisterEndpoint = () => `/store-api/account/register`;
var getCustomerDetailsUpdateEndpoint = () => `/store-api/account/change-profile`;
var getCustomerLoginEndpoint = () => `/store-api/account/login`;
var getCustomerLogoutEndpoint = () => `/store-api/account/logout`;
var getCustomerOrderEndpoint = () => `/store-api/order`;
var getCustomerUpdateEmailEndpoint = () => `/store-api/account/change-email`;
var getCustomerUpdatePasswordEndpoint = () => `/store-api/account/change-password`;
var getCustomerResetPasswordEndpoint = () => `/store-api/account/recovery-password`;
var getConfirmPasswordResetEndpoint = () => `/store-api/account/recovery-password-confirm`;
var getCheckoutCartEndpoint = () => `/store-api/checkout/cart`;
var getCheckoutCartLineItemEndpoint = () => `/store-api/checkout/cart/line-item`;
var getCheckoutOrderEndpoint = () => `/store-api/checkout/order`;
var getContextEndpoint = () => `/store-api/context`;
var getContextCurrencyEndpoint = () => `/store-api/currency`;
var getContextLanguageEndpoint = () => `/store-api/language`;
var getContextCountryEndpoint = () => `/store-api/country`;
var getContextPaymentMethodEndpoint = () => `/store-api/payment-method`;
var getContextShippingMethodEndpoint = () => `/store-api/shipping-method`;
var getContextSalutationEndpoint = () => `/store-api/salutation`;
var getNewsletterSubscribeEndpoint = () => `/newsletter/subscribe`;
var getNewsletterUnsubscribeEndpoint = () => `/newsletter/unsubscribe`;
var getPageResolverEndpoint = () => `/store-api/pwa/page`;
var getSeoUrlEndpoint = () => "/store-api/seo-url";
var getStoreNavigationEndpoint = (requestActiveId, requestRootId) => `/store-api/navigation/${requestActiveId}/${requestRootId}`;
var getContactFormEndpoint = () => `/store-api/contact-form`;
var handlePaymentEndpoint = () => `/store-api/handle-payment`;
var getStoreNewsletterSubscribeEndpoint = () => `/store-api/newsletter/subscribe`;
var getStoreNewsletterConfirmEndpoint = () => `/store-api/newsletter/confirm`;
var getStoreNewsletterUnsubscribeEndpoint = () => `/store-api/newsletter/unsubscribe`;

// packages/shopware-6-client/src/services/categoryService.ts
async function getCategories(searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCategoryEndpoint(), searchCriteria);
  return resp.data;
}
async function getCategory(categoryId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCategoryDetailsEndpoint(categoryId));
  return resp.data;
}

// packages/shopware-6-client/src/helpers/convertAssociations.ts
function convertAssociations(associations = []) {
  if (!Array.isArray(associations) && typeof associations === "object") {
    return associations;
  }
  if (!Array.isArray(associations) || !associations.length)
    return;
  let shopwareAssociations = {};
  associations.forEach((association) => {
    shopwareAssociations[association.name] = association.associations ? {
      associations: convertAssociations(association.associations)
    } : {};
  });
  return shopwareAssociations;
}

// packages/commons/interfaces/search/SearchFilter.ts
var SearchFilterType;
(function(SearchFilterType2) {
  SearchFilterType2["EQUALS"] = "equals";
  SearchFilterType2["CONTAINS"] = "contains";
  SearchFilterType2["EQUALS_ANY"] = "equalsAny";
  SearchFilterType2["NOT"] = "not";
  SearchFilterType2["MULTI"] = "multi";
  SearchFilterType2["RANGE"] = "range";
  SearchFilterType2["MAX"] = "max";
})(SearchFilterType || (SearchFilterType = {}));

// packages/shopware-6-client/src/helpers/convertToStoreApiFilters.ts
var concatIds = (ids) => ids.join("|");
var isFilterForProperty = (property, filter) => filter.hasOwnProperty("field") && filter.field === property;
var isFilterType = (type, filter) => filter.hasOwnProperty("type") && filter.type === type;
function convertToStoreApiFilters(filters) {
  let params = {};
  if (!filters || !filters.length) {
    return {};
  }
  for (const filter of filters) {
    if (isFilterType("max", filter)) {
      const maxFilter = filter;
      params[maxFilter.field] = maxFilter.max;
    }
    if (isFilterForProperty("price", filter) && filter.parameters) {
      const { lt, gt, lte, gte } = filter.parameters;
      if (lt || lte) {
        params["max-price"] = lt || lte;
      }
      if (gt || gte) {
        params["min-price"] = gt || gte;
      }
    }
    if (isFilterForProperty("manufacturerId", filter) && filter.value) {
      params.manufacturer = concatIds(filter.value);
    }
    if (filter.type === SearchFilterType.MULTI && filter.queries) {
      for (const subFilter of filter.queries) {
        if (isFilterForProperty("propertyIds", subFilter)) {
          params.properties = concatIds(subFilter.value);
        }
      }
    }
  }
  return params;
}

// packages/shopware-6-client/src/helpers/searchConverter.ts
var ApiType;
(function(ApiType2) {
  ApiType2["store"] = "store-api";
  ApiType2["salesChannel"] = "sales-channel-api";
})(ApiType || (ApiType = {}));
var convertShopwareSearchCriteria = (searchCriteria) => {
  const params = {
    limit: searchCriteria?.pagination?.limit || 10,
    p: searchCriteria?.pagination?.page || 1,
    manufacturer: searchCriteria?.manufacturer?.join("|") || void 0,
    properties: searchCriteria?.properties?.join("|") || void 0,
    sort: !Array.isArray(searchCriteria?.sort) ? searchCriteria?.sort?.name : void 0
  };
  return params;
};
var convertSearchCriteria = ({
  searchCriteria,
  apiType,
  config: config2
}) => {
  let params = {
    limit: config2.defaultPaginationLimit
  };
  if (!searchCriteria)
    return params;
  const { filters, sort, pagination, configuration, term } = searchCriteria;
  if (pagination) {
    const { limit, page } = pagination;
    if (limit) {
      params.limit = limit;
    }
    if (page) {
      if (apiType && apiType === ApiType.store) {
        params.p = page;
      } else {
        params.page = page;
      }
    }
  }
  if (sort) {
    if (!apiType || apiType === ApiType.salesChannel) {
      if (Array.isArray(sort)) {
        const sorting = sort.map(({ desc, field }) => `${desc ? "-" : ""}${field}`);
        params.sort = sorting.join(",");
      } else {
        let prefix = sort.desc ? "-" : "";
        params.sort = `${prefix}${sort.field}`;
      }
    }
    if (apiType && apiType === ApiType.store) {
      if (Array.isArray(sort)) {
        warning({
          packageName: "shopware-6-client",
          methodName: "convertSearchCriteria",
          notes: "store-api does not accept sorting on multiple fields"
        });
      } else {
        let order = sort.desc ? "desc" : "asc";
        params.order = sort.name || `${sort.field}-${order}`;
      }
    }
  }
  if (filters && filters.length) {
    if (apiType && apiType === ApiType.store) {
      params = Object.assign({}, params, convertToStoreApiFilters(filters));
    } else {
      params.filter = filters;
    }
  }
  if (configuration && configuration.associations) {
    params.associations = Array.isArray(configuration.associations) && convertAssociations(configuration.associations) || configuration.associations;
  }
  if (configuration?.grouping) {
    params.grouping = configuration.grouping;
  }
  if (configuration?.includes) {
    params.includes = configuration.includes;
  }
  if (configuration?.ids) {
    params.ids = configuration.ids.join("|");
  }
  if (term) {
    params.term = term;
  }
  return params;
};

// packages/shopware-6-client/src/services/productService.ts
var getProductsIds = async function(options, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getProductEndpoint(), {
    includes: [{ product: ["id"] }]
  });
  return resp.data;
};
var getProducts = async function(searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductEndpoint()}`, convertSearchCriteria({ searchCriteria, config: contextInstance.config }));
  return resp.data;
};
var getCategoryProductsListing = async function(categoryId, searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, convertSearchCriteria({
    searchCriteria,
    apiType: ApiType.store,
    config: contextInstance.config
  }));
  return resp.data;
};
var getCategoryProducts = async function(categoryId, criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, criteria);
  return resp.data;
};
async function getProduct(productId, params = null, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getProductDetailsEndpoint(productId), {
    params
  });
  return resp.data;
}
async function addProductReview(productId, productReviewData, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(`${getProductDetailsEndpoint(productId)}/review`, productReviewData);
}

// packages/shopware-6-client/src/services/customerService.ts
async function register(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerRegisterEndpoint(), params);
  return resp.data;
}
async function login({ username, password } = {}, contextInstance = defaultInstance) {
  if (!username || !password) {
    throw new Error("Provide username and password for login");
  }
  const resp = await contextInstance.invoke.post(getCustomerLoginEndpoint(), {
    username,
    password
  });
  const contextToken = resp.data["sw-context-token"] || resp.data["contextToken"];
  return { contextToken };
}
async function logout(contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerLogoutEndpoint());
}
async function getCustomer(contextInstance = defaultInstance) {
  try {
    const resp = await contextInstance.invoke.get(`${getCustomerEndpoint()}`, {
      params: "associations[salutation][]"
    });
    return resp.data;
  } catch (e) {
    if (e.statusCode === 403)
      return null;
    throw new Error("Unexpected getCustomerResponse. " + e);
  }
}
async function getCustomerAddresses(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCustomerAddressEndpoint());
  return resp.data;
}
async function getCustomerOrders(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCustomerOrderEndpoint(), {
    params: {
      sort: "-createdAt"
    }
  });
  return resp.data.orders?.elements || [];
}
async function getCustomerOrderDetails(orderId, contextInstance = defaultInstance, additionalQueryParams) {
  if (!orderId) {
    return;
  }
  const resp = await contextInstance.invoke.get(getCustomerOrderEndpoint(), {
    params: additionalQueryParams ? `filter[id]=${orderId}&${additionalQueryParams}` : `sort=-transactions.createdAt&limit=1&filter[id]=${orderId}&associations[lineItems][]&associations[addresses][]&associations[transactions][associations][paymentMethod][]&associations[deliveries][associations][shippingMethod][]`
  });
  return resp.data.orders?.elements?.[0];
}
async function getCustomerAddress(addressId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCustomerAddressEndpoint(addressId));
  return resp.data.data;
}
async function createCustomerAddress(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCustomerAddAddressEndpoint(), params);
  return resp.data;
}
async function updateCustomerAddress(params, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.patch(getCustomerAddressEndpoint(params.id), params);
  return resp.data;
}
async function deleteCustomerAddress(addressId, contextInstance = defaultInstance) {
  await contextInstance.invoke.delete(getCustomerAddressEndpoint(addressId));
}
async function setDefaultCustomerBillingAddress(addressId, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.patch(getCustomerDefaultBillingAddressEndpoint(addressId));
  return response.data;
}
async function setDefaultCustomerShippingAddress(addressId, contextInstance = defaultInstance) {
  const response = await contextInstance.invoke.patch(getCustomerDefaultShippingAddressEndpoint(addressId));
  return response.data;
}
async function updateEmail(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerUpdateEmailEndpoint(), params);
}
async function updatePassword(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerUpdatePasswordEndpoint(), params);
}
async function resetPassword(params, contextInstance = defaultInstance) {
  if (params && !params.storefrontUrl) {
    params.storefrontUrl = contextInstance.config.endpoint;
  }
  await contextInstance.invoke.post(getCustomerResetPasswordEndpoint(), params);
}
async function confirmPasswordReset(params, contextInstance = defaultInstance) {
  if (!params)
    return;
  await contextInstance.invoke.post(getConfirmPasswordResetEndpoint(), {
    newPasswordConfirm: params.newPassword,
    ...params
  });
}
async function updateProfile(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getCustomerDetailsUpdateEndpoint(), params);
}

// packages/shopware-6-client/src/services/contextService.ts
async function updateContext(params, contextInstance) {
  const resp = await contextInstance.invoke.patch(getContextEndpoint(), params);
  const contextToken = extractContextToken(resp);
  return { contextToken };
}
async function getSessionContext(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextEndpoint());
  return data;
}
function setCurrentShippingAddress(shippingAddressId, contextInstance = defaultInstance) {
  return updateContext({ shippingAddressId }, contextInstance);
}
function setCurrentBillingAddress(billingAddressId, contextInstance = defaultInstance) {
  return updateContext({ billingAddressId }, contextInstance);
}
async function getAvailableCurrencies(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCurrencyEndpoint());
  return data;
}
async function setCurrentCurrency(newCurrencyID, contextInstance = defaultInstance) {
  let params = { currencyId: newCurrencyID };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableLanguages(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextLanguageEndpoint());
  return data;
}
async function setCurrentLanguage(newLanguageId, contextInstance = defaultInstance) {
  let params = { languageId: newLanguageId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableCountries(contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCountryEndpoint());
  return data;
}
async function getAvailableSalutations(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getContextSalutationEndpoint());
  return resp.data;
}
async function getAvailablePaymentMethods(contextInstance = defaultInstance, params = {}) {
  const resp = await contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
    params
  });
  return resp.data;
}
async function getPaymentMethodDetails(paymentId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
    params: {
      "filter[id]": paymentId
    }
  });
  return data?.elements?.[0];
}
async function setCurrentPaymentMethod(newPaymentMethodId, contextInstance = defaultInstance) {
  let params = { paymentMethodId: newPaymentMethodId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getAvailableShippingMethods(contextInstance = defaultInstance, params = {}) {
  const resp = await contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
    params
  });
  return resp.data;
}
async function getShippingMethodDetails(shippingId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
    params: {
      "filter[id]": shippingId
    }
  });
  return data?.elements?.[0];
}
async function setCurrentShippingMethod(newShippingMethodId, contextInstance = defaultInstance) {
  let params = { shippingMethodId: newShippingMethodId };
  const resp = await updateContext(params, contextInstance);
  return resp;
}
async function getUserCountry(countryId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextCountryEndpoint(), {
    params: {
      "filter[id]": countryId
    }
  });
  return data?.elements?.[0];
}
async function getUserSalutation(salutationId, contextInstance = defaultInstance) {
  const { data } = await contextInstance.invoke.get(getContextSalutationEndpoint(), {
    params: {
      "filter[id]": salutationId
    }
  });
  return data?.elements?.[0];
}

// packages/shopware-6-client/src/services/cartService.ts
async function clearCart(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCheckoutCartEndpoint());
  let contextToken = resp.data["sw-context-token"];
  return { contextToken };
}
async function getCart(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.get(getCheckoutCartEndpoint());
  return resp.data;
}
async function addProductToCart(productId, quantity, contextInstance = defaultInstance) {
  const qty = quantity || 1;
  const item = {
    quantity: qty,
    type: "product",
    referencedId: productId,
    id: productId
  };
  const resp = await contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
    items: [item]
  });
  return resp.data;
}
async function changeCartItemQuantity(itemId, newQuantity = 1, contextInstance = defaultInstance) {
  let params = {
    items: [
      {
        id: itemId,
        quantity: parseInt(newQuantity.toString(), 10)
      }
    ]
  };
  const resp = await contextInstance.invoke.patch(getCheckoutCartLineItemEndpoint(), params);
  return resp.data;
}
async function removeCartItem(itemId, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.delete(`${getCheckoutCartLineItemEndpoint()}?ids[]=${itemId}`);
  return resp.data;
}
async function addPromotionCode(promotionCode, contextInstance = defaultInstance) {
  const item = {
    type: "promotion",
    referencedId: promotionCode
  };
  const resp = await contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
    items: [item]
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/navigationService.ts
async function getStoreNavigation({
  requestActiveId,
  requestRootId,
  depth,
  buildTree,
  searchCriteria
}, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getStoreNavigationEndpoint(requestActiveId, requestRootId), {
    ...convertSearchCriteria({
      searchCriteria,
      apiType: ApiType.store,
      config: contextInstance.config
    }),
    ...{
      depth,
      buildTree
    }
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/pageService.ts
async function getPage(path, searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getPageResolverEndpoint(), {
    path,
    ...convertSearchCriteria({
      searchCriteria,
      config: contextInstance.config
    })
  });
  return resp.data;
}
async function getCmsPage(path, criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getPageResolverEndpoint(), {
    path,
    ...criteria
  });
  return resp.data;
}
async function getProductPage(path, searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getPageResolverEndpoint(), {
    path,
    ...convertSearchCriteria({
      searchCriteria,
      config: contextInstance.config
    })
  });
  return resp.data;
}
async function getSeoUrls(entityId, languageId, contextInstance = defaultInstance) {
  if (languageId) {
    contextInstance.defaults.headers["sw-language-id"] = languageId;
  }
  const resp = await contextInstance.invoke.post(getSeoUrlEndpoint(), {
    filter: [
      {
        type: "equals",
        field: "foreignKey",
        value: entityId
      }
    ],
    includes: {
      seo_url: ["seoPathInfo"]
    }
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/checkoutService.ts
async function createOrder(contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(getCheckoutOrderEndpoint());
  return resp.data;
}
async function handlePayment(orderId, finishUrl, errorUrl, contextInstance = defaultInstance) {
  if (!orderId) {
    throw new Error("handlePayment method requires orderId");
  }
  const resp = await contextInstance.invoke.get(handlePaymentEndpoint(), {
    params: { orderId, finishUrl, errorUrl }
  });
  return resp.data;
}

// packages/shopware-6-client/src/services/pluginService.ts
function invokePost({
  address,
  payload
}, contextInstance = defaultInstance) {
  return contextInstance.invoke.post(address, payload);
}
function invokeGet({ address }, contextInstance = defaultInstance) {
  return contextInstance.invoke.get(address);
}

// packages/shopware-6-client/src/services/searchService.ts
async function getSearchResults(term, searchCriteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getSearchEndpoint()}?search=${term}`, {
    ...convertShopwareSearchCriteria(searchCriteria)
  });
  return resp.data;
}
async function searchProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getSearchEndpoint()}?search=${criteria?.query || ""}`, criteria);
  return resp.data;
}
async function searchSuggestedProducts(criteria, contextInstance = defaultInstance) {
  const resp = await contextInstance.invoke.post(`${getSuggestSearchEndpoint()}?search=${criteria?.query || ""}`, criteria);
  return resp.data;
}

// packages/shopware-6-client/src/services/formsService.ts
async function sendContactForm(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getContactFormEndpoint(), params);
}
async function newsletterSubscribe(params, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getStoreNewsletterSubscribeEndpoint(), Object.assign({}, { option: "subscribe" }, params));
}
async function newsletterUnsubscribe({
  email
}, contextInstance = defaultInstance) {
  await contextInstance.invoke.post(getStoreNewsletterUnsubscribeEndpoint(), email);
}

// packages/shopware-6-client/src/index.ts
var config = defaultInstance.config;
var setup = defaultInstance.setup;
var update = defaultInstance.update;
var onConfigChange = defaultInstance.onConfigChange;
export {
  addProductReview,
  addProductToCart,
  addPromotionCode,
  changeCartItemQuantity,
  clearCart,
  config,
  confirmPasswordReset,
  createCustomerAddress,
  createInstance,
  createOrder,
  deleteCustomerAddress,
  getAvailableCountries,
  getAvailableCurrencies,
  getAvailableLanguages,
  getAvailablePaymentMethods,
  getAvailableSalutations,
  getAvailableShippingMethods,
  getCart,
  getCategories,
  getCategory,
  getCategoryDetailsEndpoint,
  getCategoryEndpoint,
  getCategoryProducts,
  getCategoryProductsListing,
  getCheckoutCartEndpoint,
  getCheckoutCartLineItemEndpoint,
  getCheckoutOrderEndpoint,
  getCmsPage,
  getConfirmPasswordResetEndpoint,
  getContactFormEndpoint,
  getContextCountryEndpoint,
  getContextCurrencyEndpoint,
  getContextEndpoint,
  getContextLanguageEndpoint,
  getContextPaymentMethodEndpoint,
  getContextSalutationEndpoint,
  getContextShippingMethodEndpoint,
  getCustomer,
  getCustomerAddAddressEndpoint,
  getCustomerAddress,
  getCustomerAddressEndpoint,
  getCustomerAddresses,
  getCustomerDefaultBillingAddressEndpoint,
  getCustomerDefaultShippingAddressEndpoint,
  getCustomerDetailsUpdateEndpoint,
  getCustomerEndpoint,
  getCustomerLoginEndpoint,
  getCustomerLogoutEndpoint,
  getCustomerOrderDetails,
  getCustomerOrderEndpoint,
  getCustomerOrders,
  getCustomerRegisterEndpoint,
  getCustomerResetPasswordEndpoint,
  getCustomerUpdateEmailEndpoint,
  getCustomerUpdatePasswordEndpoint,
  getNewsletterSubscribeEndpoint,
  getNewsletterUnsubscribeEndpoint,
  getPage,
  getPageResolverEndpoint,
  getPaymentMethodDetails,
  getProduct,
  getProductDetailsEndpoint,
  getProductEndpoint,
  getProductListingEndpoint,
  getProductPage,
  getProducts,
  getProductsIds,
  getSearchEndpoint,
  getSearchResults,
  getSeoUrlEndpoint,
  getSeoUrls,
  getSessionContext,
  getShippingMethodDetails,
  getStoreNavigation,
  getStoreNavigationEndpoint,
  getStoreNewsletterConfirmEndpoint,
  getStoreNewsletterSubscribeEndpoint,
  getStoreNewsletterUnsubscribeEndpoint,
  getSuggestSearchEndpoint,
  getUserCountry,
  getUserSalutation,
  handlePayment,
  handlePaymentEndpoint,
  invokeGet,
  invokePost,
  login,
  logout,
  newsletterSubscribe,
  newsletterUnsubscribe,
  onConfigChange,
  register,
  removeCartItem,
  resetPassword,
  searchProducts,
  searchSuggestedProducts,
  sendContactForm,
  setCurrentBillingAddress,
  setCurrentCurrency,
  setCurrentLanguage,
  setCurrentPaymentMethod,
  setCurrentShippingAddress,
  setCurrentShippingMethod,
  setDefaultCustomerBillingAddress,
  setDefaultCustomerShippingAddress,
  setup,
  update,
  updateCustomerAddress,
  updateEmail,
  updatePassword,
  updateProfile
};
