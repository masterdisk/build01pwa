import { AxiosInstance } from 'axios';
import { Cart } from '@shopware-pwa/commons/interfaces/models/checkout/cart/Cart';
import { Category } from '@shopware-pwa/commons/interfaces/models/content/category/Category';
import { CmsPage } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { ContextTokenResponse } from '@shopware-pwa/commons/interfaces/response/SessionContext';
import { Country } from '@shopware-pwa/commons/interfaces/models/system/country/Country';
import { Currency } from '@shopware-pwa/commons/interfaces/models/system/currency/Currency';
import { Customer } from '@shopware-pwa/commons/interfaces/models/checkout/customer/Customer';
import { CustomerAddress } from '@shopware-pwa/commons/interfaces/models/checkout/customer/CustomerAddress';
import { CustomerRegistrationParams } from '@shopware-pwa/commons/interfaces/request/CustomerRegistrationParams';
import { EntityResult } from '@shopware-pwa/commons/interfaces/response/EntityResult';
import { Language } from '@shopware-pwa/commons/interfaces/models/framework/language/Language';
import { Order } from '@shopware-pwa/commons/interfaces/models/checkout/order/Order';
import { PageResolverProductResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PageResolverResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PaymentMethod } from '@shopware-pwa/commons/interfaces/models/checkout/payment/PaymentMethod';
import { Product } from '@shopware-pwa/commons/interfaces/models/content/product/Product';
import { ProductListingResult } from '@shopware-pwa/commons/interfaces/response/ProductListingResult';
import { ProductResponse } from '@shopware-pwa/commons/interfaces/response/ProductResult';
import { Salutation } from '@shopware-pwa/commons/interfaces/models/system/salutation/Salutation';
import { SearchCriteria } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { SearchResult } from '@shopware-pwa/commons/interfaces/response/SearchResult';
import { SessionContext } from '@shopware-pwa/commons/interfaces/response/SessionContext';
import { ShippingMethod } from '@shopware-pwa/commons/interfaces/models/checkout/shipping/ShippingMethod';
import { ShopwareSearchParams } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { StoreNavigationElement } from '@shopware-pwa/commons/interfaces/models/content/navigation/Navigation';
import { StoreNavigationType } from '@shopware-pwa/commons/interfaces/models/content/navigation/Navigation';

/**
 * Add a review to specific product by its ID
 *
 * @throws ClientApiError
 * @beta
 */
export declare function addProductReview(productId: string, productReviewData: {
    title: string;
    content: string;
    points: number;
}, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * TODO: https://github.com/vuestorefront/shopware-pwa/issues/1449
 *
 * Adds specific quantity of the product to the cart by productId. It creates a new cart line item.
 *
 * Warning: This method does not change the state of the cart in any way if productId already exists in a cart. For changing the quantity use addQuantityToCartLineItem() or changeCartLineItemQuantity() methods.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function addProductToCart(productId: string, quantity?: number, contextInstance?: ShopwareApiInstance): Promise<Cart>;

/**
 * Adds new promotion code to the cart by its code.
 *
 * Promotion code is being added as separate cart item line.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function addPromotionCode(promotionCode: string, contextInstance?: ShopwareApiInstance): Promise<Cart>;

/**
 * Changes the current quantity in specific cart line item to given quantity.
 *
 * Example: If current quantity is 3 and you pass 2 as quantity parameter, you will get a new cart's state with quantity 2.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function changeCartItemQuantity(itemId: string, newQuantity?: number, contextInstance?: ShopwareApiInstance): Promise<Cart>;

/**
 * When no sw-context-token given then this method return an empty cart with the new sw-context-token.
 *
 * When sw-context-token given then this method simply returns the current state of the cart.
 *
 * As the purpose of this method is not clear we recommend to use `getCart` method because its behaviour seems to be the same.
 *
 * @throws ClientApiError
 *
 * @beta
 */
export declare function clearCart(contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * @beta
 */
export declare interface ClientSettings {
    /**
     * shopware URL
     */
    endpoint?: string;
    /**
     * id specific for each sales channel
     */
    accessToken?: string;
    /**
     * session id (dynamic)
     */
    contextToken?: string;
    /**
     * default amount of products shown on listings
     */
    defaultPaginationLimit?: number;
    /**
     * timeout limit (ms)
     */
    timeout?: number;
    /**
     * id of current language
     */
    languageId?: string;
}

/**
 * @beta
 */
export declare const config: ClientSettings;

/**
 * @beta
 */
export declare interface ConfigChangedArgs {
    config: ClientSettings;
}

/**
 * Confirm a customer's password reset. Set new password for account.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function confirmPasswordReset(params: {
    newPassword: string;
    hash: string;
    [key: string]: unknown;
}, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * @beta
 */
export declare interface ContactFormData {
    salutationId: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    subject: string;
    comment: string;
    navigationId?: string;
}

/**
 * Create an address and respond the new address's id
 *
 * @throws ClientApiError
 * @beta
 */
export declare function createCustomerAddress(params: Partial<CustomerAddress>, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;

/**
 *
 * @beta
 */
export declare function createInstance(initialConfig?: ClientSettings): ShopwareApiInstance;

/**
 * Creates an order for logged in users
 * @beta
 */
export declare function createOrder(contextInstance?: ShopwareApiInstance): Promise<Order>;

/**
 * @beta
 */
export declare interface CustomerRegisterResponse {
    data: string;
}

/**
 * @beta
 */
export declare interface CustomerResetPasswordParam {
    email: string;
    storefrontUrl?: string;
}

/**
 * @beta
 */
export declare interface CustomerUpdateEmailParam {
    email: string;
    emailConfirmation: string;
    password: string;
}

/**
 * @beta
 */
export declare interface CustomerUpdatePasswordParam {
    password: string;
    newPassword: string;
    newPasswordConfirm: string;
}

/**
 * @beta
 */
export declare interface CustomerUpdateProfileParam {
    firstName: string;
    lastName: string;
    salutationId: string;
    title: string | null;
}

/**
 * Delete's the customer's address by id
 *
 * @throws ClientApiError
 * @beta
 */
export declare function deleteCustomerAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Get all available countries
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailableCountries(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"country", Country[]>>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailableCurrencies(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"currency", Currency[]>>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailableLanguages(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"language", Language[]>>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailablePaymentMethods(contextInstance?: ShopwareApiInstance, params?: {
    onlyAvailable?: boolean;
}): Promise<EntityResult<"payment_method", PaymentMethod[]>>;

/**
 * Get all available salutations
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailableSalutations(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"salutation", Salutation[]>>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getAvailableShippingMethods(contextInstance?: ShopwareApiInstance, params?: {
    onlyAvailable?: boolean;
}): Promise<EntityResult<"shipping_method", ShippingMethod[]>>;

/**
 * Gets the current cart for the sw-context-token.
 * @throws ClientApiError
 * @beta
 */
export declare function getCart(contextInstance?: ShopwareApiInstance): Promise<Cart>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getCategories(searchCriteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<EntityResult<"category", Category[]>>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getCategory(categoryId: string, contextInstance?: ShopwareApiInstance): Promise<Category>;

/**
 * @beta
 */
export declare const getCategoryDetailsEndpoint: (categoryId: string) => string;

/**
 * @beta
 */
export declare const getCategoryEndpoint: () => string;

/**
 * Get default amount of products and listing configuration for given category
 *
 * @throws ClientApiError
 * @beta
 */
export declare const getCategoryProducts: (categoryId: string, criteria?: ShopwareSearchParams | undefined, contextInstance?: ShopwareApiInstance) => Promise<ProductListingResult>;

/**
 * Get default amount of products and listing configuration for given category
 * @deprecated use getCategoryProducts instead
 * @throws ClientApiError
 * @beta
 */
export declare const getCategoryProductsListing: (categoryId: string, searchCriteria?: SearchCriteria | undefined, contextInstance?: ShopwareApiInstance) => Promise<ProductListingResult>;

/**
 * @beta
 */
export declare const getCheckoutCartEndpoint: () => string;

/**
 * @beta
 */
export declare const getCheckoutCartLineItemEndpoint: () => string;

/**
 * @beta
 */
export declare const getCheckoutOrderEndpoint: () => string;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getCmsPage(path: string, criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<PageResolverResult<CmsPage>>;

/**
 * @beta
 */
export declare const getConfirmPasswordResetEndpoint: () => string;

/**
 * @beta
 */
export declare const getContactFormEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextCountryEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextCurrencyEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextLanguageEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextPaymentMethodEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextSalutationEndpoint: () => string;

/**
 * @beta
 */
export declare const getContextShippingMethodEndpoint: () => string;

/**
 * Get customer's object
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getCustomer(contextInstance?: ShopwareApiInstance): Promise<Customer | null>;

/**
 * @beta
 */
export declare const getCustomerAddAddressEndpoint: () => string;

/**
 * Get the customer's address by id
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getCustomerAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;

/**
 * @beta
 */
export declare const getCustomerAddressEndpoint: (addressId?: string | undefined) => string;

/**
 * Get all customer's addresses
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getCustomerAddresses(contextInstance?: ShopwareApiInstance): Promise<EntityResult<"customer_address", CustomerAddress[]>>;

/**
 * @beta
 */
export declare const getCustomerDefaultBillingAddressEndpoint: (addressId: string) => string;

/**
 * @beta
 */
export declare const getCustomerDefaultShippingAddressEndpoint: (addressId: string) => string;

/**
 * @beta
 */
export declare const getCustomerDetailsUpdateEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerLoginEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerLogoutEndpoint: () => string;

/**
 * Get order details
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getCustomerOrderDetails(orderId: string, contextInstance?: ShopwareApiInstance, additionalQueryParams?: string): Promise<Order | undefined>;

/**
 * @beta
 */
export declare const getCustomerOrderEndpoint: () => string;

/**
 * Get all customer's orders
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getCustomerOrders(contextInstance?: ShopwareApiInstance): Promise<Order[]>;

/**
 * @beta
 */
export declare const getCustomerRegisterEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerResetPasswordEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerUpdateEmailEndpoint: () => string;

/**
 * @beta
 */
export declare const getCustomerUpdatePasswordEndpoint: () => string;

/**
 * @alpha
 */
export declare interface GetNavigationParams {
    depth: number;
    rootNode?: string;
}

/**
 * @beta
 */
export declare const getNewsletterSubscribeEndpoint: () => string;

/**
 * @beta
 */
export declare const getNewsletterUnsubscribeEndpoint: () => string;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getPage(path: string, searchCriteria?: SearchCriteria, contextInstance?: ShopwareApiInstance): Promise<PageResolverResult<CmsPage>>;

/**
 * @beta
 */
export declare const getPageResolverEndpoint: () => string;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getPaymentMethodDetails(paymentId: string, contextInstance?: ShopwareApiInstance): Promise<PaymentMethod>;

/**
 * Get the product with passed productId
 *
 * @throws ClientApiError
 * @beta
 */
export declare function getProduct(productId: string, params?: any, contextInstance?: ShopwareApiInstance): Promise<ProductResponse>;

/**
 * @beta
 */
export declare const getProductDetailsEndpoint: (productId: string) => string;

/**
 * @beta
 */
export declare const getProductEndpoint: () => string;

/**
 * @beta
 */
export declare const getProductListingEndpoint: (categoryId: string) => string;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getProductPage(path: string, searchCriteria?: SearchCriteria, contextInstance?: ShopwareApiInstance): Promise<PageResolverProductResult>;

/**
 * Get default amount of products
 *
 * @throws ClientApiError
 * @beta
 */
export declare const getProducts: (searchCriteria?: SearchCriteria | undefined, contextInstance?: ShopwareApiInstance) => Promise<EntityResult<"product", Product[]>>;

/**
 * Get default amount of products' ids
 *
 * @deprecated method is no longer supported
 *
 * @throws ClientApiError
 * @alpha
 */
export declare const getProductsIds: (options?: any, contextInstance?: ShopwareApiInstance) => Promise<SearchResult<string[]>>;

/**
 * @beta
 */
export declare const getSearchEndpoint: () => string;

/**
 * @throws ClientApiError
 * @deprecated use searchProducts instead
 * @beta
 */
export declare function getSearchResults(term: string, searchCriteria?: SearchCriteria, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;

/**
 * @beta
 */
export declare const getSeoUrlEndpoint: () => string;

/**
 * Returns an array of SEO URLs for given entity
 * Can be used for other languages as well by providing the languageId
 *
 * @beta
 */
export declare function getSeoUrls(entityId: string, languageId?: string, contextInstance?: ShopwareApiInstance): Promise<{
    apiAlias: string;
    seoPathInfo: string;
}[]>;

/**
 * Loads session context, containing all session-related data.
 *
 * @throws ClientApiErrosr
 * @beta
 */
export declare function getSessionContext(contextInstance?: ShopwareApiInstance): Promise<SessionContext>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getShippingMethodDetails(shippingId: string, contextInstance?: ShopwareApiInstance): Promise<ShippingMethod>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getStoreNavigation({ requestActiveId, requestRootId, depth, buildTree, searchCriteria, }: GetStoreNavigationParams, contextInstance?: ShopwareApiInstance): Promise<StoreNavigationElement[]>;

/**
 * @beta
 */
export declare const getStoreNavigationEndpoint: (requestActiveId: string, requestRootId: string) => string;

/**
 * More about the navigation parameters: https://docs.shopware.com/en/shopware-platform-dev-en/store-api-guide/navigation?category=shopware-platform-dev-en/store-api-guide
 * @beta
 */
export declare interface GetStoreNavigationParams {
    requestActiveId: StoreNavigationType;
    requestRootId: StoreNavigationType;
    depth?: number;
    buildTree?: boolean;
    searchCriteria?: SearchCriteria;
}

/**
 * @beta
 */
export declare const getStoreNewsletterConfirmEndpoint: () => string;

/**
 * @beta
 */
export declare const getStoreNewsletterSubscribeEndpoint: () => string;

/**
 * @beta
 */
export declare const getStoreNewsletterUnsubscribeEndpoint: () => string;

/**
 * @beta
 */
export declare const getSuggestSearchEndpoint: () => string;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getUserCountry(countryId: string, contextInstance?: ShopwareApiInstance): Promise<Country>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function getUserSalutation(salutationId: string, contextInstance?: ShopwareApiInstance): Promise<Salutation>;

/**
 * @param orderId - Id of an order
 * @param finishUrl - URL where the customer is redirected to after payment is done
 * @param errorUrl - URL where the customer is redirected to after payment fails
 * @beta
 */
export declare function handlePayment(orderId: string, finishUrl?: string, errorUrl?: string, contextInstance?: ShopwareApiInstance): Promise<{
    redirectUrl: string | null;
    apiAlias: string;
}>;

/**
 * @beta
 */
export declare const handlePaymentEndpoint: () => string;

/**
 * Invoke custom GET request to shopware API. Mostly for plugins usage.
 * You can skip domain and pass only endpoint ex. `/api/my/endpoint`
 * @throws ClientApiError
 * @beta
 */
export declare function invokeGet({ address }: {
    address: string;
}, contextInstance?: ShopwareApiInstance): Promise<any>;

/**
 * Invoke custom POST request to shopware API. Mostly for plugins usage.
 * You can skip domain and pass only endpoint ex. `/api/my/endpoint`
 * @throws ClientApiError
 * @beta
 */
export declare function invokePost({ address, payload, }: {
    address: string;
    payload?: any;
}, contextInstance?: ShopwareApiInstance): Promise<any>;

/**
 * Login user to shopware instance.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function login({ username, password }?: {
    username?: string;
    password?: string;
}, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * End up the user session.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function logout(contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * @beta
 */
export declare function newsletterSubscribe(params: NewsletterSubscribeData, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * @beta
 */
export declare interface NewsletterSubscribeData {
    email: string;
    salutationId?: string;
    firstName?: string;
    lastName?: string;
    street?: string;
    city?: string;
    zipCode?: string;
    option: "direct" | "subscribe" | "confirmSubscribe" | "unsubscribe";
    storefrontUrl: string;
}

/**
 * @beta
 */
export declare function newsletterUnsubscribe({ email, }: {
    email: string;
}, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * @beta
 */
export declare const onConfigChange: (fn: (context: ConfigChangedArgs) => void) => void;

/**
 * Register a customer
 *
 * @throws ClientApiError
 * @beta
 */
export declare function register(params: CustomerRegistrationParams, contextInstance?: ShopwareApiInstance): Promise<CustomerRegisterResponse>;

/**
 * Deletes the cart line item by id.
 *
 * This method may be used for deleting "product" type item lines as well as "promotion" type item lines.
 *
 * @throws ClientApiError
 * @beta
 */
export declare function removeCartItem(itemId: string, contextInstance?: ShopwareApiInstance): Promise<Cart>;

/**
 * Reset a customer's password
 *
 * @throws ClientApiError
 * @beta
 */
export declare function resetPassword(params: CustomerResetPasswordParam, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Search for products based on criteria.
 * From: Shopware 6.4
 *
 * @beta
 */
export declare function searchProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;

/**
 * Search for suggested products based on criteria.
 * From: Shopware 6.4
 *
 * @beta
 */
export declare function searchSuggestedProducts(criteria?: ShopwareSearchParams, contextInstance?: ShopwareApiInstance): Promise<ProductListingResult>;

/**
 * @beta
 */
export declare function sendContactForm(params: ContactFormData, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Set the current session's billing address to correspoding to id
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentBillingAddress(billingAddressId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentCurrency(newCurrencyID: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentLanguage(newLanguageId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentPaymentMethod(newPaymentMethodId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * Set the current session's shipping address to correspoding to id
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentShippingAddress(shippingAddressId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * @throws ClientApiError
 * @beta
 */
export declare function setCurrentShippingMethod(newShippingMethodId: string, contextInstance?: ShopwareApiInstance): Promise<ContextTokenResponse>;

/**
 * Set address as default
 *
 * @throws ClientApiError
 * @beta
 */
export declare function setDefaultCustomerBillingAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<string>;

/**
 * Set address as default
 *
 * @throws ClientApiError
 * @beta
 */
export declare function setDefaultCustomerShippingAddress(addressId: string, contextInstance?: ShopwareApiInstance): Promise<string>;

/**
 * Setup configuration. Merge default values with provided in param.
 * This method will override existing config. For config update invoke **update** method.
 * @beta
 */
export declare const setup: (config?: ClientSettings) => void;

/**
 * @beta
 */
export declare interface ShopwareApiInstance {
    onConfigChange: (fn: (context: ConfigChangedArgs) => void) => void;
    config: ClientSettings;
    setup: (config?: ClientSettings) => void;
    update: (config?: ClientSettings) => void;
    invoke: {
        post: AxiosInstance["post"];
        get: AxiosInstance["get"];
        put: AxiosInstance["put"];
        patch: AxiosInstance["patch"];
        delete: AxiosInstance["delete"];
    };
    defaults: AxiosInstance["defaults"];
}

/**
 * Update current configuration. This will change only provided values.
 * @beta
 */
export declare const update: (config?: ClientSettings) => void;

/**
 * Update an address for specific ID
 *
 * @throws ClientApiError
 * @beta
 */
export declare function updateCustomerAddress(params: Partial<CustomerAddress>, contextInstance?: ShopwareApiInstance): Promise<CustomerAddress>;

/**
 * Update a customer's email
 *
 * @throws ClientApiError
 * @beta
 */
export declare function updateEmail(params: CustomerUpdateEmailParam, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Update a customer's password
 *
 * @throws ClientApiError
 * @beta
 */
export declare function updatePassword(params: CustomerUpdatePasswordParam, contextInstance?: ShopwareApiInstance): Promise<void>;

/**
 * Update a customer's profile data
 *
 * @throws ClientApiError
 * @beta
 */
export declare function updateProfile(params: CustomerUpdateProfileParam, contextInstance?: ShopwareApiInstance): Promise<void>;

export { }
