var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// packages/shopware-6-client/src/index.ts
__export(exports, {
  addProductReview: () => addProductReview,
  addProductToCart: () => addProductToCart,
  addPromotionCode: () => addPromotionCode,
  changeCartItemQuantity: () => changeCartItemQuantity,
  clearCart: () => clearCart,
  config: () => config,
  confirmPasswordReset: () => confirmPasswordReset,
  createCustomerAddress: () => createCustomerAddress,
  createInstance: () => createInstance,
  createOrder: () => createOrder,
  deleteCustomerAddress: () => deleteCustomerAddress,
  getAvailableCountries: () => getAvailableCountries,
  getAvailableCurrencies: () => getAvailableCurrencies,
  getAvailableLanguages: () => getAvailableLanguages,
  getAvailablePaymentMethods: () => getAvailablePaymentMethods,
  getAvailableSalutations: () => getAvailableSalutations,
  getAvailableShippingMethods: () => getAvailableShippingMethods,
  getCart: () => getCart,
  getCategories: () => getCategories,
  getCategory: () => getCategory,
  getCategoryDetailsEndpoint: () => getCategoryDetailsEndpoint,
  getCategoryEndpoint: () => getCategoryEndpoint,
  getCategoryProducts: () => getCategoryProducts,
  getCategoryProductsListing: () => getCategoryProductsListing,
  getCheckoutCartEndpoint: () => getCheckoutCartEndpoint,
  getCheckoutCartLineItemEndpoint: () => getCheckoutCartLineItemEndpoint,
  getCheckoutOrderEndpoint: () => getCheckoutOrderEndpoint,
  getCmsPage: () => getCmsPage,
  getConfirmPasswordResetEndpoint: () => getConfirmPasswordResetEndpoint,
  getContactFormEndpoint: () => getContactFormEndpoint,
  getContextCountryEndpoint: () => getContextCountryEndpoint,
  getContextCurrencyEndpoint: () => getContextCurrencyEndpoint,
  getContextEndpoint: () => getContextEndpoint,
  getContextLanguageEndpoint: () => getContextLanguageEndpoint,
  getContextPaymentMethodEndpoint: () => getContextPaymentMethodEndpoint,
  getContextSalutationEndpoint: () => getContextSalutationEndpoint,
  getContextShippingMethodEndpoint: () => getContextShippingMethodEndpoint,
  getCustomer: () => getCustomer,
  getCustomerAddAddressEndpoint: () => getCustomerAddAddressEndpoint,
  getCustomerAddress: () => getCustomerAddress,
  getCustomerAddressEndpoint: () => getCustomerAddressEndpoint,
  getCustomerAddresses: () => getCustomerAddresses,
  getCustomerDefaultBillingAddressEndpoint: () => getCustomerDefaultBillingAddressEndpoint,
  getCustomerDefaultShippingAddressEndpoint: () => getCustomerDefaultShippingAddressEndpoint,
  getCustomerDetailsUpdateEndpoint: () => getCustomerDetailsUpdateEndpoint,
  getCustomerEndpoint: () => getCustomerEndpoint,
  getCustomerLoginEndpoint: () => getCustomerLoginEndpoint,
  getCustomerLogoutEndpoint: () => getCustomerLogoutEndpoint,
  getCustomerOrderDetails: () => getCustomerOrderDetails,
  getCustomerOrderEndpoint: () => getCustomerOrderEndpoint,
  getCustomerOrders: () => getCustomerOrders,
  getCustomerRegisterEndpoint: () => getCustomerRegisterEndpoint,
  getCustomerResetPasswordEndpoint: () => getCustomerResetPasswordEndpoint,
  getCustomerUpdateEmailEndpoint: () => getCustomerUpdateEmailEndpoint,
  getCustomerUpdatePasswordEndpoint: () => getCustomerUpdatePasswordEndpoint,
  getNewsletterSubscribeEndpoint: () => getNewsletterSubscribeEndpoint,
  getNewsletterUnsubscribeEndpoint: () => getNewsletterUnsubscribeEndpoint,
  getPage: () => getPage,
  getPageResolverEndpoint: () => getPageResolverEndpoint,
  getPaymentMethodDetails: () => getPaymentMethodDetails,
  getProduct: () => getProduct,
  getProductDetailsEndpoint: () => getProductDetailsEndpoint,
  getProductEndpoint: () => getProductEndpoint,
  getProductListingEndpoint: () => getProductListingEndpoint,
  getProductPage: () => getProductPage,
  getProducts: () => getProducts,
  getProductsIds: () => getProductsIds,
  getSearchEndpoint: () => getSearchEndpoint,
  getSearchResults: () => getSearchResults,
  getSeoUrlEndpoint: () => getSeoUrlEndpoint,
  getSeoUrls: () => getSeoUrls,
  getSessionContext: () => getSessionContext,
  getShippingMethodDetails: () => getShippingMethodDetails,
  getStoreNavigation: () => getStoreNavigation,
  getStoreNavigationEndpoint: () => getStoreNavigationEndpoint,
  getStoreNewsletterConfirmEndpoint: () => getStoreNewsletterConfirmEndpoint,
  getStoreNewsletterSubscribeEndpoint: () => getStoreNewsletterSubscribeEndpoint,
  getStoreNewsletterUnsubscribeEndpoint: () => getStoreNewsletterUnsubscribeEndpoint,
  getSuggestSearchEndpoint: () => getSuggestSearchEndpoint,
  getUserCountry: () => getUserCountry,
  getUserSalutation: () => getUserSalutation,
  handlePayment: () => handlePayment,
  handlePaymentEndpoint: () => handlePaymentEndpoint,
  invokeGet: () => invokeGet,
  invokePost: () => invokePost,
  login: () => login,
  logout: () => logout,
  newsletterSubscribe: () => newsletterSubscribe,
  newsletterUnsubscribe: () => newsletterUnsubscribe,
  onConfigChange: () => onConfigChange,
  register: () => register,
  removeCartItem: () => removeCartItem,
  resetPassword: () => resetPassword,
  searchProducts: () => searchProducts,
  searchSuggestedProducts: () => searchSuggestedProducts,
  sendContactForm: () => sendContactForm,
  setCurrentBillingAddress: () => setCurrentBillingAddress,
  setCurrentCurrency: () => setCurrentCurrency,
  setCurrentLanguage: () => setCurrentLanguage,
  setCurrentPaymentMethod: () => setCurrentPaymentMethod,
  setCurrentShippingAddress: () => setCurrentShippingAddress,
  setCurrentShippingMethod: () => setCurrentShippingMethod,
  setDefaultCustomerBillingAddress: () => setDefaultCustomerBillingAddress,
  setDefaultCustomerShippingAddress: () => setDefaultCustomerShippingAddress,
  setup: () => setup,
  update: () => update,
  updateCustomerAddress: () => updateCustomerAddress,
  updateEmail: () => updateEmail,
  updatePassword: () => updatePassword,
  updateProfile: () => updateProfile
});

// packages/shopware-6-client/src/apiService.ts
var import_axios2 = __toModule(require("axios"));

// packages/shopware-6-client/src/interceptors/errorInterceptor.ts
var API_ERROR_CODES = [400, 401, 403, 404, 409, 410, 412, 424, 500];
var extractApiErrorStatusCode = (error) => {
  return error.response && error.response.status || guessTheStatusCodeFromTheMessage(error.message);
};
var guessTheStatusCodeFromTheMessage = (message) => {
  if (typeof message === "string" && message.startsWith("timeout of")) {
    return 408;
  }
  if (typeof message === "string" && message.startsWith("Network Error")) {
    return 0;
  }
  return 500;
};
var extractApiErrorMessage = (error) => {
  var _a, _b, _c;
  const statusCode = extractApiErrorStatusCode(error);
  if (statusCode !== 400) {
    const apiError = statusCode === 500 ? "Internal server error" : (_b = (_a = error.response.data) == null ? void 0 : _a.errors) == null ? void 0 : _b[0].detail;
    return apiError;
  }
  return (_c = error.response.data) == null ? void 0 : _c.errors;
};
var extractNotApiErrorMessage = (error) => error.message;
function errorInterceptor(error) {
  return __async(this, null, function* () {
    const statusCode = extractApiErrorStatusCode(error);
    const clientApiError = {
      message: API_ERROR_CODES.includes(statusCode) ? extractApiErrorMessage(error) : extractNotApiErrorMessage(error),
      statusCode
    };
    return Promise.reject(clientApiError);
  });
}

// packages/shopware-6-client/src/helpers/context.ts
function extractContextToken(response) {
  return response.data["sw-context-token"] || response.data["contextToken"] || response.headers["sw-context-token"];
}

// packages/shopware-6-client/src/interceptors/responseInterceptor.ts
function createResponseInterceptor(update2) {
  return function(response) {
    const contextToken = extractContextToken(response);
    contextToken && update2({ contextToken }, response.config);
    return response;
  };
}

// packages/commons/src/warning.ts
function warning({
  packageName,
  methodName,
  notes
}) {
  console.warn(`[WARNING][@shopware-pwa/${packageName}][${methodName}]: ${notes}`);
}

// compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var compatibility_default = {
  shopwareApiVersion,
  instances
};

// packages/commons/src/defaultConfig.ts
var import_merge = __toModule(require("lodash/merge"));
var import_axios = __toModule(require("axios"));
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/shopware-6-client/src/settings.ts
var defaultConfig = {
  endpoint: defaultPwaConfigFile.shopwareEndpoint,
  accessToken: defaultPwaConfigFile.shopwareAccessToken,
  contextToken: "",
  languageId: "",
  defaultPaginationLimit: 10,
  timeout: 1e4
};

// packages/shopware-6-client/src/helpers/queryParamsBuilder.ts
var import_query_string = __toModule(require("query-string"));
var ARRAY_FORMAT = "separator";
var ARRAY_FORMAT_SEPARATOR = "|";
var SKIP_NULL = true;
var SORT = false;
var getQueryString = (params) => typeof params === "string" ? params : import_query_string.default.stringify(params, {
  arrayFormat: ARRAY_FORMAT,
  arrayFormatSeparator: ARRAY_FORMAT_SEPARATOR,
  skipNull: SKIP_NULL,
  sort: SORT
});

// packages/shopware-6-client/src/apiService.ts
function _createInstance(initialConfig = {}) {
  const callbackMethods = [];
  let clientConfig = {};
  const apiService = import_axios2.default.create();
  function reloadConfiguration() {
    apiService.defaults.baseURL = clientConfig.endpoint;
    if (clientConfig.timeout) {
      apiService.defaults.timeout = typeof clientConfig.timeout === "number" && clientConfig.timeout || typeof clientConfig.timeout === "string" && parseInt(clientConfig.timeout) || 0;
    }
    apiService.defaults.headers.common["sw-include-seo-urls"] = true;
    apiService.defaults.headers.common["sw-access-key"] = clientConfig.accessToken;
    apiService.defaults.paramsSerializer = getQueryString;
    if (clientConfig.contextToken) {
      apiService.defaults.headers.common["sw-context-token"] = clientConfig.contextToken;
    } else {
      delete apiService.defaults.headers.common["sw-context-token"];
    }
    if (clientConfig.languageId) {
      apiService.defaults.headers.common["sw-language-id"] = clientConfig.languageId;
    } else {
      delete apiService.defaults.headers.common["sw-language-id"];
    }
  }
  function onConfigChange2(fn) {
    callbackMethods.push(fn);
  }
  const setup2 = function(config2 = {}) {
    clientConfig = Object.assign(clientConfig, defaultConfig, config2);
    reloadConfiguration();
  };
  setup2(initialConfig);
  const update2 = function(config2, responseConfig) {
    clientConfig = Object.assign(clientConfig, config2);
    if (!callbackMethods.length && responseConfig) {
      console.warn(`[shopware-6-api] After calling API method ${responseConfig.url} there is no "onConfigChange" listener. See https://shopware-pwa-docs.vuestorefront.io/landing/fundamentals/security.html#context-awareness`);
    }
    callbackMethods.forEach((fn) => fn({ config: clientConfig }));
    reloadConfiguration();
  };
  const invoke = {
    post: apiService.post,
    put: apiService.put,
    get: apiService.get,
    patch: apiService.patch,
    delete: apiService.delete
  };
  apiService.interceptors.response.use(createResponseInterceptor(update2), errorInterceptor);
  return {
    onConfigChange: onConfigChange2,
    config: clientConfig,
    setup: setup2,
    update: update2,
    invoke,
    defaults: apiService.defaults
  };
}
function createInstance(initialConfig = {}) {
  const { onConfigChange: onConfigChange2, config: config2, setup: setup2, update: update2, invoke, defaults } = _createInstance(initialConfig);
  return {
    onConfigChange: onConfigChange2,
    config: config2,
    setup: setup2,
    update: (config3 = {}) => {
      update2(config3);
    },
    invoke,
    defaults
  };
}
var defaultInstance = createInstance();

// packages/shopware-6-client/src/endpoints.ts
var getCategoryEndpoint = () => `/store-api/category`;
var getCategoryDetailsEndpoint = (categoryId) => `/store-api/category/${categoryId}`;
var getProductListingEndpoint = (categoryId) => `/store-api/product-listing/${categoryId}`;
var getProductEndpoint = () => `/store-api/product`;
var getProductDetailsEndpoint = (productId) => `/store-api/product/${productId}`;
var getSuggestSearchEndpoint = () => `/store-api/search-suggest`;
var getSearchEndpoint = () => `/store-api/search`;
var getCustomerAddAddressEndpoint = () => `/store-api/account/address`;
var getCustomerAddressEndpoint = (addressId) => addressId ? `/store-api/account/address/${addressId}` : "/store-api/account/list-address";
var getCustomerDefaultAddressEndpoint = (type, addressId) => `/store-api/account/address/default-${type}/${addressId}`;
var getCustomerDefaultBillingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("billing", addressId);
var getCustomerDefaultShippingAddressEndpoint = (addressId) => getCustomerDefaultAddressEndpoint("shipping", addressId);
var getCustomerEndpoint = () => `/store-api/account/customer`;
var getCustomerRegisterEndpoint = () => `/store-api/account/register`;
var getCustomerDetailsUpdateEndpoint = () => `/store-api/account/change-profile`;
var getCustomerLoginEndpoint = () => `/store-api/account/login`;
var getCustomerLogoutEndpoint = () => `/store-api/account/logout`;
var getCustomerOrderEndpoint = () => `/store-api/order`;
var getCustomerUpdateEmailEndpoint = () => `/store-api/account/change-email`;
var getCustomerUpdatePasswordEndpoint = () => `/store-api/account/change-password`;
var getCustomerResetPasswordEndpoint = () => `/store-api/account/recovery-password`;
var getConfirmPasswordResetEndpoint = () => `/store-api/account/recovery-password-confirm`;
var getCheckoutCartEndpoint = () => `/store-api/checkout/cart`;
var getCheckoutCartLineItemEndpoint = () => `/store-api/checkout/cart/line-item`;
var getCheckoutOrderEndpoint = () => `/store-api/checkout/order`;
var getContextEndpoint = () => `/store-api/context`;
var getContextCurrencyEndpoint = () => `/store-api/currency`;
var getContextLanguageEndpoint = () => `/store-api/language`;
var getContextCountryEndpoint = () => `/store-api/country`;
var getContextPaymentMethodEndpoint = () => `/store-api/payment-method`;
var getContextShippingMethodEndpoint = () => `/store-api/shipping-method`;
var getContextSalutationEndpoint = () => `/store-api/salutation`;
var getNewsletterSubscribeEndpoint = () => `/newsletter/subscribe`;
var getNewsletterUnsubscribeEndpoint = () => `/newsletter/unsubscribe`;
var getPageResolverEndpoint = () => `/store-api/pwa/page`;
var getSeoUrlEndpoint = () => "/store-api/seo-url";
var getStoreNavigationEndpoint = (requestActiveId, requestRootId) => `/store-api/navigation/${requestActiveId}/${requestRootId}`;
var getContactFormEndpoint = () => `/store-api/contact-form`;
var handlePaymentEndpoint = () => `/store-api/handle-payment`;
var getStoreNewsletterSubscribeEndpoint = () => `/store-api/newsletter/subscribe`;
var getStoreNewsletterConfirmEndpoint = () => `/store-api/newsletter/confirm`;
var getStoreNewsletterUnsubscribeEndpoint = () => `/store-api/newsletter/unsubscribe`;

// packages/shopware-6-client/src/services/categoryService.ts
function getCategories(_0) {
  return __async(this, arguments, function* (searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCategoryEndpoint(), searchCriteria);
    return resp.data;
  });
}
function getCategory(_0) {
  return __async(this, arguments, function* (categoryId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCategoryDetailsEndpoint(categoryId));
    return resp.data;
  });
}

// packages/shopware-6-client/src/helpers/convertAssociations.ts
function convertAssociations(associations = []) {
  if (!Array.isArray(associations) && typeof associations === "object") {
    return associations;
  }
  if (!Array.isArray(associations) || !associations.length)
    return;
  let shopwareAssociations = {};
  associations.forEach((association) => {
    shopwareAssociations[association.name] = association.associations ? {
      associations: convertAssociations(association.associations)
    } : {};
  });
  return shopwareAssociations;
}

// packages/commons/interfaces/search/SearchFilter.ts
var SearchFilterType;
(function(SearchFilterType2) {
  SearchFilterType2["EQUALS"] = "equals";
  SearchFilterType2["CONTAINS"] = "contains";
  SearchFilterType2["EQUALS_ANY"] = "equalsAny";
  SearchFilterType2["NOT"] = "not";
  SearchFilterType2["MULTI"] = "multi";
  SearchFilterType2["RANGE"] = "range";
  SearchFilterType2["MAX"] = "max";
})(SearchFilterType || (SearchFilterType = {}));

// packages/shopware-6-client/src/helpers/convertToStoreApiFilters.ts
var concatIds = (ids) => ids.join("|");
var isFilterForProperty = (property, filter) => filter.hasOwnProperty("field") && filter.field === property;
var isFilterType = (type, filter) => filter.hasOwnProperty("type") && filter.type === type;
function convertToStoreApiFilters(filters) {
  let params = {};
  if (!filters || !filters.length) {
    return {};
  }
  for (const filter of filters) {
    if (isFilterType("max", filter)) {
      const maxFilter = filter;
      params[maxFilter.field] = maxFilter.max;
    }
    if (isFilterForProperty("price", filter) && filter.parameters) {
      const { lt, gt, lte, gte } = filter.parameters;
      if (lt || lte) {
        params["max-price"] = lt || lte;
      }
      if (gt || gte) {
        params["min-price"] = gt || gte;
      }
    }
    if (isFilterForProperty("manufacturerId", filter) && filter.value) {
      params.manufacturer = concatIds(filter.value);
    }
    if (filter.type === SearchFilterType.MULTI && filter.queries) {
      for (const subFilter of filter.queries) {
        if (isFilterForProperty("propertyIds", subFilter)) {
          params.properties = concatIds(subFilter.value);
        }
      }
    }
  }
  return params;
}

// packages/shopware-6-client/src/helpers/searchConverter.ts
var ApiType;
(function(ApiType2) {
  ApiType2["store"] = "store-api";
  ApiType2["salesChannel"] = "sales-channel-api";
})(ApiType || (ApiType = {}));
var convertShopwareSearchCriteria = (searchCriteria) => {
  var _a, _b, _c, _d, _e;
  const params = {
    limit: ((_a = searchCriteria == null ? void 0 : searchCriteria.pagination) == null ? void 0 : _a.limit) || 10,
    p: ((_b = searchCriteria == null ? void 0 : searchCriteria.pagination) == null ? void 0 : _b.page) || 1,
    manufacturer: ((_c = searchCriteria == null ? void 0 : searchCriteria.manufacturer) == null ? void 0 : _c.join("|")) || void 0,
    properties: ((_d = searchCriteria == null ? void 0 : searchCriteria.properties) == null ? void 0 : _d.join("|")) || void 0,
    sort: !Array.isArray(searchCriteria == null ? void 0 : searchCriteria.sort) ? (_e = searchCriteria == null ? void 0 : searchCriteria.sort) == null ? void 0 : _e.name : void 0
  };
  return params;
};
var convertSearchCriteria = ({
  searchCriteria,
  apiType,
  config: config2
}) => {
  let params = {
    limit: config2.defaultPaginationLimit
  };
  if (!searchCriteria)
    return params;
  const { filters, sort, pagination, configuration, term } = searchCriteria;
  if (pagination) {
    const { limit, page } = pagination;
    if (limit) {
      params.limit = limit;
    }
    if (page) {
      if (apiType && apiType === ApiType.store) {
        params.p = page;
      } else {
        params.page = page;
      }
    }
  }
  if (sort) {
    if (!apiType || apiType === ApiType.salesChannel) {
      if (Array.isArray(sort)) {
        const sorting = sort.map(({ desc, field }) => `${desc ? "-" : ""}${field}`);
        params.sort = sorting.join(",");
      } else {
        let prefix = sort.desc ? "-" : "";
        params.sort = `${prefix}${sort.field}`;
      }
    }
    if (apiType && apiType === ApiType.store) {
      if (Array.isArray(sort)) {
        warning({
          packageName: "shopware-6-client",
          methodName: "convertSearchCriteria",
          notes: "store-api does not accept sorting on multiple fields"
        });
      } else {
        let order = sort.desc ? "desc" : "asc";
        params.order = sort.name || `${sort.field}-${order}`;
      }
    }
  }
  if (filters && filters.length) {
    if (apiType && apiType === ApiType.store) {
      params = Object.assign({}, params, convertToStoreApiFilters(filters));
    } else {
      params.filter = filters;
    }
  }
  if (configuration && configuration.associations) {
    params.associations = Array.isArray(configuration.associations) && convertAssociations(configuration.associations) || configuration.associations;
  }
  if (configuration == null ? void 0 : configuration.grouping) {
    params.grouping = configuration.grouping;
  }
  if (configuration == null ? void 0 : configuration.includes) {
    params.includes = configuration.includes;
  }
  if (configuration == null ? void 0 : configuration.ids) {
    params.ids = configuration.ids.join("|");
  }
  if (term) {
    params.term = term;
  }
  return params;
};

// packages/shopware-6-client/src/services/productService.ts
var getProductsIds = function(_0) {
  return __async(this, arguments, function* (options, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getProductEndpoint(), {
      includes: [{ product: ["id"] }]
    });
    return resp.data;
  });
};
var getProducts = function(_0) {
  return __async(this, arguments, function* (searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductEndpoint()}`, convertSearchCriteria({ searchCriteria, config: contextInstance.config }));
    return resp.data;
  });
};
var getCategoryProductsListing = function(_0, _1) {
  return __async(this, arguments, function* (categoryId, searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, convertSearchCriteria({
      searchCriteria,
      apiType: ApiType.store,
      config: contextInstance.config
    }));
    return resp.data;
  });
};
var getCategoryProducts = function(_0, _1) {
  return __async(this, arguments, function* (categoryId, criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getProductListingEndpoint(categoryId)}`, criteria);
    return resp.data;
  });
};
function getProduct(_0) {
  return __async(this, arguments, function* (productId, params = null, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getProductDetailsEndpoint(productId), {
      params
    });
    return resp.data;
  });
}
function addProductReview(_0, _1) {
  return __async(this, arguments, function* (productId, productReviewData, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(`${getProductDetailsEndpoint(productId)}/review`, productReviewData);
  });
}

// packages/shopware-6-client/src/services/customerService.ts
function register(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerRegisterEndpoint(), params);
    return resp.data;
  });
}
function login() {
  return __async(this, arguments, function* ({ username, password } = {}, contextInstance = defaultInstance) {
    if (!username || !password) {
      throw new Error("Provide username and password for login");
    }
    const resp = yield contextInstance.invoke.post(getCustomerLoginEndpoint(), {
      username,
      password
    });
    const contextToken = resp.data["sw-context-token"] || resp.data["contextToken"];
    return { contextToken };
  });
}
function logout() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerLogoutEndpoint());
  });
}
function getCustomer() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    try {
      const resp = yield contextInstance.invoke.get(`${getCustomerEndpoint()}`, {
        params: "associations[salutation][]"
      });
      return resp.data;
    } catch (e) {
      if (e.statusCode === 403)
        return null;
      throw new Error("Unexpected getCustomerResponse. " + e);
    }
  });
}
function getCustomerAddresses() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCustomerAddressEndpoint());
    return resp.data;
  });
}
function getCustomerOrders() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    var _a;
    const resp = yield contextInstance.invoke.get(getCustomerOrderEndpoint(), {
      params: {
        sort: "-createdAt"
      }
    });
    return ((_a = resp.data.orders) == null ? void 0 : _a.elements) || [];
  });
}
function getCustomerOrderDetails(_0) {
  return __async(this, arguments, function* (orderId, contextInstance = defaultInstance, additionalQueryParams) {
    var _a, _b;
    if (!orderId) {
      return;
    }
    const resp = yield contextInstance.invoke.get(getCustomerOrderEndpoint(), {
      params: additionalQueryParams ? `filter[id]=${orderId}&${additionalQueryParams}` : `sort=-transactions.createdAt&limit=1&filter[id]=${orderId}&associations[lineItems][]&associations[addresses][]&associations[transactions][associations][paymentMethod][]&associations[deliveries][associations][shippingMethod][]`
    });
    return (_b = (_a = resp.data.orders) == null ? void 0 : _a.elements) == null ? void 0 : _b[0];
  });
}
function getCustomerAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCustomerAddressEndpoint(addressId));
    return resp.data.data;
  });
}
function createCustomerAddress(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCustomerAddAddressEndpoint(), params);
    return resp.data;
  });
}
function updateCustomerAddress(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.patch(getCustomerAddressEndpoint(params.id), params);
    return resp.data;
  });
}
function deleteCustomerAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    yield contextInstance.invoke.delete(getCustomerAddressEndpoint(addressId));
  });
}
function setDefaultCustomerBillingAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.patch(getCustomerDefaultBillingAddressEndpoint(addressId));
    return response.data;
  });
}
function setDefaultCustomerShippingAddress(_0) {
  return __async(this, arguments, function* (addressId, contextInstance = defaultInstance) {
    const response = yield contextInstance.invoke.patch(getCustomerDefaultShippingAddressEndpoint(addressId));
    return response.data;
  });
}
function updateEmail(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerUpdateEmailEndpoint(), params);
  });
}
function updatePassword(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerUpdatePasswordEndpoint(), params);
  });
}
function resetPassword(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    if (params && !params.storefrontUrl) {
      params.storefrontUrl = contextInstance.config.endpoint;
    }
    yield contextInstance.invoke.post(getCustomerResetPasswordEndpoint(), params);
  });
}
function confirmPasswordReset(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    if (!params)
      return;
    yield contextInstance.invoke.post(getConfirmPasswordResetEndpoint(), __spreadValues({
      newPasswordConfirm: params.newPassword
    }, params));
  });
}
function updateProfile(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getCustomerDetailsUpdateEndpoint(), params);
  });
}

// packages/shopware-6-client/src/services/contextService.ts
function updateContext(params, contextInstance) {
  return __async(this, null, function* () {
    const resp = yield contextInstance.invoke.patch(getContextEndpoint(), params);
    const contextToken = extractContextToken(resp);
    return { contextToken };
  });
}
function getSessionContext() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextEndpoint());
    return data;
  });
}
function setCurrentShippingAddress(shippingAddressId, contextInstance = defaultInstance) {
  return updateContext({ shippingAddressId }, contextInstance);
}
function setCurrentBillingAddress(billingAddressId, contextInstance = defaultInstance) {
  return updateContext({ billingAddressId }, contextInstance);
}
function getAvailableCurrencies() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextCurrencyEndpoint());
    return data;
  });
}
function setCurrentCurrency(_0) {
  return __async(this, arguments, function* (newCurrencyID, contextInstance = defaultInstance) {
    let params = { currencyId: newCurrencyID };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableLanguages() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextLanguageEndpoint());
    return data;
  });
}
function setCurrentLanguage(_0) {
  return __async(this, arguments, function* (newLanguageId, contextInstance = defaultInstance) {
    let params = { languageId: newLanguageId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableCountries() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const { data } = yield contextInstance.invoke.get(getContextCountryEndpoint());
    return data;
  });
}
function getAvailableSalutations() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getContextSalutationEndpoint());
    return resp.data;
  });
}
function getAvailablePaymentMethods() {
  return __async(this, arguments, function* (contextInstance = defaultInstance, params = {}) {
    const resp = yield contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
      params
    });
    return resp.data;
  });
}
function getPaymentMethodDetails(_0) {
  return __async(this, arguments, function* (paymentId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextPaymentMethodEndpoint(), {
      params: {
        "filter[id]": paymentId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function setCurrentPaymentMethod(_0) {
  return __async(this, arguments, function* (newPaymentMethodId, contextInstance = defaultInstance) {
    let params = { paymentMethodId: newPaymentMethodId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getAvailableShippingMethods() {
  return __async(this, arguments, function* (contextInstance = defaultInstance, params = {}) {
    const resp = yield contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
      params
    });
    return resp.data;
  });
}
function getShippingMethodDetails(_0) {
  return __async(this, arguments, function* (shippingId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextShippingMethodEndpoint(), {
      params: {
        "filter[id]": shippingId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function setCurrentShippingMethod(_0) {
  return __async(this, arguments, function* (newShippingMethodId, contextInstance = defaultInstance) {
    let params = { shippingMethodId: newShippingMethodId };
    const resp = yield updateContext(params, contextInstance);
    return resp;
  });
}
function getUserCountry(_0) {
  return __async(this, arguments, function* (countryId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextCountryEndpoint(), {
      params: {
        "filter[id]": countryId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}
function getUserSalutation(_0) {
  return __async(this, arguments, function* (salutationId, contextInstance = defaultInstance) {
    var _a;
    const { data } = yield contextInstance.invoke.get(getContextSalutationEndpoint(), {
      params: {
        "filter[id]": salutationId
      }
    });
    return (_a = data == null ? void 0 : data.elements) == null ? void 0 : _a[0];
  });
}

// packages/shopware-6-client/src/services/cartService.ts
function clearCart() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCheckoutCartEndpoint());
    let contextToken = resp.data["sw-context-token"];
    return { contextToken };
  });
}
function getCart() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.get(getCheckoutCartEndpoint());
    return resp.data;
  });
}
function addProductToCart(_0, _1) {
  return __async(this, arguments, function* (productId, quantity, contextInstance = defaultInstance) {
    const qty = quantity || 1;
    const item = {
      quantity: qty,
      type: "product",
      referencedId: productId,
      id: productId
    };
    const resp = yield contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
      items: [item]
    });
    return resp.data;
  });
}
function changeCartItemQuantity(_0) {
  return __async(this, arguments, function* (itemId, newQuantity = 1, contextInstance = defaultInstance) {
    let params = {
      items: [
        {
          id: itemId,
          quantity: parseInt(newQuantity.toString(), 10)
        }
      ]
    };
    const resp = yield contextInstance.invoke.patch(getCheckoutCartLineItemEndpoint(), params);
    return resp.data;
  });
}
function removeCartItem(_0) {
  return __async(this, arguments, function* (itemId, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.delete(`${getCheckoutCartLineItemEndpoint()}?ids[]=${itemId}`);
    return resp.data;
  });
}
function addPromotionCode(_0) {
  return __async(this, arguments, function* (promotionCode, contextInstance = defaultInstance) {
    const item = {
      type: "promotion",
      referencedId: promotionCode
    };
    const resp = yield contextInstance.invoke.post(getCheckoutCartLineItemEndpoint(), {
      items: [item]
    });
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/navigationService.ts
function getStoreNavigation(_0) {
  return __async(this, arguments, function* ({
    requestActiveId,
    requestRootId,
    depth,
    buildTree,
    searchCriteria
  }, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getStoreNavigationEndpoint(requestActiveId, requestRootId), __spreadValues(__spreadValues({}, convertSearchCriteria({
      searchCriteria,
      apiType: ApiType.store,
      config: contextInstance.config
    })), {
      depth,
      buildTree
    }));
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/pageService.ts
function getPage(_0, _1) {
  return __async(this, arguments, function* (path, searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getPageResolverEndpoint(), __spreadValues({
      path
    }, convertSearchCriteria({
      searchCriteria,
      config: contextInstance.config
    })));
    return resp.data;
  });
}
function getCmsPage(_0, _1) {
  return __async(this, arguments, function* (path, criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getPageResolverEndpoint(), __spreadValues({
      path
    }, criteria));
    return resp.data;
  });
}
function getProductPage(_0, _1) {
  return __async(this, arguments, function* (path, searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getPageResolverEndpoint(), __spreadValues({
      path
    }, convertSearchCriteria({
      searchCriteria,
      config: contextInstance.config
    })));
    return resp.data;
  });
}
function getSeoUrls(_0, _1) {
  return __async(this, arguments, function* (entityId, languageId, contextInstance = defaultInstance) {
    if (languageId) {
      contextInstance.defaults.headers["sw-language-id"] = languageId;
    }
    const resp = yield contextInstance.invoke.post(getSeoUrlEndpoint(), {
      filter: [
        {
          type: "equals",
          field: "foreignKey",
          value: entityId
        }
      ],
      includes: {
        seo_url: ["seoPathInfo"]
      }
    });
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/checkoutService.ts
function createOrder() {
  return __async(this, arguments, function* (contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(getCheckoutOrderEndpoint());
    return resp.data;
  });
}
function handlePayment(_0, _1, _2) {
  return __async(this, arguments, function* (orderId, finishUrl, errorUrl, contextInstance = defaultInstance) {
    if (!orderId) {
      throw new Error("handlePayment method requires orderId");
    }
    const resp = yield contextInstance.invoke.get(handlePaymentEndpoint(), {
      params: { orderId, finishUrl, errorUrl }
    });
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/pluginService.ts
function invokePost({
  address,
  payload
}, contextInstance = defaultInstance) {
  return contextInstance.invoke.post(address, payload);
}
function invokeGet({ address }, contextInstance = defaultInstance) {
  return contextInstance.invoke.get(address);
}

// packages/shopware-6-client/src/services/searchService.ts
function getSearchResults(_0, _1) {
  return __async(this, arguments, function* (term, searchCriteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getSearchEndpoint()}?search=${term}`, __spreadValues({}, convertShopwareSearchCriteria(searchCriteria)));
    return resp.data;
  });
}
function searchProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getSearchEndpoint()}?search=${(criteria == null ? void 0 : criteria.query) || ""}`, criteria);
    return resp.data;
  });
}
function searchSuggestedProducts(_0) {
  return __async(this, arguments, function* (criteria, contextInstance = defaultInstance) {
    const resp = yield contextInstance.invoke.post(`${getSuggestSearchEndpoint()}?search=${(criteria == null ? void 0 : criteria.query) || ""}`, criteria);
    return resp.data;
  });
}

// packages/shopware-6-client/src/services/formsService.ts
function sendContactForm(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getContactFormEndpoint(), params);
  });
}
function newsletterSubscribe(_0) {
  return __async(this, arguments, function* (params, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getStoreNewsletterSubscribeEndpoint(), Object.assign({}, { option: "subscribe" }, params));
  });
}
function newsletterUnsubscribe(_0) {
  return __async(this, arguments, function* ({
    email
  }, contextInstance = defaultInstance) {
    yield contextInstance.invoke.post(getStoreNewsletterUnsubscribeEndpoint(), email);
  });
}

// packages/shopware-6-client/src/index.ts
var config = defaultInstance.config;
var setup = defaultInstance.setup;
var update = defaultInstance.update;
var onConfigChange = defaultInstance.onConfigChange;
