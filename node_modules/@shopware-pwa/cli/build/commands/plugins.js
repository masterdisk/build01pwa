var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/commands/plugins.ts
module.exports = {
  name: "plugins",
  hidden: true,
  run: async (toolbox) => {
    var _a;
    const {
      template: { generate },
      print: { success, spin }
    } = toolbox;
    const inputParameters = toolbox.inputParameters;
    const isCIrun = inputParameters.ci;
    if (!isCIrun) {
      toolbox.print.info("Please provide username and password for plugins authentication. You can leave the fields empty if connecting to demo instance or if you don't need plugins :)");
      const shopwareUsernameQuestion = !inputParameters.username && {
        type: "input",
        name: "username",
        message: "Shopware admin username:"
      };
      const shopwarePasswordQuestion = !inputParameters.password && {
        type: "password",
        name: "password",
        message: "Shopware admin password:"
      };
      const devModeQuestion = !inputParameters.devMode && {
        type: "confirm",
        name: "devMode",
        message: "Do you want to allow dev mode for slots? (Don't use for production!)"
      };
      const answers = await toolbox.prompt.ask([
        shopwareUsernameQuestion,
        shopwarePasswordQuestion,
        devModeQuestion
      ]);
      Object.assign(inputParameters, answers);
    }
    const allowDevMode = !!inputParameters.devMode;
    await toolbox.loadPluginsAssets();
    const generateFilesSpinner = spin("Generating plugins files");
    await generate({
      template: "/plugins/usePlugins.js",
      target: ".shopware-pwa/sw-plugins/usePlugins.js",
      props: {
        allowDevMode
      }
    });
    await generate({
      template: "/plugins/SwPluginSlotPlaceholder.vue",
      target: ".shopware-pwa/sw-plugins/SwPluginSlotPlaceholder.vue",
      props: {}
    });
    await generate({
      template: "/plugins/SwPluginSlotPlaceholderSwitcher.vue",
      target: ".shopware-pwa/sw-plugins/SwPluginSlotPlaceholderSwitcher.vue",
      props: {}
    });
    const pluginsConfig = await toolbox.plugins.getPluginsConfig();
    const shopwarePluginsTrace = await toolbox.buildPluginsTrace({
      pluginsConfig
    });
    const localPluginsConfig = await toolbox.plugins.getPluginsConfig({
      localPlugins: true
    });
    const pluginsTrace = await toolbox.buildPluginsTrace({
      pluginsConfig: localPluginsConfig,
      pluginsTrace: shopwarePluginsTrace,
      rootDirectory: "sw-plugins"
    });
    if (allowDevMode) {
      if (!pluginsTrace["footer-content"])
        pluginsTrace["footer-content"] = [];
      pluginsTrace["footer-content"].push("sw-plugins/SwPluginSlotPlaceholderSwitcher.vue");
    }
    generateFilesSpinner.succeed();
    const finalMap = await toolbox.buildPluginsMap(pluginsTrace);
    await generate({
      template: "/plugins/SwPluginSlot.vue",
      target: ".shopware-pwa/sw-plugins/SwPluginSlot.vue",
      props: {
        pluginsMap: finalMap
      }
    });
    const langParams = __spreadValues({
      local: true
    }, inputParameters);
    await ((_a = toolbox == null ? void 0 : toolbox.runtime) == null ? void 0 : _a.run(`languages`, langParams));
    success(`Plugins generated`);
  }
};
