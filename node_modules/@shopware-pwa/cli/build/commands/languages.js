// src/commands/languages.ts
module.exports = {
  name: "languages",
  alias: ["lang"],
  hidden: true,
  run: async (toolbox) => {
    var _a;
    const path = require("path");
    toolbox.checkThemePath();
    const inputParameters = toolbox.inputParameters;
    const shopwarePwaPath = path.join(".shopware-pwa", "sw-plugins");
    const shopwarePwaLocalesPath = path.join(".shopware-pwa", "sw-plugins", "locales");
    const themeLanguagesDir = path.join(toolbox.getThemePath(), "locales");
    const resultLocalesMap = {};
    const themeLocalesMap = await toolbox.languages.getLocalesMap(themeLanguagesDir);
    await toolbox.languages.mergeLocalesMap(resultLocalesMap, themeLocalesMap);
    const pluginsConfig = await toolbox.plugins.getPluginsConfig();
    const pluginsLocalesPaths = await toolbox.languages.getPluginsLocalesPaths({
      pluginsConfig
    });
    for (let index = 0; index < pluginsLocalesPaths.length; index++) {
      const localePath = pluginsLocalesPaths[index];
      const localeMap = await toolbox.languages.getLocalesMap(localePath);
      await toolbox.languages.mergeLocalesMap(resultLocalesMap, localeMap);
    }
    const localPluginsConfig = await toolbox.plugins.getPluginsConfig({
      localPlugins: true
    });
    const localPluginsLocalesPaths = await toolbox.languages.getPluginsLocalesPaths({
      pluginsConfig: localPluginsConfig,
      rootDirectory: "sw-plugins"
    });
    for (let index = 0; index < localPluginsLocalesPaths.length; index++) {
      const localePath = localPluginsLocalesPaths[index];
      const localeMap = await toolbox.languages.getLocalesMap(localePath);
      await toolbox.languages.mergeLocalesMap(resultLocalesMap, localeMap);
    }
    const localProjectLocalesMap = await toolbox.languages.getLocalesMap("locales");
    await toolbox.languages.mergeLocalesMap(resultLocalesMap, localProjectLocalesMap);
    await toolbox.languages.writeLanguages(resultLocalesMap, shopwarePwaLocalesPath);
    const isLocalReload = !!toolbox.parameters.options.local;
    if (!isLocalReload) {
      const apiClient = require("@shopware-pwa/shopware-6-client");
      const languagesMap = {};
      try {
        apiClient.setup({
          endpoint: inputParameters.shopwareEndpoint,
          accessToken: inputParameters.shopwareAccessToken
        });
        apiClient.onConfigChange(() => {
        });
        const response = await apiClient.invokeGet({
          address: "/store-api/language"
        });
        (_a = response.data) == null ? void 0 : _a.elements.forEach((lang) => {
          const language = {
            id: lang.id,
            code: lang.translationCode.code,
            name: lang.translationCode.name
          };
          languagesMap[language.code] = language;
        });
      } catch (e) {
        console.error("[CLI] There is a problem with languages", e);
      } finally {
        await toolbox.filesystem.writeAsync(path.join(shopwarePwaPath, "languages.json"), languagesMap);
      }
    }
    toolbox.print.success(`Shopware languages refreshed`);
  }
};
