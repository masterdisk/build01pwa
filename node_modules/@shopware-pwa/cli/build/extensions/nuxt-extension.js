var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/extensions/nuxt-extension.ts
var import_path = __toModule(require("path"));
var path = require("path");
module.exports = (toolbox) => {
  const {
    print: { spin },
    filesystem: { exists }
  } = toolbox;
  toolbox.generateNuxtProject = async () => {
    const spinner = spin("Preparing Nuxt project");
    const isNuxtGenerated = exists("nuxt.config.js");
    if (!isNuxtGenerated) {
      const baseDirectory = toolbox.plugin && toolbox.plugin.directory;
      let templateDirectory = `${baseDirectory}/templates`;
      if (!toolbox.filesystem.isDirectory(templateDirectory)) {
        templateDirectory = `${baseDirectory}/build/templates`;
      }
      const projectTemplatePath = (0, import_path.join)(templateDirectory, "project-template");
      await toolbox.filesystem.copyAsync(projectTemplatePath, ".", {
        overwrite: true
      });
      const gitIgnoreExists = await toolbox.filesystem.existsAsync("gitignore");
      if (gitIgnoreExists) {
        await toolbox.filesystem.moveAsync("gitignore", ".gitignore");
      }
      spinner.succeed();
      return true;
    } else {
      spinner.succeed("Preparing Nuxt project: project is already created. Remove `nuxt.config.js` to regenerate whole project.");
      return false;
    }
  };
  toolbox.generateTemplateFiles = async ({ shopwareEndpoint, shopwareAccessToken, pwaHost } = toolbox.inputParameters) => {
    const isConfigGenerated = exists("shopware-pwa.config.js");
    if (!isConfigGenerated) {
      await toolbox.template.generate({
        template: "shopware-pwa.config.js",
        target: `shopware-pwa.config.js`,
        props: {
          shopwareEndpoint,
          shopwareAccessToken,
          pwaHost
        }
      });
    }
  };
  toolbox.copyThemeFolder = async (folderName, destination) => {
    const dest = destination ? destination : folderName;
    const destinationExist = toolbox.filesystem.existsAsync(dest);
    if (destinationExist)
      return;
    return toolbox.filesystem.copyAsync(path.join(toolbox.getThemePath(), folderName), dest, { overwrite: true });
  };
};
