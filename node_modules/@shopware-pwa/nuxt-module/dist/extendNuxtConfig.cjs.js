var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// packages/nuxt-module/src/extendNuxtConfig.ts
__export(exports, {
  default: () => extendNuxtConfig
});
var import_lodash = __toModule(require("lodash"));
function customizer(objValue, srcValue) {
  if ((0, import_lodash.isArray)(objValue)) {
    return objValue.concat(srcValue);
  }
}
var defaultConfig = {
  telemetry: false,
  vue: {
    config: {
      devtools: process.env.ENABLE_DEVTOOLS === "true" || true
    }
  },
  env: {
    CHOKIDAR_USEPOLLING: false ? "0" : "1",
    EXPERIMENTAL_IMAGE_PROCESSING_SERVER: process.env.EXPERIMENTAL_IMAGE_PROCESSING_SERVER || ""
  },
  server: {
    port: process.env.PORT || 3e3,
    host: process.env.HOST || "0.0.0.0"
  },
  head: {
    title: "Shopware PWA",
    meta: [
      { hid: "project-type", name: "project-type", content: "shopware-pwa" },
      { charset: "utf-8" },
      { name: "viewport", content: "width=device-width, initial-scale=1" },
      { hid: "description", name: "description", content: "" }
    ],
    link: [
      { rel: "icon", type: "image/x-icon", href: "/favicon.ico" },
      {
        rel: "preload",
        href: "https://fonts.googleapis.com/css?family=Raleway:300,400,400i,500,600,700%7CRoboto:300,300i,400,400i,500,700&display=swap",
        as: "style"
      },
      {
        rel: "stylesheet",
        href: "https://fonts.googleapis.com/css?family=Raleway:300,400,400i,500,600,700%7CRoboto:300,300i,400,400i,500,700&display=swap",
        media: "print",
        onload: "this.media='all'",
        once: true
      }
    ]
  },
  css: ["~assets/scss/main.scss"],
  plugins: [],
  components: false,
  buildModules: ["@nuxt/typescript-build", "@shopware-pwa/nuxt-module"],
  modules: [
    "@nuxtjs/axios",
    "@nuxtjs/pwa"
  ],
  axios: {},
  pwa: {
    manifest: {
      lang: "en"
    },
    workbox: {
      offlineStrategy: "StaleWhileRevalidate"
    }
  },
  build: {
    babel: {
      plugins: [["@babel/plugin-proposal-private-methods", { loose: true }]]
    }
  }
};
var configs = [defaultConfig];
function extendNuxtConfig(config) {
  configs.push(config);
  return configs.reduce((prev, next) => (0, import_lodash.mergeWith)(prev, next, customizer));
}
