var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge3() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge3(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge3({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge: merge3,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path8, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path8)) {
            cookie.push("path=" + path8);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            if (config.responseType !== "json") {
              throw e;
            }
          }
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData(config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge3(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    module2.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios2.defaults, instanceConfig));
    };
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module2.exports = axios2;
    module2.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// packages/nuxt-module/src/index.ts
__export(exports, {
  default: () => src_default
});

// packages/nuxt-module/src/module.ts
var import_path7 = __toModule(require("path"));

// packages/nuxt-module/src/utils.ts
var import_fs_jetpack = __toModule(require("fs-jetpack"));
var import_cosmiconfig = __toModule(require("cosmiconfig"));

// compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var compatibility_default = {
  shopwareApiVersion,
  instances
};

// packages/commons/src/defaultConfig.ts
var import_merge = __toModule(require("lodash/merge"));
var import_axios = __toModule(require_axios2());
function getCompatibilityTable() {
  return __async(this, null, function* () {
    try {
      const gitHubReleasesResponse = yield import_axios.default.get(`https://raw.githubusercontent.com/vuestorefront/shopware-pwa/master/compatibility.json`);
      return (0, import_merge.default)({}, compatibility_default, gitHubReleasesResponse.data);
    } catch (e) {
      return compatibility_default;
    }
  });
}
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};
function getDefaultConfigFile() {
  return __async(this, null, function* () {
    const compatibility = yield getCompatibilityTable();
    const currentEndpointSetup = compatibility.instances[compatibility_default.shopwareApiVersion];
    return (0, import_merge.default)({}, defaultPwaConfigFile, {
      shopwareEndpoint: currentEndpointSetup.domain,
      shopwareAccessToken: currentEndpointSetup.apiKey
    });
  });
}

// packages/nuxt-module/src/utils.ts
function loadConfig(moduleObject) {
  return __async(this, null, function* () {
    const explorer = (0, import_cosmiconfig.cosmiconfig)("shopware-pwa");
    const defaultConfig = yield getDefaultConfigFile();
    const result = yield explorer.search();
    const loadedConfig = (result == null ? void 0 : result.config) || {};
    return __spreadValues(__spreadValues({}, defaultConfig), loadedConfig);
  });
}

// packages/nuxt-module/src/cms.ts
var import_path = __toModule(require("path"));
var import_fs_jetpack2 = __toModule(require("fs-jetpack"));
function extendCMS(moduleObject, shopwarePwaConfig) {
  const cmsModuleExists = import_fs_jetpack2.default.exists(import_path.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-cms", "cmsNameMapper.js"));
  if (!cmsModuleExists) {
    throw new Error("[shopware-pwa] CMS module is not initialized properly, please run 'shopware-pwa init'");
  }
  const allThemeCmsFiles = import_fs_jetpack2.default.list(import_path.default.join(shopwarePwaConfig.theme, "cms")) || [];
  const cmsCatalogFiles = allThemeCmsFiles.filter((name) => name.includes(".vue"));
  moduleObject.extendBuild((config) => {
    const swCmsDirectory = import_path.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-cms");
    cmsCatalogFiles.forEach((cmsFile) => {
      config.resolve.alias["sw-cms/" + cmsFile.replace(".vue", "")] = import_path.default.join(shopwarePwaConfig.theme, "cms", cmsFile);
    });
    config.resolve.alias["sw-cms"] = swCmsDirectory;
  });
}

// packages/nuxt-module/src/domains.ts
var import_path2 = __toModule(require("path"));
var import_fs_jetpack3 = __toModule(require("fs-jetpack"));
function setupDomains(moduleObject, shopwarePwaConfig) {
  return __async(this, null, function* () {
    var _a, _b;
    const domainConfigPath = import_path2.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-plugins", "domains.json");
    const domainsConfigExists = import_fs_jetpack3.default.exists(domainConfigPath);
    if (!domainsConfigExists) {
      yield import_fs_jetpack3.default.writeAsync(domainConfigPath, "{}");
      console.warn("[shopware-pwa] Domains config is not initialized properly, please run 'shopware-pwa init' or 'shopware-pwa domains' command again.");
    }
    const domainsConfigFile = yield import_fs_jetpack3.default.readAsync(domainConfigPath);
    if (!domainsConfigFile) {
      throw new Error("[shopware-pwa] Domains config is not initialized properly, please run 'shopware-pwa init'");
    }
    let domainsRoutes = [];
    const domainsEntries = Object.values(JSON.parse(domainsConfigFile));
    const dontUseNamedRoute = (route) => {
      var _a2;
      return (_a2 = route == null ? void 0 : route.children) == null ? void 0 : _a2.find((childRoute) => childRoute.path == "");
    };
    const appendChildrenWithUniqueName = (routes, parentRoute, domainId) => {
      return routes.map((route) => __spreadProps(__spreadValues({}, route), {
        name: dontUseNamedRoute(route) ? "" : `${parentRoute.path}_${route.path !== "" ? route.path : "_"}_${domainId}`,
        children: route.children && appendChildrenWithUniqueName(route.children, route, domainId)
      }));
    };
    const enrichRoutes = (routes) => {
      var _a2, _b2;
      if ((_b2 = (_a2 = routes[0]) == null ? void 0 : _a2.name) == null ? void 0 : _b2.startsWith("all")) {
        routes.reverse();
      }
      routes.forEach((route) => {
        var _a3;
        if (!((_a3 = route.meta) == null ? void 0 : _a3.domainId) || !domainsEntries.length) {
          domainsEntries.forEach((domainConfig) => {
            const routeName = dontUseNamedRoute(route) ? "" : `${route.name}_${route.path}_domainId_${domainConfig.domainId}`;
            if (!domainsRoutes.find((routeData) => routeData.name === routeName)) {
              domainsRoutes.push(__spreadProps(__spreadValues({}, route), {
                path: `${domainConfig.url !== "/" ? domainConfig.url : ""}${route.path}`,
                name: routeName,
                meta: domainConfig,
                children: route.children && appendChildrenWithUniqueName(route.children, `${domainConfig.domainId}_${route.name}`, domainConfig.domainId)
              }));
            }
          });
        }
      });
      if (domainsRoutes.length) {
        const wildCardIndexFound = domainsRoutes.findIndex((v) => v.path == "/*");
        wildCardIndexFound && domainsRoutes.push(domainsRoutes.splice(wildCardIndexFound, 1)[0]);
        const paramsIndex = domainsRoutes.findIndex((v) => /\/:.*\/\*/.test(v.path));
        paramsIndex && domainsRoutes.push(domainsRoutes.splice(paramsIndex, 1)[0]);
        routes.splice(0, routes.length, ...domainsRoutes);
      }
    };
    moduleObject.nuxt.hook("build:extendRoutes", (routes) => enrichRoutes(routes));
    moduleObject.addPlugin({
      fileName: "domain.js",
      src: import_path2.default.join(__dirname, "..", "plugins", "domain.js"),
      options: {
        pwaHost: shopwarePwaConfig.pwaHost,
        fallbackDomain: shopwarePwaConfig.fallbackDomain || "/"
      }
    });
    moduleObject.options.router.middleware = moduleObject.options.router.middleware || [];
    if (typeof ((_b = (_a = moduleObject == null ? void 0 : moduleObject.options) == null ? void 0 : _a.router) == null ? void 0 : _b.middleware) === "string") {
      moduleObject.options.router.middleware = [
        moduleObject.options.router.middleware
      ];
    }
    moduleObject.options.router.middleware.push("routing");
  });
}

// packages/nuxt-module/src/locales.ts
var import_path3 = __toModule(require("path"));
var import_fs_jetpack4 = __toModule(require("fs-jetpack"));
function extendLocales(moduleObject, shopwarePwaConfig) {
  const languageConfigExists = import_fs_jetpack4.default.exists(import_path3.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-plugins", "languages.json"));
  if (!languageConfigExists) {
    throw new Error("[shopware-pwa] Languages config is not initialized properly, please run 'shopware-pwa init'");
  }
  const defaultLanguageCode = (shopwarePwaConfig == null ? void 0 : shopwarePwaConfig.defaultLanguageCode) || "en-GB";
  const defaultLanguageFileExists = import_fs_jetpack4.default.exists(import_path3.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-plugins", "locales", `${defaultLanguageCode}.json`));
  if (!defaultLanguageFileExists) {
    throw new Error(`[shopware-pwa] There is no default language file for ${defaultLanguageCode} code, please add translation file to locales folder.`);
  }
  const localesDirListing = import_fs_jetpack4.default.list(import_path3.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-plugins", "locales")) || [];
  const localeFromFiles = localesDirListing.map((localeFileName) => localeFileName.replace(".json", ""));
  moduleObject.addPlugin({
    src: import_path3.default.join(__dirname, "..", "plugins", "i18n.js"),
    fileName: "i18n.js",
    options: {
      defaultLanguage: defaultLanguageCode,
      availableLocales: localeFromFiles
    }
  });
}

// packages/nuxt-module/src/packages.ts
var import_path4 = __toModule(require("path"));
var import_fs_jetpack5 = __toModule(require("fs-jetpack"));
function useCorePackages(moduleObject, corePackages) {
  const useRawSource = (packageName) => {
    const pkgPath = import_path4.default.resolve(import_path4.default.join("node_modules", packageName));
    const pkg = import_fs_jetpack5.default.read(import_path4.default.join(pkgPath, "package.json"), "json");
    if (pkg && pkg.module) {
      moduleObject.options.alias[pkg.name + "$"] = import_path4.default.resolve(pkgPath, pkg.module);
    }
    moduleObject.options.build = moduleObject.options.build || {};
    moduleObject.options.build.transpile = moduleObject.options.build.transpile || [];
    moduleObject.options.build.transpile.push(packageName);
  };
  corePackages.forEach((packageName) => {
    useRawSource(packageName);
  });
}

// packages/nuxt-module/src/files.ts
var import_fs_jetpack6 = __toModule(require("fs-jetpack"));
var import_path5 = __toModule(require("path"));
function getAllFiles(dirPath, arrayOfFiles = [], excludeHidden = true) {
  if (!dirPath || !import_fs_jetpack6.default.exists(dirPath))
    return [];
  const files = import_fs_jetpack6.default.list(dirPath);
  files.forEach((file) => {
    if (import_fs_jetpack6.default.exists(import_path5.default.join(dirPath, file)) === "dir") {
      arrayOfFiles = getAllFiles(import_path5.default.join(dirPath, file), arrayOfFiles);
    } else {
      const fileName = import_path5.default.join(dirPath, file).replace(__dirname + "/", "");
      if (!(excludeHidden && file.startsWith("."))) {
        arrayOfFiles.push(import_path5.default.normalize(fileName));
      }
    }
  });
  return arrayOfFiles;
}

// packages/nuxt-module/src/theme.ts
var import_path6 = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
function getTargetSourcePath(moduleObject) {
  return import_path6.default.join(moduleObject.options.rootDir, ".shopware-pwa", "source");
}
function getThemeSourcePath(moduleObject, config) {
  const directDistPath = import_path6.default.join(moduleObject.options.rootDir, config.theme, "dist");
  const directDistPathExist = import_fs_extra.default.existsSync(directDistPath);
  if (directDistPathExist)
    return directDistPath;
  const directPath = import_path6.default.join(moduleObject.options.rootDir, config.theme);
  const directPathExist = import_fs_extra.default.existsSync(directPath);
  if (directPathExist)
    return directPath;
  const nodePackageDistPath = import_path6.default.join(moduleObject.options.rootDir, "node_modules", config.theme, "dist");
  const nodePackageDistPathExist = import_fs_extra.default.existsSync(nodePackageDistPath);
  if (nodePackageDistPathExist)
    return nodePackageDistPath;
  const nodePackagePath = import_path6.default.join(moduleObject.options.rootDir, "node_modules", config.theme);
  const nodePackagePathExist = import_fs_extra.default.existsSync(nodePackagePath);
  if (nodePackagePathExist)
    return nodePackagePath;
  throw `No theme found for "${directPath}". Please make sure that path is correct or theme is installed from NPM.`;
}
function getProjectSourcePath(moduleObject) {
  return import_path6.default.join(moduleObject.options.rootDir, "src");
}
function filterNodeModules(src, dest) {
  return !dest.includes("node_modules");
}
function useThemeAndProjectFiles(_0) {
  return __async(this, arguments, function* ({
    TARGET_SOURCE,
    THEME_SOURCE,
    PROJECT_SOURCE
  }) {
    yield import_fs_extra.default.emptyDir(TARGET_SOURCE);
    const layoutsPath = import_path6.default.join(TARGET_SOURCE, "..", "sw-plugins", "layouts");
    const layoutsExist = yield import_fs_extra.default.pathExists(layoutsPath);
    layoutsExist && (yield import_fs_extra.default.copy(layoutsPath, import_path6.default.join(TARGET_SOURCE, "layouts")));
    const pagesPath = import_path6.default.join(TARGET_SOURCE, "..", "sw-plugins", "pages");
    const pagesExist = yield import_fs_extra.default.pathExists(pagesPath);
    pagesExist && (yield import_fs_extra.default.copy(pagesPath, import_path6.default.join(TARGET_SOURCE, "pages")));
    yield import_fs_extra.default.copy(THEME_SOURCE, TARGET_SOURCE, {
      dereference: true,
      filter: filterNodeModules
    });
    yield import_fs_extra.default.copy(PROJECT_SOURCE, TARGET_SOURCE);
  });
}
function onThemeFilesChanged(_0) {
  return __async(this, arguments, function* ({
    event,
    filePath,
    TARGET_SOURCE,
    THEME_SOURCE,
    PROJECT_SOURCE
  }) {
    const relativePath = filePath.replace(THEME_SOURCE, "");
    const projectFilePath = import_path6.default.join(PROJECT_SOURCE, relativePath);
    const targetFilePath = import_path6.default.join(TARGET_SOURCE, relativePath);
    const existInProject = yield import_fs_extra.default.pathExists(projectFilePath);
    if (existInProject)
      return;
    if (event === "add" || event === "change") {
      yield import_fs_extra.default.copy(filePath, targetFilePath);
    }
    if (event === "unlink") {
      yield import_fs_extra.default.remove(targetFilePath);
    }
  });
}
function onProjectFilesChanged(_0) {
  return __async(this, arguments, function* ({
    event,
    filePath,
    TARGET_SOURCE,
    THEME_SOURCE,
    PROJECT_SOURCE
  }) {
    const relativePath = filePath.replace(PROJECT_SOURCE, "");
    const targetFilePath = import_path6.default.join(TARGET_SOURCE, relativePath);
    if (event === "add" || event === "change") {
      yield import_fs_extra.default.copy(filePath, targetFilePath);
    }
    if (event === "unlink") {
      const baseThemeFilePath = import_path6.default.join(THEME_SOURCE, relativePath);
      const existInTheme = yield import_fs_extra.default.pathExists(baseThemeFilePath);
      if (existInTheme) {
        yield import_fs_extra.default.copy(baseThemeFilePath, targetFilePath);
      } else {
        yield import_fs_extra.default.remove(targetFilePath);
      }
    }
  });
}

// packages/nuxt-module/src/module.ts
var import_chokidar = __toModule(require("chokidar"));
var import_composables = __toModule(require("@shopware-pwa/composables"));
var import_merge2 = __toModule(require("lodash/merge"));
var import_fs_extra2 = __toModule(require("fs-extra"));
function runModule(moduleObject, moduleOptions) {
  return __async(this, null, function* () {
    var _a;
    const shopwarePwaConfig = yield loadConfig(moduleObject);
    if (!shopwarePwaConfig.shopwareAccessToken)
      console.error("shopwareAccessToken in shopware-pwa.config.js is missing");
    if (!shopwarePwaConfig.shopwareEndpoint)
      console.error("shopwareEndpoint in shopware-pwa.config.js is missing");
    const TARGET_SOURCE = getTargetSourcePath(moduleObject);
    const THEME_SOURCE = getThemeSourcePath(moduleObject, shopwarePwaConfig);
    console.info(`Using theme: ${shopwarePwaConfig.theme}`);
    shopwarePwaConfig.theme = THEME_SOURCE;
    const PROJECT_SOURCE = getProjectSourcePath(moduleObject);
    moduleObject.options.srcDir = TARGET_SOURCE;
    moduleObject.options.store = false;
    moduleObject.options.features.store = false;
    moduleObject.options.alias = moduleObject.options.alias || {};
    moduleObject.options.alias["~"] = TARGET_SOURCE;
    moduleObject.options.alias["@"] = TARGET_SOURCE;
    moduleObject.options.alias["assets"] = import_path7.default.join(TARGET_SOURCE, "assets");
    moduleObject.options.alias["static"] = import_path7.default.join(TARGET_SOURCE, "static");
    moduleObject.options.alias["@theme"] = THEME_SOURCE;
    yield useThemeAndProjectFiles({
      TARGET_SOURCE,
      PROJECT_SOURCE,
      THEME_SOURCE
    });
    if ((_a = shopwarePwaConfig.shopwareEndpoint) == null ? void 0 : _a.includes("/sales-channel-api/v1")) {
      console.error("Please change your shopwareEndpoint in shopware-pwa.config.js to contain just domain, example: https://github.com/DivanteLtd/shopware-pwa#running-shopware-pwa-on-custom-shopware-instance");
    }
    yield setupDomains(moduleObject, shopwarePwaConfig);
    moduleObject.addPlugin({
      src: import_path7.default.join(__dirname, "..", "plugins", "price-filter.js"),
      fileName: "price-filter.js",
      options: moduleOptions
    });
    moduleObject.addPlugin({
      src: import_path7.default.join(__dirname, "..", "plugins", "entities-parser", "entities-parser.csr.js"),
      fileName: "entities-parser.csr.js",
      mode: "client",
      options: moduleOptions
    });
    moduleObject.addPlugin({
      src: import_path7.default.join(__dirname, "..", "plugins", "entities-parser", "entities-parser.ssr.js"),
      fileName: "entities-parser.ssr.js",
      mode: "server",
      options: {}
    });
    const pluginFiles = getAllFiles(import_path7.default.join(moduleObject.options.srcDir, "plugins")).filter((filePath) => /.+.(js)$/.test(filePath));
    pluginFiles.forEach((pluginPath) => {
      const pluginFilename = pluginPath.replace(/^.*[\\\/]/, "");
      moduleObject.addPlugin({
        src: pluginPath,
        fileName: pluginFilename,
        options: moduleOptions
      });
    });
    extendLocales(moduleObject, shopwarePwaConfig);
    moduleObject.addPlugin({
      fileName: "api-client.js",
      src: import_path7.default.join(__dirname, "..", "plugins", "api-client.js"),
      options: {
        shopwareEndpoint: shopwarePwaConfig.shopwareEndpoint,
        shopwareAccessToken: shopwarePwaConfig.shopwareAccessToken,
        shopwareApiClient: shopwarePwaConfig.shopwareApiClient
      }
    });
    moduleObject.addPlugin({
      fileName: "api-defaults.js",
      src: import_path7.default.join(__dirname, "..", "plugins", "api-defaults.js"),
      options: {
        apiDefaults: (0, import_merge2.default)({}, (0, import_composables.getDefaultApiParams)(), shopwarePwaConfig.apiDefaults)
      }
    });
    const defaults = {
      alias: "cookies",
      parseJSON: true
    };
    moduleObject.addPlugin({
      src: import_path7.default.join(__dirname, "..", "plugins", "cookie-universal-nuxt.js"),
      fileName: "cookie-universal-nuxt.js",
      options: Object.assign({}, defaults, moduleOptions)
    });
    moduleObject.addPlugin({
      src: import_path7.default.join(__dirname, "..", "plugins", "composition-api.js"),
      fileName: "composition-api.js",
      options: moduleOptions
    });
    moduleObject.extendBuild((config) => {
      config.resolve.alias["@vue/composition-api"] = import_path7.default.resolve("node_modules/@vue/composition-api");
    });
    moduleObject.extendBuild((config, ctx) => {
      const swPluginsDirectory = import_path7.default.join(moduleObject.options.rootDir, ".shopware-pwa", "sw-plugins");
      config.resolve.alias["sw-plugins"] = swPluginsDirectory;
      if (ctx.isClient && !ctx.isDev) {
        config.optimization.splitChunks.cacheGroups.commons.minChunks = 2;
      }
    });
    extendCMS(moduleObject, shopwarePwaConfig);
    moduleObject.options.build = moduleObject.options.build || {};
    moduleObject.options.build.babel = moduleObject.options.build.babel || {};
    moduleObject.options.build.babel.presets = ({ isServer }) => {
      return [
        [
          import_path7.default.join(moduleObject.options.rootDir, "node_modules", "@nuxt", "babel-preset-app"),
          {
            buildTarget: isServer ? "server" : "client",
            corejs: { version: 3 }
          }
        ]
      ];
    };
    moduleObject.options.build.filenames = moduleObject.options.build.filenames || {};
    moduleObject.options.build.filenames.chunk = ({ isDev }) => isDev ? "[name].js" : "[id].[contenthash].js";
    const corePackages = [
      "@shopware-pwa/composables",
      "@shopware-pwa/helpers",
      "@shopware-pwa/shopware-6-client",
      "@storefront-ui/vue",
      "@storefront-ui/shared"
    ];
    useCorePackages(moduleObject, corePackages);
    moduleObject.options.alias["@shopware-pwa/default-theme"] = TARGET_SOURCE;
    moduleObject.options.build.transpile = moduleObject.options.build.transpile || [];
    moduleObject.options.build.transpile.push("@shopware-pwa/default-theme");
    if (moduleObject.options.dev) {
      import_chokidar.default.watch([THEME_SOURCE], {
        ignored: `${THEME_SOURCE}/node_modules/**/*`,
        ignoreInitial: true,
        followSymlinks: true
      }).on("all", (event, filePath) => onThemeFilesChanged({
        event,
        filePath,
        TARGET_SOURCE,
        PROJECT_SOURCE,
        THEME_SOURCE
      }));
      import_chokidar.default.watch([PROJECT_SOURCE], {
        ignoreInitial: true
      }).on("all", (event, filePath) => onProjectFilesChanged({
        event,
        filePath,
        TARGET_SOURCE,
        PROJECT_SOURCE,
        THEME_SOURCE
      }));
    }
    if (!moduleObject.options.dev) {
      moduleObject.nuxt.hook("build:done", (builder) => __async(this, null, function* () {
        const sourceDir = import_path7.default.join(TARGET_SOURCE, "static");
        const destinationDir = import_path7.default.join(builder.options.rootDir, "static");
        yield import_fs_extra2.default.copy(sourceDir, destinationDir);
        console.info("Moved static files to root directory static folder. Make sure your static files are placed inside `src/static` directory.");
      }));
    }
  });
}

// packages/nuxt-module/src/index.ts
var ShopwarePWAModule = function(moduleOptions) {
  return __async(this, null, function* () {
    const moduleObject = this;
    yield runModule(moduleObject, moduleOptions);
  });
};
var src_default = ShopwarePWAModule;
