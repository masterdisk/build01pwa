import { AddressType } from '@shopware-pwa/commons/interfaces/models/checkout/customer/CustomerAddress';
import { ApplicationVueContext as ApplicationVueContext_2 } from '@shopware-pwa/composables';
import { Association } from '@shopware-pwa/commons/interfaces/search/Association';
import { BillingAddress } from '@shopware-pwa/commons/interfaces/models/checkout/customer/BillingAddress';
import { Breadcrumb } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { Cart } from '@shopware-pwa/commons/interfaces/models/checkout/cart/Cart';
import { CmsPage } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { ComputedRef } from '@vue/composition-api';
import { Country } from '@shopware-pwa/commons/interfaces/models/system/country/Country';
import { CrossSelling } from '@shopware-pwa/commons/interfaces/models/content/product/Product';
import { Currency } from '@shopware-pwa/commons/interfaces/models/system/currency/Currency';
import { Customer } from '@shopware-pwa/commons/interfaces/models/checkout/customer/Customer';
import { CustomerAddress } from '@shopware-pwa/commons/interfaces/models/checkout/customer/CustomerAddress';
import { CustomerRegistrationParams } from '@shopware-pwa/commons/interfaces/request/CustomerRegistrationParams';
import { CustomerResetPasswordParam } from '@shopware-pwa/shopware-6-client';
import { CustomerUpdateEmailParam } from '@shopware-pwa/shopware-6-client';
import { CustomerUpdatePasswordParam } from '@shopware-pwa/shopware-6-client';
import { CustomerUpdateProfileParam } from '@shopware-pwa/shopware-6-client';
import { EntityError } from '@shopware-pwa/commons/interfaces/models/common/EntityError';
import { Includes } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { IUseListing as IUseListing_2 } from '@shopware-pwa/composables';
import { LineItem } from '@shopware-pwa/commons/interfaces/models/checkout/cart/line-item/LineItem';
import { ListingFilter } from '@shopware-pwa/helpers';
import { ListingResult } from '@shopware-pwa/commons/interfaces/response/ListingResult';
import { Order } from '@shopware-pwa/commons/interfaces/models/checkout/order/Order';
import { PageBreadcrumb } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PageResolverProductResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PageResolverResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PaymentMethod } from '@shopware-pwa/commons/interfaces/models/checkout/payment/PaymentMethod';
import { Product } from '@shopware-pwa/commons/interfaces/models/content/product/Product';
import { PropertyGroup } from '@shopware-pwa/commons/interfaces/models/content/property/PropertyGroup';
import { Ref } from '@vue/composition-api';
import { Salutation } from '@shopware-pwa/commons/interfaces/models/system/salutation/Salutation';
import { SessionContext } from '@shopware-pwa/commons/interfaces/response/SessionContext';
import { ShippingAddress } from '@shopware-pwa/commons/interfaces/models/checkout/customer/ShippingAddress';
import { ShippingMethod } from '@shopware-pwa/commons/interfaces/models/checkout/shipping/ShippingMethod';
import { ShopwareApiInstance } from '@shopware-pwa/shopware-6-client';
import { ShopwareSearchParams } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { Sort } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { StoreNavigationElement } from '@shopware-pwa/commons/interfaces/models/content/navigation/Navigation';
import { StoreNavigationType } from '@shopware-pwa/commons/interfaces/models/content/navigation/Navigation';
import { UnwrapRef } from '@vue/composition-api';
import { VueConstructor } from 'vue';
import { WritableComputedRef } from '@vue/composition-api';

/**
 * Application Context for Shopware PWA. It's an extended Vue instance.
 *
 * @beta
 */
export declare interface ApplicationVueContext extends VueConstructor {
    $shopwareApiInstance?: ShopwareApiInstance;
    shopwareApiInstance?: ShopwareApiInstance;
    $routing: Routing;
    routing: Routing;
    $store?: any;
    store?: any;
    $route?: any;
    $router?: any;
    router?: any;
    route?: any;
    $i18n?: any;
    i18n?: any;
    $cookies?: any;
    cookies?: any;
    shopwareDefaults?: any;
    $shopwareDefaults?: any;
    $interceptors?: any;
    interceptors?: any;
    $sharedStore?: any;
    sharedStore?: any;
    $instanceStore?: any;
    instanceStore?: any;
    $isServer?: any;
    isServer?: any;
}

/**
 * Factory to create your own listing. By default you can use useListing composable, which provides you predefined listings for category(cms) listing and product search listing.
 * Using factory you can provide our own compatible search method and use it for example for creating listing of orders in my account.
 *
 * @beta
 */
export declare function createListingComposable<ELEMENTS_TYPE>({ rootContext, searchMethod, searchDefaults, listingKey, }: {
    rootContext: ApplicationVueContext_2;
    searchMethod: (searchParams: Partial<ShopwareSearchParams>) => Promise<ListingResult<ELEMENTS_TYPE>>;
    searchDefaults: ShopwareSearchParams;
    listingKey: string;
}): IUseListing<ELEMENTS_TYPE>;

/**
 *
 * @beta
 */
export declare function getApplicationContext(rootContext: ApplicationVueContext, key?: string): {
    apiInstance: ShopwareApiInstance | undefined;
    vuexStore: any;
    router: any;
    route: any;
    i18n: any;
    cookies: any;
    shopwareDefaults: any;
    interceptors: any;
    routing: Routing;
    sharedStore: any;
    instanceStore: any;
    isServer: boolean;
    contextName: string;
};

/**
 * Returns default system API params
 *
 * @beta
 */
export declare function getDefaultApiParams(): {
    [composableName: string]: ShopwareSearchParams;
};

/**
 * interface for the callback function of interceptors
 * @beta
 */
export declare interface IInterceptorCallbackFunction {
    (payload: any, rootContext?: ApplicationVueContext_2): void;
}

/**
 * Keys used accross composables with the description of incommint parameters.
 *
 * @beta
 */
export declare const INTERCEPTOR_KEYS: {
    /**
     * Broadcasted by useAddToCart composable on successful addToCart method invocation.
     * As a parameter passes product added to cart and quantity.
     */
    ADD_TO_CART: string;
    /**
     * Broadcasted by useWishlist composable on successful addToWishlist method invocation.
     * As a parameter passes:
     * - product object
     */
    ADD_TO_WISHLIST: string;
    /**
     * Broadcasted by useCart composable on successful submitPromotionCode method invocation.
     * As a parameter passes used promotion code and response result.
     */
    ADD_PROMOTION_CODE: string;
    /**
     * Broadcasted through application in case of important error.
     * Can be used to connect to external service collectiong logs.
     * As a parameter passes:
     * - methodName - string - method where error occured
     * - inputParams - Object - input params of the method
     * - error - string - message of the error
     */
    ERROR: string;
    /**
     * Broadcasted through application in case of relevant warning.
     * Can be used to inform end-user about current request's problems.
     * As a parameter passes:
     * - methodName - string - method where error occured
     * - inputParams - Object - input params of the method
     * - warning - Object - error object with specific message, like CartError object
     */
    WARNING: string;
    /**
     * Broadcasted through application in case of relevant notice message.
     * Can be used to inform end-user about current request's problems.
     * As a parameter passes:
     * - methodName - string - method where error occured
     * - inputParams - Object - input params of the method
     * - notice - Object - error object with specific message, like CartError object
     */
    NOTICE: string;
    /**
     * Broadcasted by useCheckout, createOrder method.
     * As a parameter passes:
     * - order object
     */
    ORDER_PLACE: string;
    /**
     * Broadcasted by useSessionContext, setCurrency method.
     * As a parameter passes:
     * - currency object
     */
    SESSION_SET_CURRENCY: string;
    /**
     * Broadcasted by useSessionContext, setPaymentMethod method.
     * As a parameter passes:
     * - payment method object
     */
    SESSION_SET_PAYMENT_METHOD: string;
    /**
     * Broadcasted by useSessionContext, setShippingMethod method.
     * As a parameter passes:
     * - shipping method object
     */
    SESSION_SET_SHIPPING_METHOD: string;
    /**
     * Broadcasted after user is logged out.
     * Contains no params.
     */
    USER_LOGOUT: string;
    /**
     * Broadcasted after user is logged in.
     * As a parameter passes:
     * - customer object
     */
    USER_LOGIN: string;
    /**
     * Broadcasted after user is successfully registered.
     */
    USER_REGISTER: string;
};

/**
 * interface for {@link useAddToCart} composable
 * @beta
 */
export declare interface IUseAddToCart {
    /**
     * Add to cart method
     */
    addToCart: () => Promise<void>;
    /**
     * If you want to add more that 1 product set quantity before invoking `addToCart`
     */
    quantity: Ref<number>;
    /**
     * Adding to cart is in progress
     */
    loading: Ref<boolean>;
    /**
     * Error message when adding to cart was not successful
     */
    error: Ref<string>;
    /**
     * Returns product count in stock
     */
    getStock: Ref<number | null>;
    /**
     * Returns product count in available stock
     */
    getAvailableStock: Ref<number | null>;
    /**
     * Flag if product is already in cart
     */
    isInCart: Ref<boolean>;
    /**
     * React on product added to cart
     */
    onAddToCart: (fn: (params: {
        product: Product;
        quantity: Number;
    }) => void) => void;
}

/**
 * interface for {@link useCart} composable
 *
 * @beta
 */
export declare interface IUseCart {
    addProduct: ({ id, quantity, }: {
        id: string;
        quantity?: number;
    }) => Promise<void>;
    addPromotionCode: (promotionCode: string) => Promise<void>;
    appliedPromotionCodes: ComputedRef<LineItem[]>;
    cart: ComputedRef<Cart | null>;
    cartItems: ComputedRef<LineItem[]>;
    changeProductQuantity: ({ id, quantity, }: {
        id: string;
        quantity: number;
    }) => void;
    count: ComputedRef<number>;
    error: ComputedRef<string>;
    loading: ComputedRef<boolean>;
    refreshCart: () => void;
    removeItem: ({ id }: LineItem) => Promise<void>;
    /**
     * @deprecated use removeItem method instead
     */
    removeProduct: ({ id }: Partial<Product>) => void;
    totalPrice: ComputedRef<number>;
    shippingTotal: ComputedRef<number>;
    subtotal: ComputedRef<number>;
    cartErrors: ComputedRef<EntityError[]>;
}

/**
 * interface for {@link useCheckout} composable
 *
 * @beta
 */
export declare interface IUseCheckout {
    getShippingMethods: (options?: {
        forceReload: boolean;
    }) => Promise<ComputedRef<ShippingMethod[]>>;
    shippingMethods: ComputedRef<ShippingMethod[]>;
    getPaymentMethods: (options?: {
        forceReload: boolean;
    }) => Promise<ComputedRef<PaymentMethod[]>>;
    paymentMethods: ComputedRef<PaymentMethod[]>;
    createOrder: () => Promise<Order>;
    shippingAddress: ComputedRef<ShippingAddress | undefined>;
    billingAddress: ComputedRef<Partial<BillingAddress> | undefined>;
    onOrderPlace: (fn: (params: {
        order: Order;
    }) => void) => void;
    loadings: UnwrapRef<{
        createOrder: boolean;
    }>;
}

/**
 * interface for {@link useIntercept} composable
 * @beta
 */
export declare interface IUseIntercept {
    /**
     * Broadcast new event
     */
    broadcast: (broadcastKey: string, value?: any) => void;
    /**
     * Intercept broadcasted event
     */
    intercept: (broadcastKey: string, method: IInterceptorCallbackFunction) => void;
    /**
     * Stop listening on event
     */
    disconnect: (broadcastKey: string, method: IInterceptorCallbackFunction) => void;
}

/**
 * Listing interface, can be used to display category products, search products or any other Shopware search interface (ex. orders with pagination)
 *
 * @beta
 */
export declare interface IUseListing<ELEMENTS_TYPE> {
    getInitialListing: ComputedRef<ListingResult<ELEMENTS_TYPE> | null>;
    setInitialListing: (initialListing: Partial<ListingResult<ELEMENTS_TYPE>>) => void;
    initSearch: (criteria: Partial<ShopwareSearchParams>) => Promise<void>;
    search: (criteria: Partial<ShopwareSearchParams>, options?: {
        preventRouteChange?: boolean;
    }) => Promise<void>;
    loadMore: () => Promise<void>;
    getCurrentListing: ComputedRef<Partial<ListingResult<ELEMENTS_TYPE>> | null>;
    getElements: ComputedRef<ELEMENTS_TYPE[]>;
    getSortingOrders: ComputedRef<Sort[] | {
        key: string;
        label: string;
    }>;
    getCurrentSortingOrder: ComputedRef<string | undefined>;
    changeCurrentSortingOrder: (order: string | string[]) => Promise<void>;
    getCurrentPage: ComputedRef<string | number>;
    changeCurrentPage: (pageNumber?: number | string) => Promise<void>;
    getTotal: ComputedRef<number>;
    getTotalPagesCount: ComputedRef<number>;
    getLimit: ComputedRef<number>;
    getAvailableFilters: ComputedRef<ListingFilter[]>;
    getCurrentFilters: ComputedRef<any>;
    loading: ComputedRef<boolean>;
    loadingMore: ComputedRef<boolean>;
}

/**
 * interface for {@link useNavigation} composable
 *
 * Provides state for navigation trees depending on navigation type.
 *
 * @beta
 */
export declare interface IUseNavigation {
    navigationElements: ComputedRef<StoreNavigationElement[] | null>;
    /**
     * @deprecated use loadNavigationElements instead. Remove after v0.8
     */
    fetchNavigationElements: (depth: number) => Promise<void>;
    /**
     * Load navigation elements
     */
    loadNavigationElements: (params: {
        depth: number;
    }) => Promise<void>;
}

/**
 * interface for {@link IUseProductAssociations} composable
 * @beta
 */
export declare interface IUseProductAssociations {
    /**
     * Start loading resources
     */
    loadAssociations: (params: {
        params: unknown;
        method: "post" | "get";
    }) => Promise<void>;
    /**
     * If it's loading - indicator
     */
    isLoading: ComputedRef<boolean>;
    productAssociations: ComputedRef<CrossSelling[]>;
}

/**
 * interface for {@link useProductConfigurator} composable
 * @beta
 */
export declare interface IUseProductConfigurator {
    /**
     * Handler for action when the selected option is changed
     */
    handleChange: (attribute: string, option: string, onChangeHandled?: Function) => Promise<void>;
    findVariantForSelectedOptions: (options?: {
        [key: string]: string;
    }) => Promise<void>;
    /**
     * Indicates if the options are being (re)loaded
     */
    isLoadingOptions: Ref<boolean>;
    /**
     * Object of currently selected options
     */
    getSelectedOptions: Ref<{
        [key: string]: string;
    }>;
    /**
     * All assigned properties which the variant can be made of
     */
    getOptionGroups: Ref<PropertyGroup[]>;
}

/**
 * @beta
 */
export declare interface IUseProductQuickSearch {
    searchTerm: Ref<string>;
    loading: ComputedRef<boolean>;
    search: (additionalCriteria?: Partial<ShopwareSearchParams>) => Promise<void>;
    loadMore: () => Promise<void>;
    getProducts: ComputedRef<Product[]>;
    getTotal: ComputedRef<number>;
}

/**
 * interface for {@link useSessionContext} composable
 *
 * @remarks
 * SessionContext contain all related data like user, currency, country, shippingMethod, paymentMethod etc.
 *
 * @beta
 */
export declare interface IUseSessionContext {
    sessionContext: ComputedRef<SessionContext | null>;
    refreshSessionContext: () => Promise<void>;
    shippingMethod: ComputedRef<ShippingMethod | null>;
    setShippingMethod: (shippingMethod: Partial<ShippingMethod>) => Promise<void>;
    paymentMethod: ComputedRef<PaymentMethod | null>;
    setPaymentMethod: (paymentMethod: Partial<PaymentMethod>) => Promise<void>;
    currency: ComputedRef<Currency | null>;
    setCurrency: (currency: Partial<Currency>) => Promise<void>;
    activeShippingAddress: ComputedRef<ShippingAddress | null>;
    setActiveShippingAddress: (address: Partial<ShippingAddress>) => Promise<void>;
    activeBillingAddress: ComputedRef<BillingAddress | null>;
    setActiveBillingAddress: (address: Partial<BillingAddress>) => Promise<void>;
    countryId: ComputedRef<string | undefined>;
    onCurrencyChange: (fn: (params: {
        currency: Currency;
    }) => void) => void;
    onPaymentMethodChange: (fn: (params: {
        paymentMethod: PaymentMethod;
    }) => void) => void;
    onShippingMethodChange: (fn: (params: {
        shippingMethod: ShippingMethod;
    }) => void) => void;
}

/**
 * interface for {@link useUser} composable
 *
 * @beta
 */
export declare interface IUseUser {
    login: ({ username, password, }: {
        username?: string;
        password?: string;
    }) => Promise<boolean>;
    register: ({}: CustomerRegistrationParams) => Promise<boolean>;
    user: ComputedRef<Partial<Customer> | null>;
    orders: Ref<Order[] | null>;
    addresses: Ref<CustomerAddress[] | null>;
    loading: Ref<boolean>;
    error: Ref<any>;
    errors: UnwrapRef<{
        login: string;
        register: string[];
    }>;
    isLoggedIn: ComputedRef<boolean>;
    isCustomerSession: ComputedRef<boolean>;
    isGuestSession: ComputedRef<boolean>;
    country: Ref<Country | null>;
    salutation: Ref<Salutation | null>;
    refreshUser: () => Promise<void>;
    logout: () => Promise<void>;
    loadOrders: () => Promise<void>;
    getOrderDetails: (orderId: string) => Promise<Order | undefined>;
    loadAddresses: () => Promise<void>;
    loadCountry: (countryId: string) => Promise<void>;
    loadSalutation: (salutationId: string) => Promise<void>;
    addAddress: (params: Partial<CustomerAddress>) => Promise<string | undefined>;
    updateAddress: (params: Partial<CustomerAddress>) => Promise<string | undefined>;
    deleteAddress: (addressId: string) => Promise<boolean>;
    updatePersonalInfo: (personals: CustomerUpdateProfileParam) => Promise<boolean>;
    updateEmail: (updateEmailData: CustomerUpdateEmailParam) => Promise<boolean>;
    updatePassword: (updatePasswordData: CustomerUpdatePasswordParam) => Promise<boolean>;
    resetPassword: (resetPasswordData: CustomerResetPasswordParam) => Promise<boolean>;
    markAddressAsDefault: ({ addressId, type, }: {
        addressId?: string;
        type?: AddressType;
    }) => Promise<string | boolean>;
    /**
     * React on user logout
     */
    onLogout: (fn: () => void) => void;
    onUserLogin: (fn: (params: {
        customer: Customer;
    }) => void) => void;
    onUserRegister: (fn: () => void) => void;
}

/**
 * interface for {@link useWishlist} composable
 * @beta
 */
export declare interface IUseWishlist {
    removeFromWishlist: (id: string) => void;
    clearWishlist: () => void;
    addToWishlist: () => void;
    onAddToWishlist: (fn: (params: {
        product: Product;
    }) => void) => void;
    isInWishlist: Ref<boolean>;
    items: Ref<string[]>;
    count: Ref<number>;
}

/**
 * @beta
 */
export declare type listingKey = "productSearchListing" | "categoryListing";

/**
 * @beta
 */
declare interface Notification_2 {
    type: "info" | "warning" | "success" | "danger";
    message: string;
    id?: number;
}
export { Notification_2 as Notification }

/**
 * @beta
 */
export declare interface Routing {
    availableDomains: any;
    fallbackDomain: string | undefined;
    fallbackLocale: string | undefined;
    pwaHost: string | undefined;
    getCurrentDomain: ComputedRef<string>;
    setCurrentDomain: (domainData: any) => void;
    getUrl: (path: string) => string;
}

/**
 * @beta
 */
export declare type Search = (path: string, associations?: any) => any;

/**
 * Add product to cart. Options - {@link IUseAddToCart}
 *
 * @example
 * Example of possibilities:
 *
 * ```ts
 * const {isInCart, quantity, addToCart} = useAddToCart(root, product)
 * if (!isInCart.value) {
 *    quantity.value = 5
 *    await addToCart()
 * }
 * ```
 * @beta
 */
export declare const useAddToCart: (rootContext: ApplicationVueContext, product: Product) => IUseAddToCart;

/**
 * Composable for displaying and setting breadcrumbs for page.
 *
 * @beta
 */
export declare function useBreadcrumbs(rootContext: ApplicationVueContext, params?: {
    /**
     * Define if you want to show/hide link to Home in breadcrumbs.
     *
     * By default we show Home link.
     */
    hideHomeLink: boolean;
}): {
    breadcrumbs: ComputedRef<Breadcrumb[]>;
    setBreadcrumbs: (breadcrumbs: Breadcrumb[]) => void;
    clear: () => void;
};

/**
 * Composable for cart management. Options - {@link IUseCart}
 *
 * @beta
 */
export declare const useCart: (rootContext: ApplicationVueContext) => IUseCart;

/**
 * @beta
 * @deprecated please see useListing instead
 */
export declare const useCategoryFilters: (rootContext: ApplicationVueContext) => any;

/**
 * Composable for Checkout management. Options - {@link IUseCheckout}
 *
 * @beta
 */
export declare const useCheckout: (rootContext: ApplicationVueContext) => IUseCheckout;

/**
 * @beta
 */
export declare function useCms(rootContext: ApplicationVueContext): {
    page: ComputedRef<PageResolverProductResult | PageResolverResult<CmsPage> | null>;
    categoryId: ComputedRef<string | null>;
    loading: Ref<boolean>;
    search: (path: string, query?: any) => Promise<void>;
    error: Ref<any>;
    /**
     * @deprecated use useBreadcrumbs instead. Remove after v0.8
     */
    getBreadcrumbsObject: ComputedRef<PageBreadcrumb>;
};

/**
 * @beta
 */
export declare interface UseCountries {
    mountedCallback: () => Promise<void>;
    getCountries: ComputedRef<Country[]>;
    fetchCountries: () => Promise<void>;
    error: Ref<any>;
}

/**
 * @beta
 */
export declare const useCountries: (rootContext: ApplicationVueContext) => UseCountries;

/**
 * @beta
 */
export declare interface UseCountry {
    currentCountry: ComputedRef<Country | null>;
    displayState: ComputedRef<boolean>;
    forceState: ComputedRef<boolean>;
}

/**
 * @beta
 */
export declare const useCountry: (countryId: ComputedRef<string>, countries: ComputedRef<Country[]>) => UseCountry;

/**
 * @beta
 */
export declare interface UseCurrency {
    loadAvailableCurrencies: (options?: {
        forceReload: boolean;
    }) => Promise<void>;
    setCurrency: (parameter: Partial<Currency>) => Promise<void>;
    availableCurrencies: ComputedRef<Currency[]>;
    currency: ComputedRef<Currency | null>;
    currencySymbol: ComputedRef<string>;
}

/**
 * @beta
 */
export declare const useCurrency: (rootContext: ApplicationVueContext) => UseCurrency;

/**
 * Returns default config depending on config key.
 * It is used in composables, so defaultsKey is in most cases composable name (ex. `useDefaults(rootContext, "useCms")`)
 *
 * @remarks
 * To extend defaults you need to add configuration to `shopware-pwa.config.js` file.
 * Let's say we want to have a product manufacturer, media associations and listing limit on CMS pages. We need to add to configuration file:
 * ```js
 * // inside shopware-pwa.config.js
 *
 * module.exports = {
 *   // ... other settings
 *   apiDefaults: {
 *    useCms: {
 *      limit: 8,
 *      includes: {
 *        product: ["manufacturer"]
 *      },
 *      associations: [
 *        { name: "media" }
 *      ]
 *    },
 *   },
 * }
 * ```
 * We need to remember the structure of includes and associations. You can read more about this {@link https://docs.shopware.com/en/shopware-platform-dev-en/admin-api-guide/reading-entities?category=shopware-platform-dev-en/admin-api-guide#parameter-overview | in shopware docs}.
 *
 * @beta
 */
export declare const useDefaults: (rootContext: ApplicationVueContext, defaultsKey: string) => {
    getIncludesConfig: () => Includes;
    getAssociationsConfig: () => Association[];
    getDefaults: () => ShopwareSearchParams;
};

/**
 * Allows to broadcast and intercept events across application.
 *
 * @beta
 */
export declare const useIntercept: (rootContext: ApplicationVueContext_2) => IUseIntercept;

/**
 * @beta
 */
export declare const useListing: (rootContext: ApplicationVueContext_2, listingKey?: listingKey) => IUseListing_2<Product>;

/**
 * Composable for navigation. Options - {@link IUseNavigation}
 *
 * @example
 * ```
 * // get main navigation
 * useNavigation( root )
 * // get footer navigation
 * useNavigation( root, { type: "footer-navigation" } )
 * ```
 *
 * @beta
 */
export declare const useNavigation: (rootContext: ApplicationVueContext, params?: {
    type: StoreNavigationType;
}) => IUseNavigation;

/**
 * @beta
 */
export declare const useNotifications: (rootContext: ApplicationVueContext) => {
    notifications: ComputedRef<Notification_2[]>;
    removeOne: (id: number) => void;
    removeAll: () => void;
    pushInfo: (message: string, options?: any) => void;
    pushWarning: (message: string, options?: any) => void;
    pushError: (message: string, options?: any) => void;
    pushSuccess: (message: string, options?: any) => void;
};

/**
 * @beta
 */
export declare interface UseProduct<PRODUCT, SEARCH> {
    product: Ref<PRODUCT>;
    search: SEARCH;
    loading: Ref<boolean>;
    error: Ref<any>;
    [x: string]: any;
}

/**
 * @beta
 */
export declare const useProduct: (rootContext: ApplicationVueContext, loadedProduct?: any) => UseProduct<Product, Search>;

/**
 * Get product association entity. Options - {@link IUseProductAssociations}
 *
 * @example
 * Example of possibilities:
 *
 * ```ts
 * const { loading, loadAssociations, productAssociations } = useProductAssociation(root, product, "cross-selling")
 * if (!productAssociations.value) {
 *    await loadAssociations()
 * }
 * ```
 * @beta
 */
export declare function useProductAssociations(rootContext: ApplicationVueContext, product: Product, association: "cross-selling" | "reviews"): IUseProductAssociations;

/**
 * Product options - {@link IUseAddToCart}
 * @beta
 */
export declare const useProductConfigurator: (rootContext: ApplicationVueContext, product: Product) => IUseProductConfigurator;

/**
 * @beta
 */
export declare const useProductQuickSearch: (rootContext: ApplicationVueContext_2) => IUseProductQuickSearch;

/**
 * @beta
 */
export declare interface UseSalutations {
    mountedCallback: () => Promise<void>;
    getSalutations: ComputedRef<Salutation[]>;
    fetchSalutations: () => Promise<void>;
    error: Ref<any>;
}

/**
 * @beta
 */
export declare const useSalutations: (rootContext: ApplicationVueContext) => UseSalutations;

/**
 * Composable for session management. Options - {@link IUseSessionContext}
 *
 * @beta
 */
export declare const useSessionContext: (rootContext: ApplicationVueContext) => IUseSessionContext;

/**
 * Replacement for Vuex. Composable, which enables you to use shared state in your application.
 * State is shared both on server and client side.
 *
 * @alpha
 */
export declare function useSharedState(rootContext: ApplicationVueContext): {
    sharedRef: <T>(uniqueKey: string) => WritableComputedRef<T | null>;
    preloadRef: (refObject: Ref<unknown>, callback: () => Promise<void>) => Promise<void>;
};

/**
 * Simple state management for UI purposes.
 *
 * @remarks
 * If you pase `stateName` on composable invocation (ex. `useUIState(root, 'sidebarCart')`), then
 * state is shared between all instances with this key.
 * Otherwise state is local, so multiple `useUIState(root)` will not share state
 *
 * @example
 * ```ts
 * // Component1
 * const {isOpen, switchState} = useUIState(root, 'SIDEBAR_STATE')
 * switchState()
 *
 * // Component 2
 * const {isOpen} = useUIState(root, 'SIDEBAR_STATE')
 * // isOpen will be true
 * ```
 *
 * If you'll not use KEY on composable init, then state is only local
 *
 * ```ts
 * // Component1
 * const {isOpen, switchState} = useUIState(root)
 * switchState()
 *
 * // Component 2
 * const {isOpen} = useUIState(root)
 * // isOpen will be false
 * ```
 *
 * @beta
 */
export declare const useUIState: (rootContext: ApplicationVueContext, stateName?: string | undefined) => {
    isOpen: ComputedRef<boolean>;
    switchState: (to?: boolean | undefined) => void;
};

/**
 * Composable for user management. Options - {@link IUseUser}
 *
 * @beta
 */
export declare const useUser: (rootContext: ApplicationVueContext) => IUseUser;

/**
 *
 * @beta
 */
export declare const useWishlist: (rootContext: ApplicationVueContext, product?: Product | undefined) => IUseWishlist;

export { }
