var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// packages/composables/src/index.ts
__export(exports, {
  INTERCEPTOR_KEYS: () => INTERCEPTOR_KEYS,
  createListingComposable: () => createListingComposable,
  getApplicationContext: () => getApplicationContext,
  getDefaultApiParams: () => getDefaultApiParams,
  useAddToCart: () => useAddToCart,
  useBreadcrumbs: () => useBreadcrumbs,
  useCart: () => useCart,
  useCategoryFilters: () => useCategoryFilters,
  useCheckout: () => useCheckout,
  useCms: () => useCms,
  useCountries: () => useCountries,
  useCountry: () => useCountry,
  useCurrency: () => useCurrency,
  useDefaults: () => useDefaults,
  useIntercept: () => useIntercept,
  useListing: () => useListing2,
  useNavigation: () => useNavigation,
  useNotifications: () => useNotifications,
  useProduct: () => useProduct,
  useProductAssociations: () => useProductAssociations,
  useProductConfigurator: () => useProductConfigurator,
  useProductQuickSearch: () => useProductQuickSearch2,
  useSalutations: () => useSalutations,
  useSessionContext: () => useSessionContext,
  useSharedState: () => useSharedState,
  useUIState: () => useUIState,
  useUser: () => useUser,
  useWishlist: () => useWishlist
});

// packages/composables/src/hooks/useCms/index.ts
var import_composition_api = __toModule(require("@vue/composition-api"));
var import_shopware_6_client = __toModule(require("@shopware-pwa/shopware-6-client"));
var import_helpers = __toModule(require("@shopware-pwa/helpers"));
var import_merge = __toModule(require("lodash/merge"));
function useCms(rootContext) {
  const { apiInstance, contextName } = getApplicationContext(rootContext, "useCms");
  const { sharedRef } = useSharedState(rootContext);
  const _storePage = sharedRef(`${contextName}-page`);
  const { getDefaults } = useDefaults(rootContext, "useCms");
  const { setBreadcrumbs } = useBreadcrumbs(rootContext);
  const error = (0, import_composition_api.ref)(null);
  const loading = (0, import_composition_api.ref)(false);
  const page = (0, import_composition_api.computed)(() => _storePage.value);
  const categoryId = (0, import_composition_api.computed)(() => {
    return page.value && page.value.resourceIdentifier;
  });
  (0, import_composition_api.watch)(page, (pageValue) => {
    setBreadcrumbs(Object.values((pageValue == null ? void 0 : pageValue.breadcrumb) || []));
  }, { immediate: true });
  const search = (path, query) => __async(this, null, function* () {
    loading.value = true;
    const criteria = (0, import_helpers.parseUrlQuery)(query);
    const searchCriteria = (0, import_merge.default)({}, getDefaults(), criteria);
    try {
      const result = yield (0, import_shopware_6_client.getCmsPage)(path, searchCriteria, apiInstance);
      _storePage.value = result;
    } catch (e) {
      const err = e;
      error.value = err;
    } finally {
      loading.value = false;
    }
  });
  return {
    page,
    categoryId,
    loading,
    search,
    error,
    getBreadcrumbsObject: (0, import_composition_api.computed)(() => page.value && page.value.breadcrumb || {})
  };
}

// packages/composables/src/hooks/useProduct/index.ts
var import_composition_api3 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client2 = __toModule(require("@shopware-pwa/shopware-6-client"));

// packages/composables/src/appContext.ts
var import_composition_api2 = __toModule(require("@vue/composition-api"));
function checkAppContext(key, rootContext) {
  if (!(rootContext == null ? void 0 : rootContext.$shopwareApiInstance) && !(rootContext == null ? void 0 : rootContext.shopwareApiInstance)) {
    console.warn(`[SECURITY][${key}] Trying to access Application context without Vue instance context. See https://shopware-pwa-docs.vuestorefront.io/landing/fundamentals/security.html#context-awareness`);
    return false;
  }
  if (rootContext.$store || rootContext.store) {
    console.warn(`[PERFORMANCE][${key}] Vuex store detected. Remove "store" directory and useSharedState instead.`);
  }
  return true;
}
function getApplicationContext(rootContext, key = "getApplicationContext") {
  let context = rootContext;
  if (!checkAppContext(key, rootContext)) {
    context = (0, import_composition_api2.getCurrentInstance)();
  }
  return {
    apiInstance: (context == null ? void 0 : context.$shopwareApiInstance) || (context == null ? void 0 : context.shopwareApiInstance),
    vuexStore: (context == null ? void 0 : context.$store) || (context == null ? void 0 : context.store),
    router: (context == null ? void 0 : context.$router) || (context == null ? void 0 : context.router),
    route: (context == null ? void 0 : context.$route) || (context == null ? void 0 : context.route),
    i18n: (context == null ? void 0 : context.$i18n) || (context == null ? void 0 : context.i18n),
    cookies: (context == null ? void 0 : context.$cookies) || (context == null ? void 0 : context.cookies),
    shopwareDefaults: (context == null ? void 0 : context.$shopwareDefaults) || (context == null ? void 0 : context.shopwareDefaults),
    interceptors: (context == null ? void 0 : context.$interceptors) || (context == null ? void 0 : context.interceptors) || {},
    routing: (context == null ? void 0 : context.$routing) || (context == null ? void 0 : context.routing),
    sharedStore: (context == null ? void 0 : context.$sharedStore) || (context == null ? void 0 : context.sharedStore),
    instanceStore: (context == null ? void 0 : context.$instanceStore) || (context == null ? void 0 : context.instanceStore),
    isServer: !!((context == null ? void 0 : context.$isServer) || (context == null ? void 0 : context.isServer) || (process == null ? void 0 : process.server)),
    contextName: key
  };
}

// packages/commons/src/deprecationWarning.ts
function deprecationWarning({
  methodName,
  newMethodName,
  packageName
}) {
  console.warn(`[DEPRECATED][@shopware-pwa/${packageName}][${methodName}] This method has been deprecated. Use "${newMethodName}" instead.`);
}

// packages/commons/src/warning.ts
function warning({
  packageName,
  methodName,
  notes
}) {
  console.warn(`[WARNING][@shopware-pwa/${packageName}][${methodName}]: ${notes}`);
}

// compatibility.json
var shopwareApiVersion = "6.4";
var instances = {
  "6.3": {
    domain: "https://pwa-demo-api.shopware.com/prev/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  "6.4": {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  },
  canary: {
    domain: "https://pwa-demo-api.shopware.com/trunk/",
    apiKey: "SWSC40-LJTNO6COUEN7CJMXKLA"
  }
};
var compatibility_default = {
  shopwareApiVersion,
  instances
};

// packages/commons/src/defaultConfig.ts
var import_merge2 = __toModule(require("lodash/merge"));
var import_axios = __toModule(require("axios"));
var defaultPwaConfigFile = {
  shopwareEndpoint: compatibility_default.instances[compatibility_default.shopwareApiVersion].domain,
  shopwareAccessToken: compatibility_default.instances[compatibility_default.shopwareApiVersion].apiKey,
  theme: "@shopware-pwa/default-theme",
  shopwareApiClient: {
    timeout: 1e4
  }
};

// packages/composables/src/logic/useDefaults.ts
var useDefaults = (rootContext, defaultsKey) => {
  const { shopwareDefaults } = getApplicationContext(rootContext, "useDefaults");
  if (!shopwareDefaults) {
    throw new Error("[composables][useDefaults]: applicationContext does not have shopwareDefaults!");
  }
  const getDefaultsFor = (keyName) => {
    if (!shopwareDefaults[keyName]) {
      warning({
        packageName: "composables",
        methodName: "useDefaults",
        notes: `there is no defaults configuration for key: ${keyName}`
      });
      return;
    }
    return shopwareDefaults[keyName];
  };
  const getIncludesConfig = () => {
    var _a;
    return ((_a = getDefaultsFor(defaultsKey)) == null ? void 0 : _a.includes) || {};
  };
  const getAssociationsConfig = () => {
    var _a;
    return ((_a = getDefaultsFor(defaultsKey)) == null ? void 0 : _a.associations) || [];
  };
  const getDefaults = () => getDefaultsFor(defaultsKey) || {};
  return {
    getIncludesConfig,
    getAssociationsConfig,
    getDefaults
  };
};

// packages/composables/src/hooks/useProduct/index.ts
var NO_PRODUCT_REFERENCE_ERROR = "Associations cannot be loaded for undefined product";
var useProduct = (rootContext, loadedProduct) => {
  const { apiInstance } = getApplicationContext(rootContext, "useProduct");
  const { getAssociationsConfig, getIncludesConfig } = useDefaults(rootContext, "useProduct");
  const loading = (0, import_composition_api3.ref)(false);
  const product = (0, import_composition_api3.ref)(loadedProduct);
  const error = (0, import_composition_api3.ref)(null);
  const loadAssociations = () => __async(void 0, null, function* () {
    var _a;
    if (!product || !product.value || !product.value.id) {
      throw NO_PRODUCT_REFERENCE_ERROR;
    }
    const searchCriteria = {
      configuration: {
        includes: getIncludesConfig(),
        associations: getAssociationsConfig()
      }
    };
    const urlPath = `detail/${product.value.parentId || product.value.id}`;
    const result = yield (0, import_shopware_6_client2.getProductPage)(urlPath, searchCriteria, apiInstance);
    product.value = Object.assign({}, product.value, {
      crossSellings: (_a = result.product) == null ? void 0 : _a.crossSellings
    });
  });
  const search = (productId) => __async(void 0, null, function* () {
    loading.value = true;
    try {
      const result = yield (0, import_shopware_6_client2.getProduct)(productId, null, apiInstance);
      product.value = result == null ? void 0 : result.product;
      return result;
    } catch (e) {
      const err = e;
      error.value = err.message;
    } finally {
      loading.value = false;
    }
  });
  return {
    product,
    loading,
    search,
    error,
    loadAssociations
  };
};

// packages/composables/src/hooks/useCart/index.ts
var import_composition_api4 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client3 = __toModule(require("@shopware-pwa/shopware-6-client"));

// packages/commons/interfaces/models/common/EntityError.ts
var ErrorLevel;
(function(ErrorLevel2) {
  ErrorLevel2[ErrorLevel2["NOTICE"] = 0] = "NOTICE";
  ErrorLevel2[ErrorLevel2["WARNING"] = 10] = "WARNING";
  ErrorLevel2[ErrorLevel2["ERROR"] = 20] = "ERROR";
})(ErrorLevel || (ErrorLevel = {}));

// packages/composables/src/internalHelpers/errorHandler.ts
var broadcastErrors = (errors, methodName, rootContext) => {
  if (!Array.isArray(errors) || !errors.length || !methodName || !rootContext) {
    return;
  }
  const { broadcast } = useIntercept(rootContext);
  errors.forEach((error) => {
    let interceptorKey;
    switch (error.level) {
      case ErrorLevel.NOTICE:
        interceptorKey = INTERCEPTOR_KEYS.NOTICE;
        break;
      case ErrorLevel.WARNING:
        interceptorKey = INTERCEPTOR_KEYS.WARNING;
        break;
      default:
        interceptorKey = INTERCEPTOR_KEYS.ERROR;
    }
    broadcast(interceptorKey, {
      methodName,
      inputParams: {},
      [interceptorKey]: error
    });
  });
};

// packages/composables/src/hooks/useCart/index.ts
var useCart = (rootContext) => {
  const { apiInstance, contextName } = getApplicationContext(rootContext, "useCart");
  const { broadcast } = useIntercept(rootContext);
  const loading = (0, import_composition_api4.ref)(false);
  const error = (0, import_composition_api4.ref)(null);
  const { sharedRef } = useSharedState(rootContext);
  const _storeCart = sharedRef(`${contextName}-cart`);
  function refreshCart() {
    return __async(this, null, function* () {
      loading.value = true;
      try {
        const result = yield (0, import_shopware_6_client3.getCart)(apiInstance);
        broadcastUpcomingErrors(result);
        _storeCart.value = result;
      } catch (e) {
        const err = e;
        error.value = err.message;
      } finally {
        loading.value = false;
      }
    });
  }
  function addProduct(_0) {
    return __async(this, arguments, function* ({
      id,
      quantity
    }) {
      const addToCartResult = yield (0, import_shopware_6_client3.addProductToCart)(id, quantity, apiInstance);
      broadcastUpcomingErrors(addToCartResult);
      _storeCart.value = addToCartResult;
    });
  }
  function removeItem(_0) {
    return __async(this, arguments, function* ({ id }) {
      const result = yield (0, import_shopware_6_client3.removeCartItem)(id, apiInstance);
      broadcastUpcomingErrors(result);
      _storeCart.value = result;
    });
  }
  function removeProduct(_0) {
    return __async(this, arguments, function* ({ id }) {
      deprecationWarning({
        methodName: "removeProduct",
        newMethodName: "removeItem",
        packageName: "composables"
      });
      return removeItem({ id });
    });
  }
  function changeProductQuantity(_0) {
    return __async(this, arguments, function* ({ id, quantity }) {
      const result = yield (0, import_shopware_6_client3.changeCartItemQuantity)(id, quantity, apiInstance);
      broadcastUpcomingErrors(result);
      _storeCart.value = result;
    });
  }
  function submitPromotionCode(promotionCode) {
    return __async(this, null, function* () {
      if (promotionCode) {
        const result = yield (0, import_shopware_6_client3.addPromotionCode)(promotionCode, apiInstance);
        broadcastUpcomingErrors(result);
        _storeCart.value = result;
        broadcast(INTERCEPTOR_KEYS.ADD_PROMOTION_CODE, {
          result,
          promotionCode
        });
      }
    });
  }
  function broadcastUpcomingErrors(cartResult) {
    var _a;
    if (!cartResult) {
      return;
    }
    try {
      const cartErrorsKeys = Object.keys(((_a = _storeCart.value) == null ? void 0 : _a.errors) || {});
      const cartResultErrorKeys = Object.keys(cartResult.errors || {});
      const upcomingErrorsKeys = cartResultErrorKeys.filter((resultErrorKey) => !cartErrorsKeys.includes(resultErrorKey));
      const entityErrors = Object.values(cartResult.errors || {}).filter((entityError) => upcomingErrorsKeys.includes(entityError.key));
      broadcastErrors(entityErrors, `[${contextName}][cartError]`, rootContext);
    } catch (error2) {
      console.error("[useCart][broadcastUpcomingErrors]", error2);
    }
  }
  const appliedPromotionCodes = (0, import_composition_api4.computed)(() => {
    return cartItems.value.filter((cartItem) => cartItem.type === "promotion");
  });
  const cart = (0, import_composition_api4.computed)(() => _storeCart.value);
  const cartItems = (0, import_composition_api4.computed)(() => {
    return cart.value ? cart.value.lineItems || [] : [];
  });
  const count = (0, import_composition_api4.computed)(() => {
    return cartItems.value.reduce((accumulator, lineItem) => lineItem.type === "product" ? lineItem.quantity + accumulator : accumulator, 0);
  });
  const totalPrice = (0, import_composition_api4.computed)(() => {
    const cartPrice = cart.value && cart.value.price && cart.value.price.totalPrice;
    return cartPrice || 0;
  });
  const shippingTotal = (0, import_composition_api4.computed)(() => {
    var _a, _b, _c, _d;
    const shippingTotal2 = (_d = (_c = (_b = (_a = cart.value) == null ? void 0 : _a.deliveries) == null ? void 0 : _b[0]) == null ? void 0 : _c.shippingCosts) == null ? void 0 : _d.totalPrice;
    return shippingTotal2 || 0;
  });
  const subtotal = (0, import_composition_api4.computed)(() => {
    var _a, _b;
    const cartPrice = (_b = (_a = cart.value) == null ? void 0 : _a.price) == null ? void 0 : _b.positionPrice;
    return cartPrice || 0;
  });
  const cartErrors = (0, import_composition_api4.computed)(() => {
    var _a;
    return ((_a = cart.value) == null ? void 0 : _a.errors) && Object.values(cart.value.errors) || [];
  });
  return {
    addProduct,
    addPromotionCode: submitPromotionCode,
    appliedPromotionCodes,
    cart,
    cartItems,
    changeProductQuantity,
    count,
    error,
    loading,
    refreshCart,
    removeProduct,
    removeItem,
    totalPrice,
    shippingTotal,
    subtotal,
    cartErrors
  };
};

// packages/composables/src/logic/useAddToCart.ts
var import_composition_api5 = __toModule(require("@vue/composition-api"));
var useAddToCart = (rootContext, product) => {
  const { contextName } = getApplicationContext(rootContext, "useAddToCart");
  const { addProduct, cartItems } = useCart(rootContext);
  const { broadcast, intercept } = useIntercept(rootContext);
  const quantity = (0, import_composition_api5.ref)(1);
  const loading = (0, import_composition_api5.ref)(false);
  const error = (0, import_composition_api5.ref)(null);
  const addToCart = () => __async(void 0, null, function* () {
    if (!product || !product.id) {
      error.value = "Product has to be passed as a composable argument and needs to have an id property.";
      return;
    }
    loading.value = true;
    error.value = null;
    if (!quantity.value)
      quantity.value = 1;
    try {
      yield addProduct({ id: product.id, quantity: quantity.value });
      broadcast(INTERCEPTOR_KEYS.ADD_TO_CART, {
        product,
        quantity: quantity.value
      });
      quantity.value = 1;
    } catch (e) {
      const err = e;
      error.value = err;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][addToCart]`,
        inputParams: {
          product,
          quantity: quantity.value
        },
        error: err
      });
    } finally {
      loading.value = false;
    }
  });
  const onAddToCart = (fn) => intercept(INTERCEPTOR_KEYS.ADD_TO_CART, fn);
  const getStock = (0, import_composition_api5.computed)(() => product && product.stock);
  const getAvailableStock = (0, import_composition_api5.computed)(() => product && product.availableStock);
  const isInCart = (0, import_composition_api5.computed)(() => product && cartItems.value.some((item) => item.referencedId === product.id));
  return {
    addToCart,
    quantity,
    error,
    loading,
    getStock,
    getAvailableStock,
    isInCart,
    onAddToCart
  };
};

// packages/composables/src/logic/useCheckout.ts
var import_composition_api6 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client4 = __toModule(require("@shopware-pwa/shopware-6-client"));
var useCheckout = (rootContext) => {
  const { apiInstance, contextName } = getApplicationContext(rootContext, "useCheckout");
  const { broadcast, intercept } = useIntercept(rootContext);
  const { refreshCart } = useCart(rootContext);
  const { sessionContext } = useSessionContext(rootContext);
  const { sharedRef } = useSharedState(rootContext);
  const storeShippingMethods = sharedRef(`${contextName}-ShippingMethods`);
  const storePaymentMethods = sharedRef(`${contextName}-PaymentMethods`);
  const loadings = (0, import_composition_api6.reactive)({
    createOrder: false
  });
  const shippingMethods = (0, import_composition_api6.computed)(() => storeShippingMethods.value || []);
  const paymentMethods = (0, import_composition_api6.computed)(() => storePaymentMethods.value || []);
  const onOrderPlace = (fn) => intercept(INTERCEPTOR_KEYS.ORDER_PLACE, fn);
  const getShippingMethods = (..._0) => __async(void 0, [..._0], function* ({ forceReload } = { forceReload: false }) {
    if (shippingMethods.value.length && !forceReload)
      return shippingMethods;
    const response = yield (0, import_shopware_6_client4.getAvailableShippingMethods)(apiInstance, {
      onlyAvailable: true
    });
    storeShippingMethods.value = (response == null ? void 0 : response.elements) || [];
    return shippingMethods;
  });
  const getPaymentMethods = (..._0) => __async(void 0, [..._0], function* ({ forceReload } = { forceReload: false }) {
    if (paymentMethods.value.length && !forceReload)
      return paymentMethods;
    const response = yield (0, import_shopware_6_client4.getAvailablePaymentMethods)(apiInstance, {
      onlyAvailable: true
    });
    storePaymentMethods.value = (response == null ? void 0 : response.elements) || [];
    return paymentMethods;
  });
  const createOrder = () => __async(void 0, null, function* () {
    try {
      loadings.createOrder = true;
      const order = yield (0, import_shopware_6_client4.createOrder)(apiInstance);
      broadcast(INTERCEPTOR_KEYS.ORDER_PLACE, {
        order
      });
      return order;
    } catch (e) {
      const err = e;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][createOrder]`,
        inputParams: {},
        error: err
      });
      throw err;
    } finally {
      loadings.createOrder = false;
      yield refreshCart();
    }
  });
  const shippingAddress = (0, import_composition_api6.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.shippingLocation) == null ? void 0 : _b.address;
  });
  const billingAddress = (0, import_composition_api6.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeBillingAddress;
  });
  return {
    getPaymentMethods,
    paymentMethods,
    getShippingMethods,
    shippingMethods,
    createOrder,
    shippingAddress,
    billingAddress,
    onOrderPlace,
    loadings
  };
};

// packages/composables/src/logic/useSessionContext.ts
var import_composition_api7 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client5 = __toModule(require("@shopware-pwa/shopware-6-client"));
var useSessionContext = (rootContext) => {
  const { apiInstance } = getApplicationContext(rootContext, "useSessionContext");
  const { broadcast, intercept } = useIntercept(rootContext);
  const { sharedRef } = useSharedState(rootContext);
  const storeSessionContext = sharedRef(`useSessionContext-sessionContext`);
  const onCurrencyChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_CURRENCY, fn);
  const onPaymentMethodChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_PAYMENT_METHOD, fn);
  const onShippingMethodChange = (fn) => intercept(INTERCEPTOR_KEYS.SESSION_SET_SHIPPING_METHOD, fn);
  const sessionContext = (0, import_composition_api7.computed)(() => storeSessionContext.value);
  const refreshSessionContext = () => __async(void 0, null, function* () {
    try {
      const context = yield (0, import_shopware_6_client5.getSessionContext)(apiInstance);
      storeSessionContext.value = context;
    } catch (e) {
      console.error("[UseSessionContext][refreshSessionContext]", e);
    }
  });
  const shippingMethod = (0, import_composition_api7.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.shippingMethod) || null;
  });
  const setShippingMethod = (..._0) => __async(void 0, [..._0], function* (shippingMethod2 = {}) {
    if (!(shippingMethod2 == null ? void 0 : shippingMethod2.id)) {
      throw new Error("You need to provide shipping method id in order to set shipping method.");
    }
    yield (0, import_shopware_6_client5.setCurrentShippingMethod)(shippingMethod2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_SHIPPING_METHOD, {
      shippingMethod: shippingMethod2
    });
  });
  const paymentMethod = (0, import_composition_api7.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.paymentMethod) || null;
  });
  const setPaymentMethod = (..._0) => __async(void 0, [..._0], function* (paymentMethod2 = {}) {
    if (!(paymentMethod2 == null ? void 0 : paymentMethod2.id)) {
      throw new Error("You need to provide payment method id in order to set payment method.");
    }
    yield (0, import_shopware_6_client5.setCurrentPaymentMethod)(paymentMethod2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_PAYMENT_METHOD, {
      paymentMethod: paymentMethod2
    });
  });
  const currency = (0, import_composition_api7.computed)(() => {
    var _a;
    return ((_a = sessionContext.value) == null ? void 0 : _a.currency) || null;
  });
  const setCurrency = (..._0) => __async(void 0, [..._0], function* (currency2 = {}) {
    if (!currency2.id) {
      console.error("You need to provide currency id in order to set currency.", currency2);
      return;
    }
    yield (0, import_shopware_6_client5.setCurrentCurrency)(currency2.id, apiInstance);
    yield refreshSessionContext();
    broadcast(INTERCEPTOR_KEYS.SESSION_SET_CURRENCY, {
      currency: currency2
    });
  });
  const activeShippingAddress = (0, import_composition_api7.computed)(() => {
    var _a, _b;
    return ((_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeShippingAddress) || null;
  });
  const setActiveShippingAddress = (address) => __async(void 0, null, function* () {
    if (!(address == null ? void 0 : address.id)) {
      throw new Error("You need to provide address id in order to set the address.");
    }
    yield (0, import_shopware_6_client5.setCurrentShippingAddress)(address.id, apiInstance);
    refreshSessionContext();
  });
  const activeBillingAddress = (0, import_composition_api7.computed)(() => {
    var _a, _b;
    return ((_b = (_a = sessionContext.value) == null ? void 0 : _a.customer) == null ? void 0 : _b.activeBillingAddress) || null;
  });
  const setActiveBillingAddress = (address) => __async(void 0, null, function* () {
    if (!(address == null ? void 0 : address.id)) {
      throw new Error("You need to provide address id in order to set the address.");
    }
    yield (0, import_shopware_6_client5.setCurrentBillingAddress)(address.id, apiInstance);
    refreshSessionContext();
  });
  const countryId = (0, import_composition_api7.computed)(() => {
    var _a, _b;
    return (_b = (_a = sessionContext.value) == null ? void 0 : _a.salesChannel) == null ? void 0 : _b.countryId;
  });
  return {
    sessionContext,
    refreshSessionContext,
    shippingMethod,
    setShippingMethod,
    paymentMethod,
    setPaymentMethod,
    currency,
    setCurrency,
    activeShippingAddress,
    setActiveShippingAddress,
    activeBillingAddress,
    setActiveBillingAddress,
    countryId,
    onCurrencyChange,
    onPaymentMethodChange,
    onShippingMethodChange
  };
};

// packages/composables/src/logic/useUIState.ts
var import_vue = __toModule(require("vue"));
var import_composition_api8 = __toModule(require("@vue/composition-api"));
var sharedUIState = {};
var useUIState = (rootContext, stateName) => {
  getApplicationContext(rootContext, "useUIState");
  if (stateName && !sharedUIState[stateName]) {
    sharedUIState[stateName] = import_vue.default.observable({ state: false });
  }
  const localMappedState = stateName && (0, import_composition_api8.reactive)(sharedUIState[stateName]);
  const localState = (0, import_composition_api8.ref)(false);
  const isOpen = (0, import_composition_api8.computed)(() => (localMappedState == null ? void 0 : localMappedState.state) || localState.value);
  function switchState(to) {
    if (stateName) {
      const stateToChange = to !== void 0 ? !!to : !sharedUIState[stateName].state;
      sharedUIState[stateName].state = stateToChange;
    } else {
      const stateToChange = to !== void 0 ? !!to : !localState.value;
      localState.value = stateToChange;
    }
  }
  return {
    isOpen,
    switchState
  };
};

// packages/composables/src/hooks/useCategoryFilters/index.ts
var import_composition_api9 = __toModule(require("@vue/composition-api"));
var import_helpers2 = __toModule(require("@shopware-pwa/helpers"));
var useCategoryFilters = (rootContext) => {
  deprecationWarning({
    methodName: "useCategoryFilters",
    newMethodName: "useListing",
    packageName: "composables"
  });
  getApplicationContext(rootContext, "useCategoryFilters");
  const { page } = useCms(rootContext);
  const activeFilters = (0, import_composition_api9.computed)(() => {
    if (!page || !page.value || !page.value.listingConfiguration) {
      return [];
    }
    return page.value.listingConfiguration.activeFilters;
  });
  const availableFilters = (0, import_composition_api9.computed)(() => {
    if (!page || !page.value || !page.value.listingConfiguration) {
      return [];
    }
    return (0, import_helpers2.getCategoryAvailableFilters)({
      filters: page.value.listingConfiguration.availableFilters
    });
  });
  const availableSorting = (0, import_composition_api9.computed)(() => {
    if (!page || !page.value || !page.value.listingConfiguration) {
      return [];
    }
    return (0, import_helpers2.getCategoryAvailableSorting)({
      sorting: page.value.listingConfiguration.availableSortings
    });
  });
  const activeSorting = (0, import_composition_api9.computed)(() => availableSorting.value.find((sorting) => sorting.active));
  return {
    availableFilters,
    activeFilters,
    availableSorting,
    activeSorting
  };
};

// packages/composables/src/hooks/useCurrency.ts
var import_vue2 = __toModule(require("vue"));
var import_composition_api10 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client6 = __toModule(require("@shopware-pwa/shopware-6-client"));
var sharedCurrencyState = import_vue2.default.observable({
  availableCurrencies: []
});
var useCurrency = (rootContext) => {
  const { apiInstance } = getApplicationContext(rootContext, "useCurrency");
  const { currency, setCurrency: setContextCurrency } = useSessionContext(rootContext);
  const { refreshCart } = useCart(rootContext);
  const localState = (0, import_composition_api10.reactive)(sharedCurrencyState);
  const currencySymbol = (0, import_composition_api10.computed)(() => {
    var _a;
    return ((_a = currency.value) == null ? void 0 : _a.symbol) || "";
  });
  const availableCurrencies = (0, import_composition_api10.computed)(() => {
    if (Array.isArray(localState.availableCurrencies) && localState.availableCurrencies.length) {
      return localState.availableCurrencies;
    }
    return currency.value ? [currency.value] : [];
  });
  const loadAvailableCurrencies = (options) => __async(void 0, null, function* () {
    if (!(options == null ? void 0 : options.forceReload) && Array.isArray(localState.availableCurrencies) && localState.availableCurrencies.length)
      return;
    const response = yield (0, import_shopware_6_client6.getAvailableCurrencies)(apiInstance);
    sharedCurrencyState.availableCurrencies = response == null ? void 0 : response.elements;
  });
  const setCurrency = (currency2) => __async(void 0, null, function* () {
    try {
      yield setContextCurrency(currency2);
      refreshCart();
    } catch (e) {
      console.error("[useCurrency][setCurrency] Problem with currency change", e);
    }
  });
  return {
    loadAvailableCurrencies,
    setCurrency,
    availableCurrencies,
    currencySymbol,
    currency
  };
};

// packages/composables/src/hooks/useNavigation.ts
var import_composition_api11 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client7 = __toModule(require("@shopware-pwa/shopware-6-client"));
var useNavigation = (rootContext, params = {
  type: "main-navigation"
}) => {
  const { apiInstance } = getApplicationContext(rootContext, "useNavigation");
  const { sharedRef } = useSharedState(rootContext);
  const { getIncludesConfig, getAssociationsConfig } = useDefaults(rootContext, "useNavigation");
  const sharedElements = sharedRef(`useNavigation-${params.type}`);
  const navigationElements = (0, import_composition_api11.computed)(() => sharedElements.value);
  const loadNavigationElements = (_0) => __async(void 0, [_0], function* ({ depth }) {
    try {
      const navigationResponse = yield (0, import_shopware_6_client7.getStoreNavigation)({
        requestActiveId: params.type,
        requestRootId: params.type,
        searchCriteria: {
          configuration: {
            includes: getIncludesConfig(),
            associations: getAssociationsConfig()
          }
        },
        depth
      }, apiInstance);
      sharedElements.value = navigationResponse || [];
    } catch (e) {
      sharedElements.value = [];
      console.error("[useNavigation][loadNavigationElements]", e);
    }
  });
  return {
    navigationElements,
    fetchNavigationElements: (depth) => loadNavigationElements({ depth }),
    loadNavigationElements
  };
};

// packages/composables/src/hooks/useSalutations.ts
var import_vue3 = __toModule(require("vue"));
var import_composition_api12 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client8 = __toModule(require("@shopware-pwa/shopware-6-client"));
var sharedSalutations = import_vue3.default.observable({
  salutations: null
});
var useSalutations = (rootContext) => {
  const { apiInstance } = getApplicationContext(rootContext, "useSalutations");
  const localSalutations = (0, import_composition_api12.reactive)(sharedSalutations);
  const error = (0, import_composition_api12.ref)(null);
  const fetchSalutations = () => __async(void 0, null, function* () {
    try {
      const { elements } = yield (0, import_shopware_6_client8.getAvailableSalutations)(apiInstance);
      sharedSalutations.salutations = elements;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const mountedCallback = () => __async(void 0, null, function* () {
    if (!sharedSalutations.salutations) {
      yield fetchSalutations();
    }
  });
  const getSalutations = (0, import_composition_api12.computed)(() => {
    var _a;
    return (_a = localSalutations.salutations) != null ? _a : [];
  });
  (0, import_composition_api12.onMounted)(mountedCallback);
  return {
    mountedCallback,
    fetchSalutations,
    getSalutations,
    error
  };
};

// packages/composables/src/hooks/useCountries.ts
var import_vue4 = __toModule(require("vue"));
var import_composition_api13 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client9 = __toModule(require("@shopware-pwa/shopware-6-client"));
var sharedCountries = import_vue4.default.observable({
  countries: null
});
var useCountries = (rootContext) => {
  const { apiInstance } = getApplicationContext(rootContext, "useCountries");
  const localCountries = (0, import_composition_api13.reactive)(sharedCountries);
  const error = (0, import_composition_api13.ref)(null);
  const fetchCountries = () => __async(void 0, null, function* () {
    try {
      const { elements } = yield (0, import_shopware_6_client9.getAvailableCountries)(apiInstance);
      sharedCountries.countries = elements;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const getCountries = (0, import_composition_api13.computed)(() => {
    var _a;
    return (_a = localCountries.countries) != null ? _a : [];
  });
  const mountedCallback = () => __async(void 0, null, function* () {
    if (!sharedCountries.countries) {
      yield fetchCountries();
    }
  });
  (0, import_composition_api13.onMounted)(mountedCallback);
  return {
    mountedCallback,
    fetchCountries,
    getCountries,
    error
  };
};

// packages/composables/src/hooks/useUser.ts
var import_composition_api14 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client10 = __toModule(require("@shopware-pwa/shopware-6-client"));

// packages/commons/interfaces/models/checkout/customer/CustomerAddress.ts
var AddressType;
(function(AddressType2) {
  AddressType2["billing"] = "billing";
  AddressType2["shipping"] = "shipping";
})(AddressType || (AddressType = {}));

// packages/composables/src/hooks/useUser.ts
var useUser = (rootContext) => {
  const { contextName, apiInstance } = getApplicationContext(rootContext, "useUser");
  const { broadcast, intercept } = useIntercept(rootContext);
  const { refreshSessionContext } = useSessionContext(rootContext);
  const { refreshCart } = useCart(rootContext);
  const { sharedRef } = useSharedState(rootContext);
  const storeUser = sharedRef(`${contextName}-user`);
  const storeAddresses = sharedRef(`${contextName}-addresses`);
  const loading = (0, import_composition_api14.ref)(false);
  const error = (0, import_composition_api14.ref)(null);
  const errors = (0, import_composition_api14.reactive)({
    login: "",
    register: []
  });
  const orders = (0, import_composition_api14.ref)(null);
  const addresses = (0, import_composition_api14.computed)(() => storeAddresses.value);
  const country = (0, import_composition_api14.ref)(null);
  const salutation = (0, import_composition_api14.ref)(null);
  const user = (0, import_composition_api14.computed)(() => storeUser.value);
  const login = (..._0) => __async(void 0, [..._0], function* ({
    username,
    password
  } = {}) {
    loading.value = true;
    error.value = null;
    try {
      yield (0, import_shopware_6_client10.login)({ username, password }, apiInstance);
      yield refreshUser();
      broadcast(INTERCEPTOR_KEYS.USER_LOGIN, {
        user: user.value
      });
      return true;
    } catch (e) {
      const err = e;
      error.value = err.message;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][login]`,
        inputParams: {},
        error: err
      });
      return false;
    } finally {
      loading.value = false;
      yield refreshUser();
      yield refreshCart();
    }
  });
  const register = (params) => __async(void 0, null, function* () {
    loading.value = true;
    errors.register = [];
    try {
      const userObject = yield (0, import_shopware_6_client10.register)(params, apiInstance);
      broadcast(INTERCEPTOR_KEYS.USER_REGISTER);
      storeUser.value = userObject || {};
      refreshSessionContext();
      return true;
    } catch (e) {
      const err = e;
      errors.register = [err.message];
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][register]`,
        inputParams: {},
        error: err
      });
      return false;
    } finally {
      loading.value = false;
    }
  });
  const logout = () => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.logout)(apiInstance);
      broadcast(INTERCEPTOR_KEYS.USER_LOGOUT);
    } catch (e) {
      const err = e;
      error.value = err.message;
      broadcast(INTERCEPTOR_KEYS.ERROR, {
        methodName: `[${contextName}][logout]`,
        inputParams: {},
        error: err
      });
    } finally {
      yield refreshUser();
      yield refreshCart();
    }
  });
  const onLogout = (fn) => intercept(INTERCEPTOR_KEYS.USER_LOGOUT, fn);
  const onUserLogin = (fn) => intercept(INTERCEPTOR_KEYS.USER_LOGIN, fn);
  const onUserRegister = (fn) => intercept(INTERCEPTOR_KEYS.USER_REGISTER, fn);
  const refreshUser = () => __async(void 0, null, function* () {
    try {
      const user2 = yield (0, import_shopware_6_client10.getCustomer)(apiInstance);
      storeUser.value = user2 || {};
    } catch (e) {
      storeUser.value = {};
      console.error("[useUser][refreshUser]", e);
    }
  });
  const loadOrders = () => __async(void 0, null, function* () {
    const fetchedOrders = yield (0, import_shopware_6_client10.getCustomerOrders)(apiInstance);
    orders.value = fetchedOrders;
  });
  const getOrderDetails = (orderId) => __async(void 0, null, function* () {
    return (0, import_shopware_6_client10.getCustomerOrderDetails)(orderId, apiInstance);
  });
  const loadAddresses = () => __async(void 0, null, function* () {
    try {
      const response = yield (0, import_shopware_6_client10.getCustomerAddresses)(apiInstance);
      storeAddresses.value = response == null ? void 0 : response.elements;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const loadCountry = (userId) => __async(void 0, null, function* () {
    try {
      country.value = yield (0, import_shopware_6_client10.getUserCountry)(userId, apiInstance);
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const loadSalutation = (salutationId) => __async(void 0, null, function* () {
    try {
      salutation.value = yield (0, import_shopware_6_client10.getUserSalutation)(salutationId, apiInstance);
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const markAddressAsDefault = (_0) => __async(void 0, [_0], function* ({
    addressId,
    type
  }) {
    if (!addressId || !type) {
      return false;
    }
    try {
      switch (type) {
        case AddressType.billing:
          yield (0, import_shopware_6_client10.setDefaultCustomerBillingAddress)(addressId, apiInstance);
          break;
        case AddressType.shipping:
          yield (0, import_shopware_6_client10.setDefaultCustomerShippingAddress)(addressId, apiInstance);
          break;
        default:
          return false;
      }
      yield refreshUser();
    } catch (e) {
      const err = e;
      error.value = err.message;
      return false;
    }
    return true;
  });
  const updateAddress = (params) => __async(void 0, null, function* () {
    try {
      const { id } = yield (0, import_shopware_6_client10.updateCustomerAddress)(params, apiInstance);
      return id;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const addAddress = (params) => __async(void 0, null, function* () {
    try {
      const { id } = yield (0, import_shopware_6_client10.createCustomerAddress)(params, apiInstance);
      return id;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
  });
  const deleteAddress = (addressId) => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.deleteCustomerAddress)(addressId, apiInstance);
      return true;
    } catch (e) {
      const err = e;
      error.value = err.message;
    }
    return false;
  });
  const updatePersonalInfo = (personals) => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.updateProfile)(personals, apiInstance);
    } catch (e) {
      error.value = e;
      return false;
    }
    return true;
  });
  const updatePassword = (updatePasswordData) => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.updatePassword)(updatePasswordData, apiInstance);
    } catch (e) {
      error.value = e;
      return false;
    }
    return true;
  });
  const resetPassword = (resetPasswordData) => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.resetPassword)(resetPasswordData, apiInstance);
    } catch (e) {
      error.value = e;
      return false;
    }
    return true;
  });
  const updateEmail = (updateEmailData) => __async(void 0, null, function* () {
    try {
      yield (0, import_shopware_6_client10.updateEmail)(updateEmailData, apiInstance);
    } catch (e) {
      error.value = e;
      return false;
    }
    return true;
  });
  const isLoggedIn = (0, import_composition_api14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.id);
  });
  const isCustomerSession = (0, import_composition_api14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.id) && !user.value.guest;
  });
  const isGuestSession = (0, import_composition_api14.computed)(() => {
    var _a;
    return !!((_a = user.value) == null ? void 0 : _a.guest);
  });
  return {
    login,
    register,
    user,
    error,
    loading,
    isLoggedIn,
    isCustomerSession,
    isGuestSession,
    refreshUser,
    logout,
    orders,
    loadOrders,
    getOrderDetails,
    loadAddresses,
    addresses,
    markAddressAsDefault,
    updateEmail,
    updatePersonalInfo,
    updatePassword,
    resetPassword,
    addAddress,
    updateAddress,
    deleteAddress,
    loadSalutation,
    salutation,
    loadCountry,
    country,
    errors,
    onLogout,
    onUserLogin,
    onUserRegister
  };
};

// packages/composables/src/logic/useNotifications.ts
var import_vue5 = __toModule(require("vue"));
var import_composition_api15 = __toModule(require("@vue/composition-api"));
var sharedNotifications = import_vue5.default.observable({
  list: []
});
var useNotifications = (rootContext) => {
  getApplicationContext(rootContext, "useNotifications");
  const localNotifications = (0, import_composition_api15.reactive)(sharedNotifications);
  const removeOne = (notificationId) => {
    const filteredNotifications = sharedNotifications.list.filter(({ id }) => id !== notificationId);
    sharedNotifications.list = filteredNotifications;
  };
  const removeAll = () => sharedNotifications.list = [];
  const geterateId = () => new Date().getTime();
  const pushNotification = (message, options) => __async(void 0, null, function* () {
    const timeout = options.timeout || 2500;
    const persistent = !!options.persistent;
    const messageId = geterateId();
    sharedNotifications.list.push({
      id: messageId,
      type: options.type,
      message
    });
    if (!persistent) {
      setTimeout(() => {
        removeOne(messageId);
      }, timeout);
    }
  });
  return {
    removeOne,
    removeAll,
    pushInfo: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "info" })),
    pushSuccess: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "success" })),
    pushWarning: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "warning" })),
    pushError: (message, options = {}) => pushNotification(message, __spreadProps(__spreadValues({}, options), { type: "danger" })),
    notifications: (0, import_composition_api15.computed)(() => localNotifications.list)
  };
};

// packages/composables/src/logic/useIntercept.ts
var import_composition_api16 = __toModule(require("@vue/composition-api"));
var INTERCEPTOR_KEYS = {
  ADD_TO_CART: "addToCart",
  ADD_TO_WISHLIST: "addToWishlist",
  ADD_PROMOTION_CODE: "addPromotionCode",
  ERROR: "error",
  WARNING: "warning",
  NOTICE: "notice",
  ORDER_PLACE: "onOrderPlace",
  SESSION_SET_CURRENCY: "onCurrencyChange",
  SESSION_SET_PAYMENT_METHOD: "onPaymentMethodChange",
  SESSION_SET_SHIPPING_METHOD: "onShippingMethodChange",
  USER_LOGOUT: "onUserLogout",
  USER_LOGIN: "onUserLogin",
  USER_REGISTER: "onUserRegister"
};
var useIntercept = (rootContext) => {
  const { interceptors } = getApplicationContext(rootContext, "useIntercept");
  const localSubscribers = [];
  const isVueInstance = !!(0, import_composition_api16.getCurrentInstance)();
  const broadcast = (broadcastKey, value) => {
    var _a;
    if ((_a = interceptors[broadcastKey]) == null ? void 0 : _a.length) {
      interceptors[broadcastKey].forEach((broadcastMethod) => broadcastMethod(value, rootContext));
    }
  };
  const intercept = (broadcastKey, method) => {
    if (!interceptors[broadcastKey])
      interceptors[broadcastKey] = [];
    interceptors[broadcastKey].push(method);
    isVueInstance && localSubscribers.push({ broadcastKey, method });
  };
  const disconnect = (broadcastKey, method) => {
    var _a;
    interceptors[broadcastKey] = ((_a = interceptors[broadcastKey]) == null ? void 0 : _a.filter((subscribedMethod) => subscribedMethod !== method)) || [];
  };
  isVueInstance && (0, import_composition_api16.onUnmounted)(() => {
    localSubscribers.forEach(({ broadcastKey, method }) => {
      disconnect(broadcastKey, method);
    });
  });
  return {
    broadcast,
    intercept,
    disconnect
  };
};

// packages/composables/src/internalHelpers/defaultApiParams.json
var useCms2 = {
  limit: 10,
  associations: {
    manufacturer: {
      associations: {
        media: {}
      }
    },
    media: {
      sort: [
        {
          field: "position",
          order: "ASC",
          naturalSorting: false
        }
      ]
    },
    productReviews: {},
    crossSellings: {
      associations: {
        assignedProducts: {
          associations: {
            product: {
              associations: {
                media: {},
                cover: {},
                seoUrls: {}
              }
            }
          }
        }
      }
    },
    properties: {
      associations: {
        group: {}
      }
    }
  },
  includes: {
    cms_page_slot: [
      "id",
      "type",
      "slot",
      "blockId",
      "config",
      "data",
      "backgroundMediaMode",
      "backgroundMedia"
    ],
    cms_page_block: [
      "slots",
      "type",
      "id",
      "backgroundColor",
      "backgroundMedia",
      "sectionPosition"
    ],
    cms_page_section: [
      "id",
      "backgroundMedia",
      "blocks",
      "type",
      "sizingMode"
    ],
    cms_page: ["id", "name", "sections", "type", "config"],
    product: [
      "media",
      "productReviews",
      "name",
      "description",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "parentId",
      "id",
      "translated",
      "optionIds",
      "properties",
      "manufacturer",
      "seoUrls",
      "crossSellings",
      "availableStock",
      "customFields",
      "stock"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    media_thumbnail: ["url", "width", "height", "id"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["id", "group", "translated", "name"],
    product_group: ["id", "translated", "name"],
    product_listing: [
      "sorting",
      "currentFilters",
      "elements",
      "page",
      "limit",
      "sortings",
      "availableSortings",
      "total",
      "aggregations"
    ],
    property_group: ["id", "translated", "options", "name"],
    property_group_option: [
      "translated",
      "name",
      "id",
      "colorHexCode",
      "media",
      "group"
    ],
    product_manufacturer: ["translated", "link", "name"]
  }
};
var useProductListing = {
  limit: 10,
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "id",
      "translated",
      "options",
      "seoUrls"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "options", "translated"],
    property_group: ["id", "translated", "options"],
    property_group_option: [
      "translated",
      "name",
      "id",
      "colorHexCode",
      "media",
      "group"
    ]
  }
};
var useProductQuickSearch = {
  limit: 10,
  includes: {
    calculated_price: ["unitPrice", "quantity", "listPrice"]
  }
};
var useListing = {
  limit: 10,
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "id",
      "translated",
      "options",
      "seoUrls"
    ],
    product_media: ["media"],
    media: ["thumbnails", "width", "height", "url"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "options", "translated"],
    property_group: ["id", "translated", "options"],
    property_group_option: [
      "name",
      "translated",
      "id",
      "colorHexCode",
      "media",
      "group"
    ]
  }
};
var useProduct2 = {
  associations: {
    crossSellings: {
      associations: {
        assignedProducts: {
          associations: {
            product: {
              associations: {
                media: {},
                cover: {},
                seoUrls: {}
              }
            }
          }
        }
      }
    },
    media: {
      sort: [
        {
          field: "position",
          order: "ASC",
          naturalSorting: false
        }
      ]
    }
  },
  includes: {
    product: [
      "name",
      "ratingAverage",
      "calculatedPrice",
      "calculatedPrices",
      "calculatedListingPrice",
      "cover",
      "id",
      "parentId",
      "translated",
      "media",
      "seoUrls",
      "crossSellings",
      "availableStock",
      "customFields"
    ],
    product_media: ["media"],
    media: ["url"],
    media_thumbnail: ["url", "width", "height", "id"],
    calculated_price: ["unitPrice", "quantity", "listPrice"],
    product_group_option: ["name", "id", "group", "translated"],
    product_group: ["id", "name", "translated"]
  }
};
var useNavigation2 = {
  associations: {
    seoUrls: {}
  },
  includes: {
    category: [
      "seoUrls",
      "externalLink",
      "name",
      "id",
      "children",
      "translated",
      "type"
    ],
    seo_url: ["pathInfo", "seoPathInfo"]
  }
};
var defaultApiParams_default = {
  useCms: useCms2,
  useProductListing,
  useProductQuickSearch,
  useListing,
  useProduct: useProduct2,
  useNavigation: useNavigation2
};

// packages/composables/src/getDefaultApiParams.ts
function getDefaultApiParams() {
  return defaultApiParams_default;
}

// packages/composables/src/logic/useListing.ts
var import_shopware_6_client11 = __toModule(require("@shopware-pwa/shopware-6-client"));
var useListing2 = (rootContext, listingKey = "categoryListing") => {
  const { getDefaults } = useDefaults(rootContext, "useListing");
  const { apiInstance } = getApplicationContext(rootContext, "useListing");
  let searchMethod;
  if (listingKey === "productSearchListing") {
    searchMethod = (searchCriteria) => __async(void 0, null, function* () {
      return (0, import_shopware_6_client11.searchProducts)(searchCriteria, apiInstance);
    });
  } else {
    const { categoryId } = useCms(rootContext);
    searchMethod = (searchCriteria) => __async(void 0, null, function* () {
      if (!categoryId.value) {
        throw new Error("[useListing][search] Search category id does not exist.");
      }
      return (0, import_shopware_6_client11.getCategoryProducts)(categoryId.value, searchCriteria, apiInstance);
    });
  }
  return createListingComposable({
    rootContext,
    listingKey,
    searchMethod,
    searchDefaults: getDefaults()
  });
};

// packages/composables/src/logic/useProductQuickSearch.ts
var import_shopware_6_client12 = __toModule(require("@shopware-pwa/shopware-6-client"));
var import_composition_api17 = __toModule(require("@vue/composition-api"));
var useProductQuickSearch2 = (rootContext) => {
  const { getDefaults } = useDefaults(rootContext, "useProductQuickSearch");
  const { apiInstance } = getApplicationContext(rootContext, "useListing");
  const searchTerm = (0, import_composition_api17.ref)("");
  const listingKey = "productQuickSearch";
  const searchMethod = (searchCriteria) => __async(void 0, null, function* () {
    return (0, import_shopware_6_client12.searchSuggestedProducts)(searchCriteria, apiInstance);
  });
  const listingComposable = createListingComposable({
    rootContext,
    listingKey,
    searchMethod,
    searchDefaults: getDefaults()
  });
  const search = (..._0) => __async(void 0, [..._0], function* (additionalCriteria = {}) {
    const searchCriteria = __spreadValues({
      query: searchTerm.value
    }, additionalCriteria);
    return listingComposable.search(searchCriteria, {
      preventRouteChange: true
    });
  });
  return {
    searchTerm,
    loading: listingComposable.loading,
    search,
    loadMore: listingComposable.loadMore,
    getProducts: listingComposable.getElements,
    getTotal: listingComposable.getTotal
  };
};

// packages/composables/src/factories/createListingComposable.ts
var import_helpers3 = __toModule(require("@shopware-pwa/helpers"));
var import_composition_api18 = __toModule(require("@vue/composition-api"));
var import_merge3 = __toModule(require("lodash/merge"));
function createListingComposable({
  rootContext,
  searchMethod,
  searchDefaults,
  listingKey
}) {
  const { router, contextName } = getApplicationContext(rootContext, "createListingComposable");
  const loading = (0, import_composition_api18.ref)(false);
  const loadingMore = (0, import_composition_api18.ref)(false);
  const { sharedRef } = useSharedState(rootContext);
  const _storeInitialListing = sharedRef(`${contextName}-initialListing-${listingKey}`);
  const _storeAppliedListing = sharedRef(`${contextName}-appliedListing-${listingKey}`);
  const getInitialListing = (0, import_composition_api18.computed)(() => _storeInitialListing.value);
  const setInitialListing = (initialListing) => __async(this, null, function* () {
    var _a, _b, _c, _d;
    if (((_b = (_a = initialListing == null ? void 0 : initialListing.currentFilters) == null ? void 0 : _a.manufacturer) == null ? void 0 : _b.length) || ((_d = (_c = initialListing == null ? void 0 : initialListing.currentFilters) == null ? void 0 : _c.properties) == null ? void 0 : _d.length)) {
      loading.value = true;
      const allFiltersResult = yield searchMethod({
        query: initialListing.currentFilters.search || void 0
      });
      initialListing = Object.assign({}, initialListing, {
        aggregations: allFiltersResult == null ? void 0 : allFiltersResult.aggregations
      });
    }
    _storeInitialListing.value = initialListing;
    _storeAppliedListing.value = null;
    loading.value = false;
  });
  const initSearch = (criteria) => __async(this, null, function* () {
    loading.value = true;
    try {
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, criteria);
      const result = yield searchMethod(searchCriteria);
      yield setInitialListing(result);
    } catch (e) {
      throw e;
    } finally {
      loading.value = false;
    }
  });
  const search = (criteria, options) => __async(this, null, function* () {
    loading.value = true;
    const changeRoute = (options == null ? void 0 : options.preventRouteChange) !== true;
    try {
      changeRoute && router.replace({
        query: __spreadValues({}, criteria)
      }).catch(() => {
      });
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, criteria);
      const result = yield searchMethod(searchCriteria);
      const allFiltersResult = yield searchMethod({
        query: searchCriteria.query,
        includes: { product_listing: ["aggregations"] }
      });
      _storeAppliedListing.value = Object.assign({}, result, {
        aggregations: allFiltersResult == null ? void 0 : allFiltersResult.aggregations
      });
    } catch (e) {
      throw e;
    } finally {
      loading.value = false;
    }
  });
  const loadMore = () => __async(this, null, function* () {
    var _a;
    loadingMore.value = true;
    try {
      const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
        p: getCurrentPage.value + 1
      });
      const searchCriteria = (0, import_merge3.default)({}, searchDefaults, query);
      const result = yield searchMethod(searchCriteria);
      _storeAppliedListing.value = __spreadProps(__spreadValues({}, getCurrentListing.value), {
        page: result.page,
        elements: [
          ...((_a = getCurrentListing.value) == null ? void 0 : _a.elements) || [],
          ...result.elements
        ]
      });
    } catch (e) {
      throw e;
    } finally {
      loadingMore.value = false;
    }
  });
  const getCurrentListing = (0, import_composition_api18.computed)(() => {
    return _storeAppliedListing.value || getInitialListing.value;
  });
  const getElements = (0, import_composition_api18.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.elements) || [];
  });
  const getTotal = (0, import_composition_api18.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.total) || 0;
  });
  const getLimit = (0, import_composition_api18.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.limit) || (searchDefaults == null ? void 0 : searchDefaults.limit) || 10;
  });
  const getTotalPagesCount = (0, import_composition_api18.computed)(() => Math.ceil(getTotal.value / getLimit.value));
  const getSortingOrders = (0, import_composition_api18.computed)(() => {
    var _a, _b;
    const oldSortings = Object.values(((_a = getCurrentListing.value) == null ? void 0 : _a.sortings) || {});
    return ((_b = getCurrentListing.value) == null ? void 0 : _b.availableSortings) || oldSortings;
  });
  const getCurrentSortingOrder = (0, import_composition_api18.computed)(() => {
    var _a;
    return (_a = getCurrentListing.value) == null ? void 0 : _a.sorting;
  });
  const changeCurrentSortingOrder = (order) => __async(this, null, function* () {
    const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
      order
    });
    yield search(query);
  });
  const getCurrentPage = (0, import_composition_api18.computed)(() => {
    var _a;
    return ((_a = getCurrentListing.value) == null ? void 0 : _a.page) || 1;
  });
  const changeCurrentPage = (pageNumber) => __async(this, null, function* () {
    const query = __spreadProps(__spreadValues({}, router.currentRoute.query), {
      p: pageNumber || 1
    });
    yield search(query);
  });
  const getAvailableFilters = (0, import_composition_api18.computed)(() => {
    var _a;
    return (0, import_helpers3.getListingFilters)((_a = getCurrentListing.value) == null ? void 0 : _a.aggregations);
  });
  const getCurrentFilters = (0, import_composition_api18.computed)(() => {
    var _a;
    const currentFiltersResult = {};
    const currentFilters = __spreadValues(__spreadValues({}, (_a = getCurrentListing.value) == null ? void 0 : _a.currentFilters), router.currentRoute.query);
    Object.keys(currentFilters).forEach((objectKey) => {
      if (!currentFilters[objectKey])
        return;
      if (objectKey === "navigationId")
        return;
      if (objectKey === "price") {
        if (currentFilters[objectKey].min)
          currentFiltersResult["min-price"] = currentFilters[objectKey].min;
        if (currentFilters[objectKey].max)
          currentFiltersResult["max-price"] = currentFilters[objectKey].max;
        return;
      }
      if (objectKey === "p")
        return;
      currentFiltersResult[objectKey] = currentFilters[objectKey];
    });
    return currentFiltersResult;
  });
  return {
    getInitialListing,
    setInitialListing,
    initSearch,
    search,
    getCurrentListing,
    getElements,
    getSortingOrders,
    getCurrentSortingOrder,
    changeCurrentSortingOrder,
    getCurrentPage,
    changeCurrentPage,
    getTotal,
    getTotalPagesCount,
    getLimit,
    getAvailableFilters,
    getCurrentFilters,
    loading,
    loadMore,
    loadingMore
  };
}

// packages/composables/src/logic/useWishlist.ts
var import_vue6 = __toModule(require("vue"));
var import_composition_api19 = __toModule(require("@vue/composition-api"));
var sharedWishlist = import_vue6.default.observable({
  items: []
});
var useWishlist = (rootContext, product) => {
  const { broadcast, intercept } = useIntercept(rootContext);
  getApplicationContext(rootContext, "useNotifications");
  const localWishlist = (0, import_composition_api19.reactive)(sharedWishlist);
  const productId = (0, import_composition_api19.ref)(product == null ? void 0 : product.id);
  const onAddToWishlist = (fn) => intercept(INTERCEPTOR_KEYS.ADD_TO_WISHLIST, fn);
  const updateStorage = () => {
    localStorage.setItem("sw-wishlist-items", JSON.stringify(sharedWishlist.items));
  };
  const getFromStorage = () => {
    var _a;
    if (typeof window != "undefined" && localStorage) {
      return JSON.parse((_a = localStorage.getItem("sw-wishlist-items")) != null ? _a : "[]");
    }
  };
  (0, import_composition_api19.onMounted)(() => {
    if (!sharedWishlist.items.length) {
      try {
        const currentWishlist = getFromStorage();
        if (Array.isArray(currentWishlist) && currentWishlist.length) {
          sharedWishlist.items = currentWishlist;
        }
      } catch (error) {
        console.error("useWishlist:getFromStorage", error);
      }
    }
  });
  const removeFromWishlist = (itemId) => {
    const id = productId.value || itemId;
    if (!id) {
      return;
    }
    sharedWishlist.items = sharedWishlist.items.filter((itemId2) => itemId2 != id);
    updateStorage();
  };
  const addToWishlist = () => {
    if (!productId.value) {
      return;
    }
    if (!sharedWishlist.items.includes(productId.value)) {
      sharedWishlist.items.push(productId.value);
      updateStorage();
      broadcast(INTERCEPTOR_KEYS.ADD_TO_WISHLIST, {
        product
      });
    }
  };
  const isInWishlist = (0, import_composition_api19.computed)(() => {
    return localWishlist.items.includes(productId.value);
  });
  const clearWishlist = () => {
    sharedWishlist.items = [];
  };
  const items = (0, import_composition_api19.computed)(() => localWishlist.items);
  const count = (0, import_composition_api19.computed)(() => items.value.length);
  return {
    addToWishlist,
    removeFromWishlist,
    isInWishlist,
    clearWishlist,
    items,
    count,
    onAddToWishlist
  };
};

// packages/composables/src/hooks/useCountry.ts
var import_composition_api20 = __toModule(require("@vue/composition-api"));
var useCountry = (countryId, countries) => {
  const currentCountry = (0, import_composition_api20.computed)(() => {
    var _a;
    if (!countryId.value)
      return null;
    return (_a = countries.value.find((country) => country.id === countryId.value)) != null ? _a : null;
  });
  const displayState = (0, import_composition_api20.computed)(() => {
    var _a, _b;
    return (_b = (_a = currentCountry.value) == null ? void 0 : _a.forceStateInRegistration) != null ? _b : false;
  });
  const forceState = (0, import_composition_api20.computed)(() => {
    var _a, _b;
    return (_b = (_a = currentCountry.value) == null ? void 0 : _a.forceStateInRegistration) != null ? _b : false;
  });
  return {
    currentCountry,
    displayState,
    forceState
  };
};

// packages/composables/src/logic/useProductConfigurator.ts
var import_composition_api21 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client13 = __toModule(require("@shopware-pwa/shopware-6-client"));
var useProductConfigurator = (rootContext, product) => {
  var _a, _b;
  const { page } = useCms(rootContext);
  const selected = (0, import_composition_api21.ref)({});
  const isLoadingOptions = (0, import_composition_api21.ref)(!!((_a = product.options) == null ? void 0 : _a.length));
  const parentProductId = (0, import_composition_api21.computed)(() => product.parentId);
  const getOptionGroups = (0, import_composition_api21.computed)(() => page.value.configurator || []);
  const findGroupCodeForOption = (optionId) => {
    var _a2;
    const group = getOptionGroups.value.find((optionGroup) => {
      const optionFound = optionGroup.options.find((option) => option.id === optionId);
      return !!optionFound;
    });
    return (_a2 = group == null ? void 0 : group.translated) == null ? void 0 : _a2.name;
  };
  (_b = product.optionIds) == null ? void 0 : _b.forEach((optionId) => {
    const optionGroupCode = findGroupCodeForOption(optionId);
    if (optionGroupCode) {
      selected.value[optionGroupCode] = optionId;
    }
  });
  const findVariantForSelectedOptions = (options) => __async(void 0, null, function* () {
    var _a2, _b2;
    const { apiInstance } = getApplicationContext(rootContext, "useProductConfigurator");
    const filter = [
      {
        type: "equals",
        field: "parentId",
        value: parentProductId.value
      },
      ...Object.values(options || selected.value).map((id) => ({
        type: "equals",
        field: "optionIds",
        value: id
      }))
    ];
    try {
      if (apiInstance) {
        apiInstance.defaults.headers["sw-include-seo-urls"] = true;
      }
      const response = yield (0, import_shopware_6_client13.invokePost)({
        address: (0, import_shopware_6_client13.getProductEndpoint)(),
        payload: {
          limit: 1,
          filter,
          includes: {
            product: ["id", "translated", "productNumber", "seoUrls"],
            seo_url: ["seoPathInfo"]
          },
          associations: {
            seoUrls: {}
          }
        }
      }, apiInstance);
      return (_b2 = (_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.elements) == null ? void 0 : _b2[0];
    } catch (e) {
      console.error("SwProductDetails:findVariantForSelectedOptions", e);
    }
  });
  const handleChange = (group, option, onChangeHandled) => __async(void 0, null, function* () {
    selected.value = Object.assign({}, selected.value, {
      [group]: option
    });
    if (typeof onChangeHandled === "function") {
      yield onChangeHandled();
    }
  });
  return {
    handleChange,
    findVariantForSelectedOptions,
    isLoadingOptions,
    getOptionGroups,
    getSelectedOptions: selected
  };
};

// packages/composables/src/logic/useBreadcrumbs.ts
var import_vue7 = __toModule(require("vue"));
var import_composition_api22 = __toModule(require("@vue/composition-api"));
var sharedBreadcrumbs = import_vue7.default.observable({
  list: []
});
function useBreadcrumbs(rootContext, params) {
  const { i18n } = getApplicationContext(rootContext, "useBreadcrumbs");
  let localBreadcrumbs = (0, import_composition_api22.reactive)(sharedBreadcrumbs);
  const clear = () => {
    sharedBreadcrumbs.list = [];
  };
  const setBreadcrumbs = (breadcrumbs) => {
    sharedBreadcrumbs.list = breadcrumbs || [];
  };
  return {
    clear,
    setBreadcrumbs,
    breadcrumbs: (0, import_composition_api22.computed)(() => {
      if (!!(params == null ? void 0 : params.hideHomeLink) || !localBreadcrumbs.list.length)
        return localBreadcrumbs.list;
      return [
        {
          name: i18n.t("Home"),
          path: "/"
        },
        ...localBreadcrumbs.list
      ];
    })
  };
}

// packages/composables/src/logic/useProductAssociations.ts
var import_composition_api23 = __toModule(require("@vue/composition-api"));
var import_shopware_6_client14 = __toModule(require("@shopware-pwa/shopware-6-client"));
function useProductAssociations(rootContext, product, association) {
  const { apiInstance } = getApplicationContext(rootContext, "useProductAssociations");
  const isLoading = (0, import_composition_api23.ref)(false);
  const associations = (0, import_composition_api23.ref)([]);
  const loadAssociations = (..._0) => __async(this, [..._0], function* ({
    method,
    params
  } = {}) {
    isLoading.value = true;
    try {
      if (method && method === "get") {
        const response2 = yield (0, import_shopware_6_client14.invokeGet)({
          address: `${(0, import_shopware_6_client14.getProductDetailsEndpoint)(product.id)}/${association}${params ? params : ""}`
        }, apiInstance);
        associations.value = response2 == null ? void 0 : response2.data;
        return;
      }
      const response = yield (0, import_shopware_6_client14.invokePost)({
        address: `${(0, import_shopware_6_client14.getProductDetailsEndpoint)(product.id)}/${association}`,
        payload: params
      }, apiInstance);
      associations.value = response == null ? void 0 : response.data;
    } catch (error) {
      console.error("[useProductAssociations][loadAssociations][error]:", error);
    } finally {
      isLoading.value = false;
    }
  });
  return {
    isLoading: (0, import_composition_api23.computed)(() => isLoading.value),
    productAssociations: (0, import_composition_api23.computed)(() => associations.value || []),
    loadAssociations
  };
}

// packages/composables/src/logic/useSharedState.ts
var import_composition_api24 = __toModule(require("@vue/composition-api"));
var localSharedState = {};
function useSharedState(rootContext) {
  const { sharedStore, isServer } = getApplicationContext(rootContext, "useSharedState");
  function sharedRef(uniqueKey) {
    if (!isServer && !localSharedState[uniqueKey]) {
      localSharedState[uniqueKey] = (0, import_composition_api24.ref)(sharedStore[uniqueKey]);
    }
    const sharedRef2 = isServer ? (0, import_composition_api24.toRef)(sharedStore, uniqueKey) : localSharedState[uniqueKey];
    return (0, import_composition_api24.computed)({
      get: () => {
        return sharedRef2.value || null;
      },
      set: (val) => {
        sharedRef2.value = val;
      }
    });
  }
  function preloadRef(refObject, callback) {
    return __async(this, null, function* () {
      if (!refObject.value) {
        if (isServer && (0, import_composition_api24.getCurrentInstance)()) {
          (0, import_composition_api24.onServerPrefetch)(() => __async(this, null, function* () {
            yield callback();
          }));
          return;
        }
        yield callback();
      }
    });
  }
  return {
    sharedRef,
    preloadRef
  };
}
