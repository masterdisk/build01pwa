import { Aggregations } from '@shopware-pwa/commons/interfaces/search/Aggregations';
import { Category } from '@shopware-pwa/commons/interfaces/models/content/category/Category';
import { CmsBlock } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsBlock';
import { CmsPage } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { CmsSection } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { CmsSlot } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { Country } from '@shopware-pwa/commons/interfaces/models/system/country/Country';
import { Order } from '@shopware-pwa/commons/interfaces/models/checkout/order/Order';
import { PageResolverProductResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { PageResolverResult } from '@shopware-pwa/commons/interfaces/models/content/cms/CmsPage';
import { Product } from '@shopware-pwa/commons/interfaces/models/content/product/Product';
import { PropertyGroupOption } from '@shopware-pwa/commons/interfaces/models/content/property/PropertyGroupOption';
import { Salutation } from '@shopware-pwa/commons/interfaces/models/system/salutation/Salutation';
import { SearchCriteria } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { ShopwareError } from '@shopware-pwa/commons/interfaces/errors/ApiError';
import { Sort } from '@shopware-pwa/commons/interfaces/search/SearchCriteria';
import { StoreNavigationElement } from '@shopware-pwa/commons/interfaces/models/content/navigation/Navigation';

/**
 * @alpha
 */
export declare interface CategoryFilterEntityValue {
    name: string;
    description: string | null;
    customFields: any;
    colorHexCode: null | string;
}

/**
 * @alpha
 */
export declare interface CategoryFilterEntityValues {
    [valueId: string]: CategoryFilterEntityValue;
}

/**
 * @alpha
 */
export declare interface CategoryFilterRangeValues {
    max: string;
    min: string;
}

/**
 * @alpha
 */
export declare interface CategoryFilterTermValue {
    key: string;
    count: number;
    extensions: any;
}

/**
 * @alpha
 */
export declare function debounce<T extends (...args: any[]) => any>(fn: T, delay?: number): T;

/**
 * @alpha
 */
export declare function exportUrlQuery(searchCriteria: SearchCriteria): string | undefined;

/**
 * @alpha
 */
export declare interface Filter {
    /**
     * @alpha
     */
    [filterCode: string]: {
        type: UiCategoryFilterType;
        name: string;
        values: CategoryFilterRangeValues | CategoryFilterEntityValues | CategoryFilterTermValue[];
    };
}

/**
 * @alpha
 */
export declare function getCategoryAvailableFilters({ filters, }?: {
    filters?: Filter;
}): UiCategoryFilter[];

/**
 * @alpha
 */
export declare function getCategoryAvailableSorting({ sorting, }?: {
    sorting?: Sorting;
}): UiCategorySorting[];

/**
 * Get URL for category.
 *
 * @beta
 */
export declare const getCategoryUrl: (category: Partial<Category>) => string;

/**
 * @beta
 */
export declare function getCmsLayoutConfiguration(content: CmsBlock | CmsSection): LayoutConfiguration;

/**
 * @alpha
 */
export declare function getCmsLink(content?: CmsSlot): String;

/**
 * @alpha
 */
export declare function getCmsLinkTarget(content?: CmsSlot): String;

/**
 * @alpha
 */
export declare function getCmsSections(content: CmsPage): CmsSection[];

/**
 * @beta
 */
export declare function getCmsTechnicalPath(page: PageResolverResult<CmsPage> | PageResolverProductResult): string | undefined;

/**
 * @alpha
 */
export declare const getFilterSearchCriteria: (selectedFilters: any) => any[];

/**
 * @beta
 */
export declare function getListingAvailableFilters(aggregations: Aggregations | undefined | null): UiCategoryFilter[];

/**
 * @beta
 */
export declare function getListingFilters(aggregations: Aggregations | undefined | null): ListingFilter[];

/**
 * Get the messages from the API response (array of ShopwareErrors)
 *
 * @alpha
 */
export declare function getMessagesFromErrorsArray(errors: ShopwareError[]): string[];

/**
 * get payment method's id from open transaction
 *
 * @alpha
 */
export declare function getOrderPaymentMethodId(order: Order): string | undefined;

/**
 * get shipping method's id from open transaction
 *
 * @alpha
 */
export declare function getOrderShippingMethodId(order: Order): string | undefined;

/**
 * Get the calculated list price
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductCalculatedListingPrice(product: Product): number | undefined;

/**
 * Get the calculated list price
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductCalculatedPrice(product: Product): number | undefined;

/**
 * Get product free shipping property
 *
 * @alpha
 */
export declare function getProductFreeShipping(product?: Product): boolean;

/**
 * gets the cover image
 *
 * @alpha
 */
export declare function getProductMainImageUrl(product: Product): string;

/**
 * @alpha
 */
export declare function getProductMediaGallery({ product, }?: {
    product?: Product;
}): UiMediaGalleryItem[];

/**
 * @beta
 */
export declare function getProductName({ product }?: {
    product?: Product;
}): string | null;

/**
 * Get product number propety
 *
 * @alpha
 */
export declare function getProductNumber(product: Product): string | null;

/**
 * @alpha
 */
export declare function getProductOption({ product, attribute, }?: {
    product?: Product;
    attribute?: string;
}): PropertyGroupOption | undefined;

/**
 * @beta
 */
export declare function getProductOptions({ product, }?: {
    product?: Product;
}): UiProductOption[];

/**
 * @alpha
 */
export declare function getProductOptionsUrl({ product, options, }?: {
    product?: Product;
    options?: string[];
}): string | undefined;

/**
 * Get value of price discount
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductPriceDiscount(product: Product): number | undefined;

/**
 * Get the percentage value of discount
 *
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductPriceDiscountPercentage(product: Product): number | undefined;

/**
 * @alpha
 */
export declare function getProductProperties({ product, }?: {
    product?: Product;
}): UiProductProperty[];

/**
 * Get product rating average property
 *
 * @alpha
 */
export declare function getProductRatingAverage(product: Product): number | null;

/**
 * Get the price for 1 unit of a product
 *
 * @deprecated consider using getCalculatedListingPrice or getProductCalculatedPrice instead
 * @returns (number|undefined)
 *
 * @beta
 */
export declare function getProductRegularPrice(product: Product): number | undefined;

/**
 * @alpha
 */
export declare function getProductReviews({ product, }?: {
    product?: Product;
}): UiProductReview[];

/**
 * Get the lowest price from the prices array.
 * Advanced pricing can be set in `Advanced pricing` tab in `Product view` (admin panel)
 *
 *
 * @deprecated consider using getCalculatedListingPrice or getProductCalculatedPrice
 * @returns (number|undefined)
 * @alpha
 */
export declare function getProductSpecialPrice(product: Product): number | undefined;

/**
 * get the thumbnail image URL with the smallest width
 *
 * @beta
 */
export declare function getProductThumbnailUrl(product: Product): string;

/**
 * Get the prices depending on quantity added to cart.
 * Tier prices can be set in `Advanced pricing` tab in `Product view` (admin panel)
 *
 * @returns TierPrice[]
 * @beta
 */
export declare function getProductTierPrices(product: Product): TierPrice[];

/**
 * @alpha
 */
export declare function getProductUrl(product: Product | null): string;

/**
 * @alpha
 */
export declare const getSortingSearchCriteria: (selectedSorting: SwSorting) => Sort;

/**
 * @beta
 * @deprecated use getCategoryUrl instead. Will be removed after v0.8
 */
export declare function getStoreNavigationRoutes(navigationElements: StoreNavigationElement[]): StoreNavigationRoute[];

/**
 * @alpha
 */
export declare function getVariantOptionsLabel({ product, }?: {
    product?: Product;
}): string | null;

/**
 *
 * @beta
 */
export declare const isLinkCategory: (category: Partial<Category>) => boolean;

/**
 * Check if the current optionId is also present in matching option ids of other available variants.
 * @deprecated - the availability of the options is checked dynamically using API
 * @beta
 */
export declare function isOptionAvailableForSelectedOptions(currentAttribute: string, selectedOptionId: string, { code: optionId }: UiProductOption | undefined, allOptions: any, allSelectedOptions: {
    [key: string]: string;
}): boolean;

/**
 * @beta
 */
export declare function isProductSimple({ product, }?: {
    product?: Product;
}): boolean;

/**
 * @beta
 */
export declare interface LayoutConfiguration {
    layoutStyles: {
        backgroundColor: string | null;
        backgroundImage: string | null;
        marginBottom?: string | null | undefined;
        marginLeft?: string | null | undefined;
        marginRight?: string | null | undefined;
        marginTop?: string | null | undefined;
    };
    cssClasses: string | null;
}

/**
 * @beta
 */
export declare interface ListingFilter {
    label: string;
    code: string;
    [key: string]: any;
}

/**
 * Helper for plugins to load external scripts for plugins
 *
 * @beta
 *
 */
export declare function loadScript(src: string): Promise<void>;

/**
 * Map available countries to (`name`: string | null, id: `string`) format
 *
 * @returns MappedCountries
 * @alpha
 **/
export declare function mapCountries(countries: Country[]): MappedCountry[];

/**
 * @alpha
 */
export declare interface MappedCountry {
    name: string | null;
    id: string;
}

/**
 * @alpha
 */
export declare interface MappedSalutation {
    name: string | null;
    id: string;
}

/**
 * Map available salutations to (`name`: string, `id`: string) format
 *
 * @returns MappedSalutations
 * @alpha
 **/
export declare function mapSalutations(salutations: Salutation[]): MappedSalutation[];

/**
 * @alpha
 */
export declare function parseUrlQuery(query: any): SearchCriteria;

/**
 * @alpha
 */
export declare interface Sorting {
    [sortingCode: string]: {
        key: string;
        active: boolean;
    };
}

/**
 * @beta
 */
export declare interface StoreNavigationRoute {
    routeLabel: string;
    routePath: string | undefined;
    isExternal: boolean;
    children?: StoreNavigationRoute[] | null;
}

/**
 * @alpha
 */
export declare interface SwSorting {
    name: string;
    active: boolean;
    field: string;
    order: string;
    translated: any;
}

/**
 * @beta
 */
export declare interface TierPrice {
    label: string;
    quantity: number;
    unitPrice: number;
}

/**
 * @beta
 */
export declare interface UiCategoryFilter {
    name: string;
    type: UiCategoryFilterType;
    options: UiCategoryFilterOption[] | UiCategoryRangeFilterOption | any;
}

/**
 * @beta
 */
export declare interface UiCategoryFilterOption {
    color: boolean | string;
    label: string;
    value: string;
    count?: number;
}

/**
 * @beta
 */
export declare enum UiCategoryFilterType {
    range = "range",
    term = "term",
    max = "max",
    entity = "entity"
}

/**
 * @beta
 */
export declare interface UiCategoryRangeFilterOption {
    max: string;
    min: string;
}

/**
 * @alpha
 */
export declare interface UiCategorySorting {
    name: string;
    active: boolean;
    field: string;
    order: string;
}

/**
 * @alpha
 */
export declare interface UiMediaGalleryItem {
    icon: UiMediaGalleryItemUrl;
    mobile: UiMediaGalleryItemUrl;
    desktop: UiMediaGalleryItemUrl;
}

/**
 * @alpha
 */
export declare interface UiMediaGalleryItemUrl {
    url: string;
}

/**
 * @beta
 */
export declare interface UiProductOption {
    label: string;
    value: string;
    code: string;
    color: string | null;
}

/**
 * @alpha
 */
export declare interface UiProductProperty {
    name: string;
    value: string | null;
}

/**
 * @alpha
 */
export declare interface UiProductReview {
    id: string;
    author: string;
    date: Date;
    message: string | null;
    rating: number | null;
}

export { }
