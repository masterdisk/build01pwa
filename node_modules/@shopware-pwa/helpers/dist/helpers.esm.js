// packages/helpers/src/product/getProductFreeShipping.ts
function getProductFreeShipping(product) {
  return product?.shippingFree || false;
}

// packages/helpers/src/product/getProductMainImageUrl.ts
function getProductMainImageUrl(product) {
  return product?.cover?.media?.url || product?.cover?.url || "";
}

// packages/helpers/src/product/getProductMediaGallery.ts
function getProductMediaGallery({
  product
} = {}) {
  return product && product.media ? product.media.map((media) => {
    const smallThumb = media.media && media.media.thumbnails && media.media.thumbnails.find((thumb) => thumb.width == "400");
    const normalThumb = media.media && media.media.thumbnails && media.media.thumbnails.find((thumb) => thumb.width == "800");
    const bigThumb = media.media && media.media.thumbnails && media.media.thumbnails.find((thumb) => thumb.width == "1920");
    return {
      icon: { url: smallThumb ? smallThumb.url : media.media.url },
      mobile: { url: normalThumb ? normalThumb.url : media.media.url },
      desktop: { url: bigThumb ? bigThumb.url : media.media.url },
      alt: product.name || " "
    };
  }) : [];
}

// packages/helpers/src/product/getProductName.ts
function getProductName({ product } = {}) {
  if (!product) {
    return null;
  }
  return product.translated?.name || product.name;
}

// packages/helpers/src/product/getProductNumber.ts
function getProductNumber(product) {
  return product?.productNumber;
}

// packages/helpers/src/product/getProductOption.ts
function getProductOption({
  product,
  attribute
} = {}) {
  return product?.options?.find((option) => option.group && option.group.translated && option.group.translated.name === attribute);
}

// packages/helpers/src/product/getProductOptions.ts
function getProductOptions({
  product
} = {}) {
  return product?.options?.map((option) => ({
    label: option.translated?.name || option.name,
    code: option.id,
    value: option.translated?.name || option.name,
    color: option.colorHexCode
  })) || [];
}

// packages/helpers/src/product/getProductUrl.ts
function getProductUrl(product) {
  if (!product)
    return "/";
  const seoUrl = product.seoUrls?.[0]?.seoPathInfo;
  return seoUrl ? `/${seoUrl}` : `/detail/${product.id}`;
}

// packages/helpers/src/product/getProductOptionsUrl.ts
function getProductOptionsUrl({
  product,
  options
} = {}) {
  if (!product)
    return "";
  const variant = options && product.children && product.children.filter((variant2) => variant2.optionIds && variant2.optionIds.every((optionId) => options.includes(optionId))).shift();
  return variant && getProductUrl(variant);
}

// packages/helpers/src/product/getProductProperties.ts
function getProductProperties({
  product
} = {}) {
  const propertyList = product?.properties?.map((property) => ({
    name: property.group?.translated?.name || "",
    value: property.translated?.name || property.name
  }));
  return propertyList || [];
}

// packages/helpers/src/product/getProductRegularPrice.ts
function getProductRegularPrice(product) {
  return product?.calculatedPrice?.unitPrice;
}

// packages/helpers/src/product/getProductReviews.ts
function getProductReviews({
  product
} = {}) {
  if (!product || !product.productReviews) {
    return [];
  }
  return product.productReviews.map(({ id, externalUser, customerId, createdAt, content, points }) => ({
    id,
    author: externalUser ? externalUser : customerId,
    date: createdAt,
    message: content,
    rating: points
  }));
}

// packages/helpers/src/product/getProductSpecialPrice.ts
function getProductSpecialPrice(product) {
  return product?.calculatedPrices?.[0]?.unitPrice;
}

// packages/helpers/src/product/getProductTierPrices.ts
function getProductTierPrices(product) {
  if (!product || !product.calculatedPrices?.length) {
    return [];
  }
  const size = product.calculatedPrices.length;
  return product.calculatedPrices.map(({ unitPrice, quantity }, index) => ({
    label: index === size - 1 ? `from ${quantity}` : `to ${quantity}`,
    quantity,
    unitPrice
  }));
}

// packages/helpers/src/product/getProductRatingAverage.ts
function getProductRatingAverage(product) {
  return product?.ratingAverage;
}

// packages/helpers/src/product/getVariantOptionsLabel.ts
function getVariantOptionsLabel({
  product
} = {}) {
  if (!product || !product.options || product.options && !product.options.length) {
    return null;
  }
  let variantLabel = "";
  for (let { name } of product.options) {
    variantLabel += `${name} `;
  }
  return variantLabel.trim();
}

// packages/helpers/src/product/isProductSimple.ts
function isProductSimple({
  product
} = {}) {
  return !!product?.parentId && product.id !== product.parentId;
}

// packages/helpers/src/product/getProductThumbnailUrl.ts
function getProductThumbnailUrl(product) {
  const coverImageUrlFallback = product?.cover?.media?.url || "";
  const thumbnailImage = product?.cover?.media?.thumbnails?.length && product.cover.media.thumbnails.reduce(function(res, thumb) {
    return thumb.width < res.width ? thumb : res;
  }) || null;
  return thumbnailImage?.url || coverImageUrlFallback;
}

// packages/helpers/src/product/getProductPriceDiscount.ts
function getProductPriceDiscount(product) {
  return product?.calculatedPrice?.listPrice?.discount;
}

// packages/helpers/src/product/getProductPriceDiscountPercentage.ts
function getProductPriceDiscountPercentage(product) {
  return product?.calculatedPrice?.listPrice?.percentage;
}

// packages/helpers/src/product/getProductCalculatedPrice.ts
function getProductCalculatedPrice(product) {
  return product?.calculatedPrice?.unitPrice;
}

// packages/helpers/src/product/getProductCalculatedListingPrice.ts
function getProductCalculatedListingPrice(product) {
  return product?.calculatedPrice?.listPrice?.price || product?.calculatedPrice?.unitPrice;
}

// packages/helpers/src/product/isOptionAvailableForSelectedOptions.ts
function isOptionAvailableForSelectedOptions(currentAttribute, selectedOptionId, { code: optionId } = {}, allOptions, allSelectedOptions) {
  if (!currentAttribute || !selectedOptionId || !optionId || !allOptions || !allSelectedOptions) {
    return false;
  }
  if (optionId == selectedOptionId) {
    return true;
  }
  let matchingOptions = false;
  Object.entries(allSelectedOptions).forEach(([attribute, selectedId]) => {
    if (attribute !== currentAttribute) {
      allOptions[attribute].forEach((otherOption) => {
        if (otherOption.code === selectedId) {
          matchingOptions = otherOption["matchingIds"].includes(optionId);
        }
      });
    }
  });
  return matchingOptions;
}

// packages/helpers/src/ui-interfaces.ts
var UiCategoryFilterType;
(function(UiCategoryFilterType2) {
  UiCategoryFilterType2["range"] = "range";
  UiCategoryFilterType2["term"] = "term";
  UiCategoryFilterType2["max"] = "max";
  UiCategoryFilterType2["entity"] = "entity";
})(UiCategoryFilterType || (UiCategoryFilterType = {}));

// packages/helpers/src/category/getCategoryAvailableFilters.ts
var convertTermFilterValues = (values) => {
  return values.map(({ key, count }) => ({
    value: key,
    label: key,
    count
  }));
};
var convertEntityFilterValues = (values) => {
  return !values ? [] : Object.entries(values).map(([valueId, { name, colorHexCode }]) => {
    let filterValue = {
      value: valueId,
      label: name
    };
    if (colorHexCode) {
      filterValue = Object.assign({}, filterValue, { color: colorHexCode });
    }
    return filterValue;
  });
};
var convertOptionsByType = ({
  type,
  values
}) => {
  switch (type) {
    case UiCategoryFilterType.term:
      return convertTermFilterValues(values);
    case UiCategoryFilterType.entity:
      return convertEntityFilterValues(values);
    default:
      return values;
  }
};
function getCategoryAvailableFilters({
  filters
} = {}) {
  if (!filters) {
    return [];
  }
  const filtersTransformed = Object.entries(filters).map(([filterCode, { name, values, type }]) => {
    return {
      name: name || filterCode,
      type,
      options: convertOptionsByType({
        type,
        values
      })
    };
  });
  return filtersTransformed;
}

// packages/helpers/src/category/getCategoryAvailableSorting.ts
function getCategoryAvailableSorting({
  sorting
} = {}) {
  if (!sorting) {
    return [];
  }
  const sortingTransformed = Object.entries(sorting).map(([sortingCode, { active }]) => ({
    name: sortingCode,
    active,
    field: sortingCode.split("-")[0],
    order: sortingCode.split("-")[1]
  }));
  return sortingTransformed;
}

// packages/helpers/src/category/getCategoryUrl.ts
var getCategoryUrl = (category) => {
  if (!category)
    return "/";
  switch (category.type) {
    case "link":
      return category.translated?.externalLink || category.externalLink || "/";
    case "folder":
      return "/";
    default:
      return category.seoUrls?.[0]?.seoPathInfo ? `/${category.seoUrls[0].seoPathInfo}` : category.id ? `/navigation/${category.id}` : "/";
  }
};
var isLinkCategory = (category) => category?.type === "link";

// packages/helpers/src/country/mapCountries.ts
function mapCountries(countries) {
  if (!countries?.length)
    return [];
  const mappedCountries = countries.map((country) => ({
    name: country.translated?.name || country.name,
    id: country.id
  }));
  return mappedCountries.filter((country) => country.name !== null);
}

// packages/helpers/src/cms/getCmsLink.ts
function getCmsLink(content) {
  return content?.data?.url || "";
}

// packages/helpers/src/cms/getCmsLinkTarget.ts
function getCmsLinkTarget(content) {
  const inNewTab = content?.data?.newTab;
  return inNewTab ? "_blank" : "_self";
}

// packages/helpers/src/cms/getCmsSections.ts
function getCmsSections(content) {
  return content?.sections || [];
}

// packages/commons/interfaces/models/content/cms/CmsPage.ts
var PageType;
(function(PageType2) {
  PageType2["PRODUCT_DETAIL_PAGE"] = "frontend.detail.page";
  PageType2["NAVIGATION_PAGE"] = "frontend.navigation.page";
})(PageType || (PageType = {}));
var CmsPageType;
(function(CmsPageType2) {
  CmsPageType2["DEFAULT"] = "default";
  CmsPageType2["PRODUCT_LISTING"] = "product_list";
  CmsPageType2["LANDING_PAGE"] = "landingpage";
})(CmsPageType || (CmsPageType = {}));
var CmsSlotType;
(function(CmsSlotType2) {
  CmsSlotType2["IMAGE"] = "image";
  CmsSlotType2["PRODUCT_SLIDER"] = "product-slider";
  CmsSlotType2["PRODUCT_LISTING"] = "product-listing";
  CmsSlotType2["PRODUCT_BOX"] = "product-box";
  CmsSlotType2["SLOT"] = "slot";
  CmsSlotType2["TEXT"] = "text";
})(CmsSlotType || (CmsSlotType = {}));
var SectionType;
(function(SectionType2) {
  SectionType2["DEFAULT"] = "default";
})(SectionType || (SectionType = {}));
var SizingMode;
(function(SizingMode2) {
  SizingMode2["BOXED"] = "boxed";
})(SizingMode || (SizingMode = {}));
var MobileBehavior;
(function(MobileBehavior2) {
  MobileBehavior2["BOXED"] = "boxed";
  MobileBehavior2["WRAP"] = "wrap";
})(MobileBehavior || (MobileBehavior = {}));
var BackgroundMediaMode;
(function(BackgroundMediaMode2) {
  BackgroundMediaMode2["COVER"] = "cover";
})(BackgroundMediaMode || (BackgroundMediaMode = {}));

// packages/helpers/src/cms/getCmsTechnicalPath.ts
var PRODUCT_PAGE_PREFIX = "/detail";
var NAVIGATION_PAGE_PREFIX = "/navigation";
var getProductTechnicalPath = (product) => `${PRODUCT_PAGE_PREFIX}/${product.id}`;
var getNavigationTechnicalPath = (cmsPage) => `${NAVIGATION_PAGE_PREFIX}/${cmsPage.resourceIdentifier}`;
function getCmsTechnicalPath(page) {
  if (!page?.resourceType) {
    return;
  }
  switch (page.resourceType) {
    case PageType.NAVIGATION_PAGE:
      return getNavigationTechnicalPath(page);
    case PageType.PRODUCT_DETAIL_PAGE:
      return getProductTechnicalPath(page.product);
    default:
      throw Error(`Cannot extract a technical URL for provided page type: ${page.resourceType}`);
  }
}

// packages/helpers/src/cms/getCmsLayoutConfiguration.ts
function getCmsLayoutConfiguration(content) {
  if (!content) {
    return {
      cssClasses: null,
      layoutStyles: {}
    };
  }
  return {
    cssClasses: content.cssClass,
    layoutStyles: {
      backgroundColor: content.backgroundColor,
      backgroundImage: content.backgroundMedia ? `url(${content.backgroundMedia.url})` : null,
      marginBottom: content.marginBottom,
      marginLeft: content.marginLeft,
      marginRight: content.marginRight,
      marginTop: content.marginTop
    }
  };
}

// packages/helpers/src/urlHelpers.ts
import queryString from "query-string";
function parseUrlQuery(query) {
  const searchCriteria = {};
  if (!query || typeof query !== "object") {
    return searchCriteria;
  }
  Object.keys(query).forEach((key) => {
    try {
      searchCriteria[key] = typeof query[key] === "string" && ["{", "["].includes(query[key].charAt(0)) ? JSON.parse(query[key]) : query[key];
    } catch (e) {
      console.error("[helpers][parseUrlQuery] Problem with resolving url param: " + key);
    }
  });
  return searchCriteria;
}
function exportUrlQuery(searchCriteria) {
  if (!searchCriteria) {
    return;
  }
  const sC = searchCriteria;
  const query = {};
  Object.keys(searchCriteria).forEach((key) => {
    query[key] = JSON.stringify(sC[key]);
  });
  return queryString.stringify(query);
}

// packages/commons/interfaces/search/SearchFilter.ts
var SearchFilterType;
(function(SearchFilterType2) {
  SearchFilterType2["EQUALS"] = "equals";
  SearchFilterType2["CONTAINS"] = "contains";
  SearchFilterType2["EQUALS_ANY"] = "equalsAny";
  SearchFilterType2["NOT"] = "not";
  SearchFilterType2["MULTI"] = "multi";
  SearchFilterType2["RANGE"] = "range";
  SearchFilterType2["MAX"] = "max";
})(SearchFilterType || (SearchFilterType = {}));

// packages/helpers/src/listing/filters.ts
var createMultiFilter = (operator, queries) => ({
  type: SearchFilterType.MULTI,
  operator,
  queries
});
var createRangeFilter = (filterData, field) => ({
  type: SearchFilterType.RANGE,
  field,
  parameters: filterData
});
var createMaxFilter = (filterData, field) => ({
  type: SearchFilterType.MAX,
  field,
  max: filterData.max
});
var createEqualsFilter = (value, field) => ({
  type: SearchFilterType.EQUALS,
  field,
  value
});
var createEqualsAnyFilter = (values, field = "propertyIds") => {
  if (!Array.isArray(values)) {
    throw "EqualsAnyFilter value is not an array";
  }
  const valuesFiltered = values.filter((value) => !!value);
  if (!valuesFiltered.length) {
    throw "EqualsAnyFilter has no values provided";
  }
  return {
    type: SearchFilterType.EQUALS_ANY,
    field,
    value: valuesFiltered
  };
};
var extractFilter = (filterCode, filterData) => {
  let extractedFilter = null;
  switch (filterCode) {
    case "price":
      extractedFilter = createRangeFilter(filterData, filterCode);
      break;
    case "shipping-free":
      extractedFilter = createMaxFilter(filterData, filterCode);
      break;
    case "rating":
      extractedFilter = createMaxFilter(filterData, filterCode);
      break;
    case "categoryTree":
      extractedFilter = createEqualsFilter(filterData.shift(), "product.categoriesRo.id");
      break;
    case "manufacturer":
      extractedFilter = createEqualsAnyFilter(filterData, "manufacturerId");
      break;
    default:
      const subFilters = [];
      subFilters.push(createEqualsAnyFilter(filterData));
      subFilters.push(createEqualsAnyFilter(filterData, "optionIds"));
      extractedFilter = createMultiFilter("OR", subFilters);
  }
  return extractedFilter;
};
var getFilterSearchCriteria = (selectedFilters) => {
  const filters = [];
  if (!selectedFilters) {
    return filters;
  }
  for (const filterName of Object.keys(selectedFilters)) {
    try {
      filters.push(extractFilter(filterName, selectedFilters[filterName]));
    } catch (error) {
      console.warn("helpers:getFilterSearchCriteria:extractFilter", error);
    }
  }
  return filters;
};
var getSortingSearchCriteria = (selectedSorting) => {
  if (!selectedSorting) {
    return {};
  }
  return {
    field: selectedSorting.field,
    name: selectedSorting.translated?.name || selectedSorting.name,
    desc: selectedSorting.order === "desc"
  };
};

// packages/helpers/src/listing/getListingAvailableFilters.ts
var getFilterType = (aggregation) => {
  if (aggregation.entities && Array.isArray(aggregation.entities)) {
    return UiCategoryFilterType.entity;
  }
  if (aggregation.hasOwnProperty("max") && aggregation.hasOwnProperty("min")) {
    return UiCategoryFilterType.range;
  }
  if (aggregation.hasOwnProperty("max") && !aggregation.min) {
    return UiCategoryFilterType.max;
  }
  throw new Error("Unrecognized type");
};
var extractEntityTypeFilter = (name, options) => ({
  name,
  type: UiCategoryFilterType.entity,
  options: options.map((filterData) => ({
    label: filterData.translated?.name || filterData.name,
    value: filterData.id,
    color: filterData.colorHexCode,
    ...filterData
  }))
});
function getListingAvailableFilters(aggregations) {
  if (!aggregations) {
    return [];
  }
  const transformedFilters = [];
  for (const [aggregationName, aggregation] of Object.entries(aggregations)) {
    try {
      const filterType = getFilterType(aggregation);
      if (filterType === UiCategoryFilterType.entity) {
        if (aggregationName === "properties") {
          for (const property of aggregation.entities) {
            transformedFilters.push(extractEntityTypeFilter(property.translated?.name || property.name, property.options));
          }
        } else {
          transformedFilters.push(extractEntityTypeFilter(aggregationName, aggregation.entities));
        }
      } else {
        transformedFilters.push({
          name: aggregationName,
          type: filterType,
          ...aggregation
        });
      }
    } catch (error) {
      console.warn(`[helpers][getListingAvailableFilters][getFilterType]: ${error} | ${aggregationName}`);
    }
  }
  return transformedFilters;
}

// packages/helpers/src/listing/getListingFilters.ts
var getFilter = (code, aggregation) => {
  return {
    label: aggregation.translated?.name || code,
    code,
    ...aggregation
  };
};
function getListingFilters(aggregations) {
  if (!aggregations) {
    return [];
  }
  const transformedFilters = [];
  for (const [aggregationName, aggregation] of Object.entries(aggregations)) {
    if (aggregationName === "properties" && aggregation.entities) {
      for (const property of aggregation.entities) {
        transformedFilters.push(getFilter(aggregationName, property));
      }
    } else if (!["properties", "options"].includes(aggregationName)) {
      transformedFilters.push(getFilter(aggregationName, aggregation));
    }
  }
  return transformedFilters;
}

// packages/helpers/src/navigation/getStoreNavigationRoutes.ts
function getStoreNavigationRoutes(navigationElements) {
  return navigationElements.map((element) => ({
    routeLabel: element.translated?.name || element.name,
    isExternal: !!element.externalLink,
    routePath: element.externalLink || element.seoUrls?.[0]?.seoPathInfo && `/${element.seoUrls[0].seoPathInfo}`,
    children: element.children && getStoreNavigationRoutes(element.children)
  }));
}

// packages/helpers/src/salutation/mapSalutations.ts
function mapSalutations(salutations) {
  if (!salutations?.length)
    return [];
  const mappedSalutations = salutations.map((salutation) => ({
    name: salutation.displayName ?? salutation.salutationKey,
    id: salutation.id
  }));
  return mappedSalutations.filter((mappedSalutation) => mappedSalutation.name !== null);
}

// packages/helpers/src/error/index.ts
function getMessagesFromErrorsArray(errors) {
  if (!errors?.length || !Array.isArray(errors)) {
    return [];
  }
  return errors.map(({ detail, source }) => detail && source && source.pointer && `${source.pointer.substring(1)}: ${detail}`).filter((message) => message);
}

// packages/helpers/src/order/getOrderPaymentMethodId.ts
function getOrderPaymentMethodId(order) {
  const openTransaction = order?.transactions?.find(({ stateMachineState }) => stateMachineState?.technicalName === "open");
  return openTransaction?.paymentMethodId;
}

// packages/helpers/src/order/getOrderShippingMethodId.ts
function getOrderShippingMethodId(order) {
  const openDelivery = order?.deliveries?.find(({ stateMachineState }) => stateMachineState?.technicalName === "open");
  return openDelivery?.shippingMethodId;
}

// packages/helpers/src/plugins/loadScript.ts
function loadScript(src) {
  return new Promise(function(resolve, reject) {
    if (!document || document.querySelector('script[src="' + src + '"]')) {
      resolve();
      return;
    }
    const el = document.createElement("script");
    el.type = "text/javascript";
    el.async = true;
    el.src = src;
    el.addEventListener("load", resolve);
    el.addEventListener("error", reject);
    el.addEventListener("abort", reject);
    document.head.appendChild(el);
  });
}

// packages/helpers/src/debounce.ts
function debounce(fn, delay = 300) {
  let prevTimer = null;
  return (...args) => {
    if (prevTimer) {
      clearTimeout(prevTimer);
    }
    prevTimer = window.setTimeout(() => {
      fn(...args);
      prevTimer = null;
    }, delay);
  };
}
export {
  UiCategoryFilterType,
  debounce,
  exportUrlQuery,
  getCategoryAvailableFilters,
  getCategoryAvailableSorting,
  getCategoryUrl,
  getCmsLayoutConfiguration,
  getCmsLink,
  getCmsLinkTarget,
  getCmsSections,
  getCmsTechnicalPath,
  getFilterSearchCriteria,
  getListingAvailableFilters,
  getListingFilters,
  getMessagesFromErrorsArray,
  getOrderPaymentMethodId,
  getOrderShippingMethodId,
  getProductCalculatedListingPrice,
  getProductCalculatedPrice,
  getProductFreeShipping,
  getProductMainImageUrl,
  getProductMediaGallery,
  getProductName,
  getProductNumber,
  getProductOption,
  getProductOptions,
  getProductOptionsUrl,
  getProductPriceDiscount,
  getProductPriceDiscountPercentage,
  getProductProperties,
  getProductRatingAverage,
  getProductRegularPrice,
  getProductReviews,
  getProductSpecialPrice,
  getProductThumbnailUrl,
  getProductTierPrices,
  getProductUrl,
  getSortingSearchCriteria,
  getStoreNavigationRoutes,
  getVariantOptionsLabel,
  isLinkCategory,
  isOptionAvailableForSelectedOptions,
  isProductSimple,
  loadScript,
  mapCountries,
  mapSalutations,
  parseUrlQuery
};
